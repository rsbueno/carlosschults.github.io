<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>carlos schults / blog</title>
    <description>Articles on software development and technology.</description>
    <link>https://carlosschults.net/</link>
    <atom:link href="https://carlosschults.net/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 24 Jun 2021 18:43:03 +0000</pubDate>
    <lastBuildDate>Thu, 24 Jun 2021 18:43:03 +0000</lastBuildDate>
    <generator>Jekyll v4.1.1</generator>
    
    
      <item>
        <title>How To Reduce Cyclomatic Complexity: A Complete Guide</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1617641333/reduce-cyclomatic-complexity/reduce-cyclomatic-complexity-1038x437.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Editorial note: I originally wrote this post for the LinearB blog.  You can &lt;a href=&quot;https://linearb.io/blog/reduce-cyclomatic-complexity/&quot;&gt;check out the original here, at their site&lt;/a&gt;. While you’re there, take a look at their product, a software intelligence solution that uses Git and project statistics to help dev teams improve their productivity.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Software engineers worth their salt are always searching for ways to improve their code. Fortunately for them, there’s a reliable way to evaluate the health of a codebase and project, and that’s through the use of &lt;a href=&quot;https://linearb.io/metrics-modern-dev-leaders/&quot;&gt;metrics&lt;/a&gt;. Today’s post is all about a specific metric. You’ll learn how to reduce cyclomatic complexity and, more importantly, why you would want to do it.&lt;/p&gt;

&lt;p&gt;We’ll start by defining cyclomatic complexity. After that, you’ll learn what the problem with having a high cyclomatic complexity value is and why you would need to reduce it. After the “what” and “why,” we’ll finally get to the “how”: We’ll show you tactics you can adopt to reduce the cyclomatic complexity of your code. Let’s get to it.&lt;/p&gt;

&lt;h2 id=&quot;cyclomatic-complexity-a-brief-definition&quot;&gt;Cyclomatic Complexity: A Brief Definition&lt;/h2&gt;

&lt;p&gt;Cyclomatic complexity is an important software metric. It refers to the number of possible execution paths inside a given piece of code—for instance, a function. The more decision structures you use, the more possible branches there are for your code.&lt;/p&gt;

&lt;p&gt;Cyclomatic complexity is especially important when it comes to testing. By calculating the cyclomatic complexity of a function, for instance, you know the minimum number of test cases you’ll need to achieve full &lt;a href=&quot;https://linearb.io/blog/what-is-branch-coverage/&quot;&gt;branch coverage&lt;/a&gt; of that function. So, we can say that cyclomatic complexity can be a predictor of how hard it is to test a given piece of code.&lt;/p&gt;

&lt;h2 id=&quot;a-dead-simple-cyclomatic-complexity-example&quot;&gt;A Dead Simple Cyclomatic Complexity Example&lt;/h2&gt;

&lt;p&gt;Consider the following function written in pseudocode:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, ${name}!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Since it has a single statement, it’s easy to see its cyclomatic complexity is 1. Now, let’s change things a little bit:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sayGoodbye&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, ${name}!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sayGoodbye&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Goodbye, ${name}!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The second version of the function has a branch in it. The caller to the function might pass &lt;strong&gt;true&lt;/strong&gt; as the value for the &lt;strong&gt;sayGoodbye&lt;/strong&gt; parameter, even though the default value is &lt;strong&gt;false&lt;/strong&gt;. If that does happen, the function will print a goodbye message after saying hello. On the other hand, if the caller doesn’t supply a value for the parameter or chooses &lt;strong&gt;false&lt;/strong&gt;, the goodbye message won’t be displayed.&lt;/p&gt;

&lt;p&gt;So, the function has two possible execution branches, which is the same as saying that its cyclomatic complexity has a value of 2.&lt;/p&gt;

&lt;h2 id=&quot;why-is-cyclomatic-complexity-bad&quot;&gt;Why Is Cyclomatic Complexity Bad?&lt;/h2&gt;

&lt;p&gt;Cyclomatic complexity isn’t intrinsically bad. For instance, you can have a piece of code with a somewhat high cyclomatic complex value that’s super easy to read and understand. However, generally speaking, we can say that having a high cyclomatic complexity is either a symptom of problems with the codebase or a potential cause of future problems. Let’s cover some of the reasons why you’d want to reduce it in more detail.&lt;/p&gt;

&lt;h3 id=&quot;cyclomatic-complexity-might-contribute-to-cognitive-complexity&quot;&gt;Cyclomatic Complexity Might Contribute to Cognitive Complexity&lt;/h3&gt;

&lt;p&gt;Cognitive complexity refers to how difficult it is to understand a given piece of code. Though that’s not always the case, cyclomatic complexity can be one of the factors driving up cognitive complexity. The higher the cognitive complexity of a piece of code, the harder it is to navigate and maintain.&lt;/p&gt;

&lt;h3 id=&quot;cyclomatic-complexity-makes-code-harder-to-test&quot;&gt;Cyclomatic Complexity Makes Code Harder to Test&lt;/h3&gt;

&lt;p&gt;As we’ve already mentioned, higher values of cyclomatic complexity result in the need for a higher number of test cases to comprehensively test a block of code—e.g., a function. So, if you want to make your life easier when writing tests, you probably want to reduce the cyclomatic complexity of your code.&lt;/p&gt;

&lt;h3 id=&quot;cyclomatic-complexity-contributes-to-higher-risk-of-defects&quot;&gt;Cyclomatic Complexity Contributes to Higher Risk of Defects&lt;/h3&gt;

&lt;p&gt;You’re likelier to introduce defects to an area of the codebase that you change a lot than to one you rarely touch. In addition, the more complex a given piece of code is, the more likely you are to misunderstand it and introduce a defect to it.&lt;/p&gt;

&lt;p&gt;So, complex code that suffers a lot of &lt;a href=&quot;https://linearb.io/blog/what-is-code-churn/&quot;&gt;churn&lt;/a&gt;—frequent changes by the team—represents more risk of defects. By reducing the cyclomatic complexity—and, ideally, the code churn as well—you’ll be mitigating those risks.&lt;/p&gt;

&lt;h2 id=&quot;how-to-reduce-cyclomatic-complexity-6-practical-ways&quot;&gt;How to Reduce Cyclomatic Complexity: 6 Practical Ways&lt;/h2&gt;

&lt;p&gt;We’ll now go over a few practical tips you can use to ensure the cyclomatic complexity of your code is as low as possible.&lt;/p&gt;

&lt;h3 id=&quot;1prefer-smaller-functions&quot;&gt;1.Prefer Smaller Functions&lt;/h3&gt;

&lt;h4 id=&quot;what-to-do&quot;&gt;What to Do?&lt;/h4&gt;

&lt;p&gt;All else being equal, smaller functions are easier to read and understand. They’re also less likely to contain bugs by virtue of their length. If you don’t have a lot of code, you don’t have lots of opportunities for buggy code. The same reasoning applies for cyclomatic complexity: You’re less likely to have complex code if you have less code period. So, the advice here is to prefer smaller functions.&lt;/p&gt;

&lt;h4 id=&quot;how-to-do-it&quot;&gt;How to Do It?&lt;/h4&gt;

&lt;p&gt;For each function, identify their core responsibility. Extract what’s left to their own functions and modules. Doing that also makes it easier to reuse code, which is a point we’ll revisit soon.&lt;/p&gt;

&lt;h3 id=&quot;2avoid-flag-arguments-in-functions&quot;&gt;2.Avoid Flag Arguments in Functions&lt;/h3&gt;

&lt;h4 id=&quot;what-to-do-1&quot;&gt;What to Do?&lt;/h4&gt;

&lt;p&gt;Flag arguments are boolean parameters you add to a function. People usually use them when they need to change how a function works while at the same time preserving the old behavior.&lt;/p&gt;

&lt;h4 id=&quot;how-to-do-it-1&quot;&gt;How to Do It?&lt;/h4&gt;

&lt;p&gt;What to use instead of flag parameters? In a nutshell, you can use strategies that accomplish the same result without incurring high complexity. For instance, you could create a new function, maintaining the old one as it is and extracting the common parts into its own private function.&lt;/p&gt;

&lt;p&gt;If the flag parameter is being used to enhance or improve the behavior of the original function somehow, you might want to leverage the &lt;a href=&quot;https://en.wikipedia.org/wiki/Decorator_pattern&quot;&gt;decorator pattern&lt;/a&gt; to reach the same end.&lt;/p&gt;

&lt;h3 id=&quot;3reduce-the-number-of-decision-structures&quot;&gt;3.Reduce the Number of Decision Structures&lt;/h3&gt;

&lt;h4 id=&quot;what-to-do-2&quot;&gt;What to Do?&lt;/h4&gt;

&lt;p&gt;You might consider this one a no-brainer. If the decision structures—especially &lt;strong&gt;if-else&lt;/strong&gt; and switch case—are what cause more branches in the code, it stands to reason that you should reduce them if you want to keep cyclomatic complexity at bay.&lt;/p&gt;

&lt;h4 id=&quot;how-to-do-it-2&quot;&gt;How to Do It?&lt;/h4&gt;

&lt;p&gt;Some of the tactics we’ve just seen can contribute to reducing the number of &lt;strong&gt;if&lt;/strong&gt; statements in your code. For instance, instead of using flag arguments and then using an &lt;strong&gt;if&lt;/strong&gt; statement to check, you can use the decorator pattern. Instead of using a switch case to go over many possibilities and decide which one the code will execute, you can leverage the &lt;a href=&quot;https://en.wikipedia.org/wiki/Strategy_pattern&quot;&gt;strategy pattern&lt;/a&gt;. Sure, at some point in the code, you’ll still need a switch case. After all, &lt;em&gt;someone&lt;/em&gt; has to decide which actual implementation to use. However, that point becomes the only point in the code that needs that decision structure.&lt;/p&gt;

&lt;h3 id=&quot;4get-rid-of-duplicated-code&quot;&gt;4.Get Rid of Duplicated Code&lt;/h3&gt;

&lt;h4 id=&quot;what-to-do-3&quot;&gt;What to Do?&lt;/h4&gt;

&lt;p&gt;Sometimes, you have functions/methods that do almost the same thing. Keeping both increases the total cyclomatic complexity of your class or module. If you can limit your duplicates, you can limit complexity.&lt;/p&gt;

&lt;h4 id=&quot;how-to-do-it-3&quot;&gt;How to Do It?&lt;/h4&gt;

&lt;p&gt;Remove duplicated code by:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;extracting the common bits of code to their own dedicated methods/functions.&lt;/li&gt;
  &lt;li&gt;leveraging design patterns—such as &lt;a href=&quot;https://en.wikipedia.org/wiki/Template_method_pattern&quot;&gt;template pattern&lt;/a&gt;—that encourage code reuse.&lt;/li&gt;
  &lt;li&gt;extracting generic utility functions into packages—gems, npm modules, NuGet packages, etc.—that can be reused through the whole organization.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;5remove-obsolete-code&quot;&gt;5.Remove Obsolete Code&lt;/h3&gt;

&lt;h4 id=&quot;what-to-do-4&quot;&gt;What to Do?&lt;/h4&gt;

&lt;p&gt;There are many reasons why it’s a good idea to remove obsolete—i.e., dead—code from your application. For our context, it suffices to say that that’s a “free” way to bring code coverage up and cyclomatic complexity down.&lt;/p&gt;

&lt;h4 id=&quot;how-to-do-it-4&quot;&gt;How to Do It?&lt;/h4&gt;

&lt;p&gt;Just use a tool that lets you identify dead code—even your IDE might be able to do it—and then delete it mercilessly.&lt;/p&gt;

&lt;h3 id=&quot;6dont-reinvent-the-wheel&quot;&gt;6.Don’t Reinvent the Wheel&lt;/h3&gt;

&lt;h4 id=&quot;what-to-do-5&quot;&gt;What to Do?&lt;/h4&gt;

&lt;p&gt;Let the developer who never wrote a function—or even a couple of them—to perform date formatting cast the first stone! It’s almost like a rite of passage.&lt;/p&gt;

&lt;p&gt;Writing code that simply duplicates functionality that your language’s standard library or your framework already provides is a sure way to increase complexity unnecessarily. If &lt;a href=&quot;https://wiki.c2.com/?SoftwareAsLiability&quot;&gt;code is a liability&lt;/a&gt;, you want to write only the strictly necessary amount of it.&lt;/p&gt;

&lt;h4 id=&quot;how-to-do-it-5&quot;&gt;How to Do It?&lt;/h4&gt;

&lt;p&gt;Implement a sound code review strategy that’s able to identify and get rid of such wheel reinventions.&lt;/p&gt;

&lt;h2 id=&quot;reduce-cyclomatic-complexity-increase-code-clarity&quot;&gt;Reduce Cyclomatic Complexity, Increase Code Clarity&lt;/h2&gt;

&lt;p&gt;Cyclomatic complexity is one of the most valuable metrics in software engineering. It has important implications for code quality and maintainability, not to mention testing. High cyclomatic complexity might be both a signal of existing problems and a predictor of future ones. So, keeping the value of this metric under control is certainly something you want to do if you want to achieve a healthy codebase. Keeping it under control is exactly what you’ve learned with our post.&lt;/p&gt;

&lt;p&gt;Before parting ways, a final caveat. Keep in mind that no metric is a panacea when used in isolation. Often, what you’d really want to do is to track and improve a &lt;a href=&quot;https://linearb.io/5-key-metrics-fix-your-software-teams-quality/&quot;&gt;group of metrics&lt;/a&gt; that, together, can give you the big picture view of the health of your team and project. Thanks for reading.&lt;/p&gt;
</description>
        <pubDate>Mon, 05 Apr 2021 00:00:00 +0000</pubDate>
        <link>https://carlosschults.net/en/reduce-cyclomatic-complexity/</link>
        <guid isPermaLink="true">https://carlosschults.net/en/reduce-cyclomatic-complexity/</guid>
        
        <category>best-practices</category>
        
        <category>software-testing</category>
        
        <category>automated-testing</category>
        
        <category>unit-testing</category>
        
        <category>software-engineering</category>
        
        
      </item>
    
      <item>
        <title>Mutation Testing: What It Is and How It Makes Code Coverage Matter</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1595528879/mutation/mutation-testing-1038x437.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Photo by &lt;a href=&quot;https://unsplash.com/@wocintechchat?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Christina @ wocintechchat.com&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/software-testing?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Editorial note: This post was originally written for the NCrunch blog. You can &lt;a href=&quot;https://blog.ncrunch.net/post/mutation-testing-code-coverage.aspx&quot;&gt;check out the original here, at their site&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I’ve been fascinated by mutation testing since I found out about it. I thought I’d finally found the answer to so many problems I had when writing tests. With mutation testing, I now had a way to really trust my tests. At last, code coverage had meaning again.&lt;/p&gt;

&lt;p&gt;Then, I was dumbstruck as I realized that very few developers shared my interest in mutation testing. In fact, I dare say that most developers haven’t even heard about it. And that’s a shame because they—and we, as an industry—are missing out on so many benefits.&lt;/p&gt;

&lt;p&gt;So, this post is my humble attempt to remedy the situation. I’ll start by explaining the current dilemmas developers face regarding the reliability of the tests they write. Then, I’ll proceed to show you how mutation testing is the answer to these dilemmas. I’ll explain what it is, how it can make your tests more trustworthy, and how it can turn code coverage into the valuable metric it should be.&lt;/p&gt;

&lt;h2 id=&quot;the-problem-trustworthiness-of-tests&quot;&gt;The Problem: Trustworthiness of Tests&lt;/h2&gt;

&lt;p&gt;When learning about &lt;a href=&quot;https://carlosschults.net/en/unit-testing-for-beginners-part1/&quot;&gt;unit tests&lt;/a&gt;—or automated tests in general—most people will ask the same or a similar question: &lt;em&gt;How do I know my tests are right?&lt;/em&gt; That’s a legitimate concern. If your tests aren’t trustworthy, then you might be better off with no tests at all.&lt;/p&gt;

&lt;p&gt;So what’s the answer? How do people deal with the problem of test trustworthiness without relying on mutation testing?&lt;/p&gt;

&lt;h2 id=&quot;making-tests-reliable-without-mutation-testing&quot;&gt;Making Tests Reliable Without Mutation Testing&lt;/h2&gt;

&lt;p&gt;There are techniques developers employ to improve the reliability of their tests, and we’ll briefly cover some of them in this section. If you’re experienced with unit testing, you’re probably familiar with them. Let’s dive in.&lt;/p&gt;

&lt;h3 id=&quot;keep-your-tests-simple&quot;&gt;Keep Your Tests Simple&lt;/h3&gt;

&lt;p&gt;The first technique we’ll cover here to improve the reliability of your tests is just to keep them simple. And by “simple” I mean with less cyclomatic complexity. The lower the &lt;a href=&quot;https://en.wikipedia.org/wiki/Cyclomatic_complexity&quot;&gt;cyclomatic complexity&lt;/a&gt; of a given piece of code, the likelier it is that it actually does what you think it does. Simple code is easier to reason about, which is a property you definitely want your unit tests to have.&lt;/p&gt;

&lt;p&gt;Keep test code simple to the point of being obvious. That means, for instance, avoiding loops or decision structures. Also, avoid doing anything fancy to compute the expected result (more on that in the next section). Hard-code it instead.&lt;/p&gt;

&lt;h3 id=&quot;dont-duplicate-implementation-code&quot;&gt;Don’t Duplicate Implementation Code&lt;/h3&gt;

&lt;p&gt;Let’s say you’re doing the &lt;a href=&quot;https://codingdojo.org/kata/RomanNumerals/&quot;&gt;Roman numerals kata&lt;/a&gt;. Resist the temptation to automatically generate the expected values (“I” for 1, “II” for 2, and so on). Instead, hard-code the values. If the repetition really bothers you and your test framework allows it, use parametrized tests.&lt;/p&gt;

&lt;p&gt;Why would that be a problem? Simple: The fancier your test code gets, the more likely it’s duplicating production code. If that’s the case, you might be unlucky enough to find yourself in the situation where your production code is wrong (it doesn’t solve the problem as it’s supposed to do) but the tests pass. That’s one of the worst possible scenarios. It’s even worse than having no tests at all.&lt;/p&gt;

&lt;h3 id=&quot;ensure-you-see-the-test-failing&quot;&gt;Ensure You See the Test Failing&lt;/h3&gt;

&lt;p&gt;Ensure each test fails at least once before it passes. If you see the test failing when you think it should be failing and vice versa, that’s a sign you’re moving in the right direction. It doesn’t guarantee anything, but it decreases the likelihood the test is passing due to a coincidence.&lt;/p&gt;

&lt;p&gt;Here’s how you’d do it. As soon as you get to the green phase, damage the implementation code in such a way that one or more tests should fail. You could invert conditionals, replace strings or numeric literals with random values, or even delete an if-statement. If you manage to sabotage production code and get away with it, that’s not a good sign. Your test suite is either wrong or incomplete. In a sense, you’re testing the tests.&lt;/p&gt;

&lt;p&gt;Developers who employ &lt;a href=&quot;https://carlosschults.net/en/csharp-unit-testing-intro-tdd/&quot;&gt;TDD (test-driven development)&lt;/a&gt; kind of already do that by definition. Since you write a failing test and then proceed to make it pass, you’re seeing the test fail. Of course, the test should fail in the expected manner. Meaning that if you’re performing an assertion, the test should fail due to an assertion failure and not, say, because the method under test throws an exception. Yes, this is better than nothing, but it still might not be enough. Since a unit test represents a single-use case, it’s totally possible to introduce a defect to production code in such a way that this particular test still passes.&lt;/p&gt;

&lt;h2 id=&quot;we-must-do-better-enter-mutation-testing&quot;&gt;We Must Do Better: Enter Mutation Testing&lt;/h2&gt;

&lt;p&gt;So you’ve just applied the technique described in the last section. Good! Not perfect, though. Here comes a problem. You can’t just insert a lot of defects and run the tests, because you wouldn’t be able to identify which defect was responsible for the tests failing. The correct way to do it is to insert a single deliberate defect, run all the tests, verify their result, and &lt;em&gt;then&lt;/em&gt; roll back the change. After that, you can introduce another mistake, run all the tests again, verify the result, roll back the change…rinse and repeat. Needless to say, such an approach is extremely slow, tedious, and error-prone.&lt;/p&gt;

&lt;p&gt;That’s where mutation testing comes in.&lt;/p&gt;

&lt;h3 id=&quot;whats-mutation-testing-anyway&quot;&gt;What’s Mutation Testing, Anyway?&lt;/h3&gt;

&lt;p&gt;Mutation testing is nothing more, nothing less, than automating the whole “sabotaging production code and running tests to see if they fail” process you just saw. To use mutation testing, you need a mutation testing framework. The framework will alter production code, introducing defects that are called “mutations.” For each mutation introduced, the framework will again run the suite of unit tests. If all tests pass, we say the mutation survived. That’s a bad thing. It means that either your suite is lacking tests or the existing ones are wrong.&lt;/p&gt;

&lt;p&gt;If, on the other hand, one or more tests fail, that means the mutation was killed, which is a good thing. The framework will repeat that process until it’s tested the relevant portion of the codebase. When it’s all done you can check the results, which will contain the number of mutations introduced, as well as the ratio of surviving vs. killed mutants.&lt;/p&gt;

&lt;h3 id=&quot;mutation-testing-makes-code-coverage-better&quot;&gt;Mutation Testing Makes Code Coverage Better&lt;/h3&gt;

&lt;p&gt;One of the most controversial topics in the unit testing world is the argument about code coverage. Some developers say that getting to full coverage is essential; others will argue that’s a useless metric. Who’s right?&lt;/p&gt;

&lt;p&gt;First of all, you have to understand that this issue isn’t black and white. As is the case with pretty much everything in software, there’s some nuance. Of course code coverage isn’t useless. Knowing that your codebase has, say, 10% of test coverage is definitely a useful piece of data. Such a coverage is way too low: Seeing the green bar won’t offer them any confidence. That’s not to say that having 100% coverage is necessarily a good thing in itself. You could have tests that don’t have assertions, for instance. Yes, this is a contrived example, but something like that could (and sometimes does) happen.&lt;/p&gt;

&lt;p&gt;A more common occurrence would be to just have tests that don’t exercise enough paths in the software. In short: Low code coverage is definitely a bad thing, but high (or full) code coverage is not &lt;em&gt;necessarily&lt;/em&gt; a good thing since it says nothing about the quality of the tests in the suite.&lt;/p&gt;

&lt;p&gt;Since mutation testing does verify the quality of the test suite, it’s the missing piece of the puzzle. If your codebase has a high code coverage and the results of mutation tests show that most or all mutations introduced are being killed, then smile! You probably have a great test suite in place!&lt;/p&gt;

&lt;h2 id=&quot;embrace-mutation-testing-today&quot;&gt;Embrace Mutation Testing Today&lt;/h2&gt;

&lt;p&gt;In today’s post, we talked about the problem of test trustworthiness, then proceeded to review some techniques and guidelines you can use to overcome that challenge. Finally, we saw how mutation testing is the superior approach to solving that problem.&lt;/p&gt;

&lt;p&gt;Here’s the thing: The techniques we covered are good guidelines to follow when writing unit tests. Your tests will benefit from abiding by them, whether you employ mutation testing or not. But guidelines can only take you so far. They depend too much on human willpower and discipline, and we all have limited amounts of those. In order to take the quality of your tests to the next level, you need to embrace automation.&lt;/p&gt;

&lt;p&gt;It takes just a few minutes of googling to find a mutation testing tool for your preferred tech stack. Do that today, and stop missing out on the benefits that mutation testing can provide you and your team!&lt;/p&gt;

</description>
        <pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate>
        <link>https://carlosschults.net/en/mutation-testing/</link>
        <guid isPermaLink="true">https://carlosschults.net/en/mutation-testing/</guid>
        
        <category>software-testing</category>
        
        <category>automated-testing</category>
        
        <category>unit-testing</category>
        
        <category>code-coverage</category>
        
        <category>mutation-testing</category>
        
        <category>tdd</category>
        
        
      </item>
    
      <item>
        <title>C# Unit Testing: Getting Started With TDD</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1459979937/testes-unitarios-iniciantes-min_povcse.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post is part of a series. &lt;a href=&quot;http://carlosschults.net/tag/unit-testing-series/&quot;&gt;See all the articles in the series.&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Today I bring you another post to help you get started with C# unit testing. I’ve already covered the &lt;a href=&quot;https://carlosschults.net/en/unit-testing-for-beginners-part1/&quot;&gt;basics of unit tests&lt;/a&gt;, explaining what they are and why they’re so important. After that, I showed you &lt;a href=&quot;https://carlosschults.net/en/unit-testing-for-beginners-part2/&quot;&gt;how to get started with unit testing&lt;/a&gt; with a practical example. Today, we go one step further, exploring the TDD methodology.&lt;/p&gt;

&lt;p&gt;You’ve probably have heard of TDD, but you might be confused as to what it is. This isn’t your fault, by the way. There’s quite a lot of misconception surrounding this acronym. Some people even use it interchangeably with unit testing. In this post, you’re going to learn why they’re wrong, and more.&lt;/p&gt;

&lt;p&gt;We start the post with a brief definition of TDD. You’ll learn not only that TDD stands for Test-Driven Development, but also that it’s not a testing technique, despite the name. After that, I explain what TDD is and what its benefits are.&lt;/p&gt;

&lt;p&gt;After the “what” and “why” are both out of our way, we’ll be ready to have some fun. I’m going to show you, in practice, how to get started with TDD, developing a solution for a famous programming exercise. Sounds good? Then, let’s dig in.&lt;/p&gt;

&lt;h2 id=&quot;c-unit-testing--tdd-basics&quot;&gt;C# Unit Testing &amp;amp; TDD Basics&lt;/h2&gt;

&lt;p&gt;I’ve mentioned earlier that TDD is not a testing technique. What is it, though? And how it’s related to C# unit testing (or unit testing in general, for that matter?)&lt;/p&gt;

&lt;h3 id=&quot;defining-tdd&quot;&gt;Defining TDD&lt;/h3&gt;

&lt;p&gt;As you’ve seen, TDD stands for Test-Driven Development. It is a technique or methodology of software development that uses unit tests to drive the development of the application.&lt;/p&gt;

&lt;p&gt;Instead of doing the more intuitive thing, which would be writing unit tests after the production code, the TDD methodology states that you should start by writing a failing unit test. Then you write the production code, but only what’s necessary to make the test pass.&lt;/p&gt;

&lt;p&gt;I guess you’re now wondering at least two things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How does that work in practice?&lt;/li&gt;
  &lt;li&gt;Why write code in such a weird way?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s what we’re going to see next.&lt;/p&gt;

&lt;h3 id=&quot;the-tdd-phases&quot;&gt;The TDD Phases&lt;/h3&gt;

&lt;p&gt;Test-driven development relies on the repetition of an incredibly short cycle. This cycle is composed of three phases:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;First, you write a test that represents a specific requirement of the functionality you’re trying to implement.&lt;/li&gt;
  &lt;li&gt;You then make the test pass, writing the minimum amount of production code you can get away with.&lt;/li&gt;
  &lt;li&gt;If necessary, you refactor the code to eliminate duplication or other problems.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Since the functionality doesn’t exist yet, the test you write in step #1 will fail. That is, in languages such as Python or Ruby. In the case of statically typed languages such as Java or C#, the code won’t even compile. For our purposes, code not compiling counts as a test failure.&lt;/p&gt;

&lt;p&gt;In step #2, you have to make the test pass, but nothing beyond that. What I mean is that your goal here isn’t to solve the problem, at least not yet. Instead, your only job is to make the test pass, writing the least possible amount of code. Cheating—for instance, returning a hard-coded value—is not only OK but encouraged, as you’ll soon see.&lt;/p&gt;

&lt;p&gt;Finally, the third phase is the only one that allows you to write production code without having to create a failing test first. But you can’t create new classes or functions; you can only refactor the code you wrote in the previous step, to make it more readable, to eliminate duplication, or to solve another problem. And, of course, the test should still pass.&lt;/p&gt;

&lt;p&gt;People often use refer to the TDD as “red-green-refactor” because most unit testing tools use red to denote failing tests and green for passing tests.&lt;/p&gt;

&lt;h3 id=&quot;why-use-tdd&quot;&gt;Why Use TDD?&lt;/h3&gt;

&lt;p&gt;The hard thing to understand when getting started with TDD isn’t the how. The “how” is trivial: write a test, make it pass, maybe refactor, rinse, repeat. The troubling part is the “why.” Why develop software in such a non-intuitive way?&lt;/p&gt;

&lt;p&gt;I’ll talk more of the TDD philosophy in future articles. In a nutshell, applying TDD ensures you’ll have testable code from the beginning. It will encourage you to design your code in a simple and modular way.&lt;/p&gt;

&lt;p&gt;But perhaps, the main advantage of TDD is increasing the developer’s confidence on their code. By developing one tiny step at a time, you’ll never be able to get a lot wrong, since you’re doing too little. Knowing that you’re only one failing test away from having working code is reassuring.&lt;/p&gt;

&lt;h2 id=&quot;c-unit-testing--tdd-the-hands-on-guide-to-get-started&quot;&gt;C# Unit Testing &amp;amp; TDD: The Hands-On Guide To Get Started&lt;/h2&gt;

&lt;p&gt;I’ve covered how to get started with C# unit testing in the past. I’ve also covered the required tools and how to get started. However, I won’t assume you’ve read those articles. Instead, I’ll cover everything from scratch. So, you’ll be able to follow the tutorial even if you have zero experience with unit testing.&lt;/p&gt;

&lt;h3 id=&quot;our-problem-the-string-calculator-kata&quot;&gt;Our Problem: The String Calculator Kata&lt;/h3&gt;

&lt;p&gt;For our tutorial, we’ll write a solution for Roy Osherov’s &lt;a href=&quot;https://osherove.com/tdd-kata-1&quot;&gt;String Calculator kata&lt;/a&gt;. A coding kata is a programming exercise, meant to allow developers to practice fundamental agile software-engineering practices, such as refactoring, and—you’ve guessed it—TDD.&lt;/p&gt;

&lt;p&gt;For simplicity’s sake, I’ll ignore some of the kata’s requirements. What follows are the requirements we’re going to use:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We’re going to create a class called StringCalculator, with a single static method with the signature static int Add(string numbers);&lt;/li&gt;
  &lt;li&gt;The method takes a string representing numbers separated by a comma, and return their sum.&lt;/li&gt;
  &lt;li&gt;If we pass an empty string, the method should return zero.&lt;/li&gt;
  &lt;li&gt;Passing a single number should result in the number itself.&lt;/li&gt;
  &lt;li&gt;If we pass negative numbers, the method should throw an ArgumentException, with the message “Negative numbers not allowed:” followed by the negatives that were specified.&lt;/li&gt;
  &lt;li&gt;The method should ignore numbers greater than 1000 should. So, “1,2,1000” should result in 1003, but “1,2,1001” should result in 3.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;creating-the-production-project&quot;&gt;Creating The Production Project&lt;/h3&gt;

&lt;p&gt;For this tutorial, I’ll be using the community edition of Visual Studio 2019. If you don’t already have it, you can download it and install it from free.&lt;/p&gt;

&lt;p&gt;Open VS and click on “Create a new project,” like in the following image:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1594235427/unit3/img1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the opened window, choose Class Library (.NET Core) as the template for the new project. Then, click on “Next”:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1594235427/unit3/img2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next screen simply asks you for a name for the project and the solution. I chose” StringCalculatorKata” for both the project and the solution. You’ll also have to provide a location for saving the project files. When you’re done, just click “Create.”&lt;/p&gt;

&lt;p&gt;If everything went well, you should see the default class open for you in Visual Studio. Go to Solution Explorer and delete that class; we’re not going to need it.&lt;/p&gt;

&lt;h3 id=&quot;creating-the-test-project&quot;&gt;Creating The Test Project&lt;/h3&gt;

&lt;p&gt;Now, it’s time to create the test project. We could this in two ways: creating a regular “Class Library” project and then adding the necessary dependencies to it, or creating a unit test project right away. We’ll go with the latter since it makes the whole thing easier.&lt;/p&gt;

&lt;p&gt;You know the drill: right-click the solution, go to “Add,” then “New Project…”. Then, choose the template “NUnit Test Project (.NET Core).”&lt;/p&gt;

&lt;p&gt;Then, you’ll be required to provide a name and a location for the project. I like to follow the naming convention of naming the test project after the production project, with a “.Test” added. So, I pick “StringCalculatorKata.Test.” Finish the creation of the project.&lt;/p&gt;

&lt;p&gt;If everything went right, you should now see a new class that looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tests&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SetUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Test1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Pass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s do a few things. First, get rid of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Setup()&lt;/code&gt; method. We won’t need it. Then, add a new method with the code below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Test2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So, we now have two tests, one that should pass and another that should fail. Let’s run them to see if they’re working correctly. Go to the “Run” menu and click on “Run All Tests.”&lt;/p&gt;

&lt;p&gt;Now, open the Test Explorer window (View -&amp;gt; Test Explorer). It should look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1594235427/unit3/tests-running.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It looks like everything is working fine! But before we start doing our coding kata exercise, there are two final steps we need to take. First, let’s rename the test class. Go to the solution explorer, expand the unit test project, and delete its default test class. Then, right-click the test project, go to “Add,” then “New class…” and add a new class called “StringCalculatorKata.” Alternatively, you can rename the existing class.&lt;/p&gt;

&lt;p&gt;The second thing we have to do is to ensure our test project can see our production project. To solve that, we’re adding a reference.&lt;/p&gt;

&lt;p&gt;Go to the solution explorer again, right-click the test project, then go to “Add” and click on “Reference…”.&lt;/p&gt;

&lt;p&gt;In the new window, select “Projects” on the left panel, and then select the StringCalculatorKata project, which should be the only one available:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1594235427/unit3/add-reference.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then, you just have to click on “OK,” and now you’re ready to go.&lt;/p&gt;

&lt;h2 id=&quot;starting-our-coding-kata&quot;&gt;Starting Our Coding Kata&lt;/h2&gt;

&lt;p&gt;Now, we’re ready to write our first failing test. So, open the StringCalculatorTest class and add the following method to it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Add_EmptyStringAsParam_ReturnsZero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AreEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringCalculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In our first test case, we test the simplest possible scenario. That is, we call the Add method passing an empty string, which, according to the requirements you saw before, should result in 0. Of course, neither the Add method nor the StringCalculator class exists, so our code doesn’t even compile. Well, congratulations! You’ve successfully performed the first step in the red-green-refactor cycle by writing a failing test! Remember: in statically-typed languages such as C#, failure to compile counts as a failed test.&lt;/p&gt;

&lt;p&gt;So, our first step is to get rid of the compilation error. If you hover over “StringCalculator,” you should see a little pop-up explaining the error and offering possible fixes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1594238110/unit3/hover-tip.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click on “Show potential fixes” and then on “Generate new type…”. You should then see a window prompting you for the details and location of the new type. Change the “access” to “public” and the location to the production project, which is “StringCalculatorKata.” The window should look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1594238213/unit3/create-production-class.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click on “OK.” Now, if you open solution explorer and expand the StringCalculatorKata project, you should see the StringCalculator.cs class lurking around there. Cool.&lt;/p&gt;

&lt;p&gt;However, our code still doesn’t compile. And that’s because, despite creating the production class, we didn’t add the Add method to it. So, let’s do it in the same way we did with the class.&lt;/p&gt;

&lt;p&gt;Hover over the “Add” word until the help pop-up shows up with the message “’ StringCalculator’ does not contain a definition for ‘Add.’” Click on Show potential fixes, and then click on “Generate method ‘StringCalculator.Add’.”&lt;/p&gt;

&lt;p&gt;You’ll see that the production class now contains a method called Add, with double as a return type. We want the method to return int, so let’s change that. Let’s also change the parameter name to “numbers” to match the coding kata’s requirements. At this point, your complete StringCalculator class should look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringCalculator&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NotImplementedException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now your code should compile. Run the test again, and you’ll see that it fails, with a message like this:&lt;/p&gt;

&lt;pre&gt;
Add_EmptyStringAsParam_ReturnsZero
   Source: StringCalculatorTest.cs line 8
   Duration: 43 ms

  Message: 
    System.NotImplementedException : The method or operation is not implemented.
  Stack Trace: 
    StringCalculator.Add(String numbers) line 9
    StringCalculatorTest.Add_EmptyStringAsParam_ReturnsZero() line 10

&lt;/pre&gt;

&lt;p&gt;We have a truly failing test. Are we ready to write production code? Not so fast. Sure, our test fails, but it fails in the wrong way. Since our test contains an assertion, we expected a failed assertion. Instead, what we’ve got is a failure due to the method under test throwing an exception.&lt;/p&gt;

&lt;p&gt;The fix here is simple. Let’s just change the Add method, so it returns any number different from zero:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, run the test again, and you’ll see the error message is now this:&lt;/p&gt;

&lt;pre&gt;
Add_EmptyStringAsParam_ReturnsZero
   Source: StringCalculatorTest.cs line 8
   Duration: 76 ms

  Message: 
      Expected: 0
      But was:  -1
&lt;/pre&gt;

&lt;h3 id=&quot;making-the-test-pass&quot;&gt;Making The Test Pass&lt;/h3&gt;

&lt;p&gt;We’re now finally ready to make the test pass. As I’ve said earlier, to make a test pass, you’re not only allowed but encouraged to cheat. In our case, we can simply make the Add method return zero:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;writing-the-second-test-a-single-number&quot;&gt;Writing The Second Test: A Single Number&lt;/h3&gt;

&lt;p&gt;The requirements say that passing a single number should return the number itself. That’s sound like a useful thing to test:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Add_StringContainingSingleNumber_ReturnsTheNumberItself&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AreEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringCalculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The test fails with the following message:&lt;/p&gt;

&lt;pre&gt;
Add_StringContainingSingleNumber_ReturnsTheNumberItself
   Source: StringCalculatorTest.cs line 14
   Duration: 56 ms

  Message: 
      Expected: 5
      But was:  0

&lt;/pre&gt;

&lt;p&gt;How can we make the test above pass in the laziest possible way? How about this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;testing-two-numbers&quot;&gt;Testing Two Numbers&lt;/h3&gt;

&lt;p&gt;Since we’ve already tested the Add method by passing zero numbers (an empty string) and a single number, it feels like the next natural step for us now would be to write a test for the scenario of adding two numbers. So, let’s do just that.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Add_TwoNumbersSeparatedByComma_ReturnsTheirSum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;7,8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expectedResult&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AreEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expectedResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringCalculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The test above naturally fails since our method currently returns 0 when it gets an empty string and five otherwise. How can we change it, so this new test passes, the older tests continue to pass, in a way that doesn’t solve the problem generally?&lt;/p&gt;

&lt;p&gt;This is an idea:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;testing-three-numbers&quot;&gt;Testing Three Numbers&lt;/h3&gt;

&lt;p&gt;Have you noticed that, up until now, we haven’t done any refactoring? Well, we’re getting closer to the point when our tests drive us to include some nasty duplication to our code. Then, we’ll use refactoring to change the code in a way that gets closer to a general solution.&lt;/p&gt;

&lt;p&gt;Let’s see if we can do that by testing the scenario with three numbers:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Add_ThreeNumbersSeparatedByComma_ReturnsTheirSum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1, 2, 3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AreEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringCalculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The test will naturally fail. Since the provided string contains commas, we fall into the conditional branch that returns 15. Our challenge now is to change the production method in a way that makes this test pass. Can we do it without going to the general solution to the problem?Let’s see.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1, 2, 3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;By comparing the specified param with the exact input used in the test, we can make the test pass while avoiding going for the general solution. However, now we have managed to create code duplication. Can you see it? We’re making two comparisons against the value of numbers, one right after the other. Let’s see if we can get rid of that duplication.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1, 2, 3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TryParse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;By leveraging the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TryParse&lt;/code&gt; method from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System.Int32&lt;/code&gt; type, I’ve managed to get rid of the first if instruction. We’ve also used a feature introduced in &lt;a href=&quot;https://carlosschults.net/en/csharp-7-features/&quot;&gt;C# 7&lt;/a&gt; called “out variables.” This feature allows us to use out parameters without having to declare them beforehand.&lt;/p&gt;

&lt;p&gt;All tests still pass, so I can’t write more production code. What should the next test be?&lt;/p&gt;

&lt;h3 id=&quot;testing-more-than-three-numbers&quot;&gt;Testing More Than Three Numbers&lt;/h3&gt;

&lt;p&gt;The requirements don’t say we should only be able to handle three numbers. So, let’s create another test case to cover the scenarios with 4, 5, or more numbers. While we’re at it, we can also include the requirement of ignoring numbers greater than 1000.&lt;/p&gt;

&lt;p&gt;To do this without having to create a lot of test methods, we’re going to leverage NUnit’s &lt;a href=&quot;https://docs.nunit.org/articles/nunit/writing-tests/attributes/testcase.html&quot;&gt;parametrized tests&lt;/a&gt; feature, adding a single method with several test cases:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1,2,3,4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;8,7,20&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;5,0,4,1001&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;5,0,4,1000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1009&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;26,6,90&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;122&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Add_MoreThanThreeNumbersSeparatedByComma_ReturnsTheirSum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AreEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringCalculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice that the third test case exemplifies the requirement that says we should ignore numbers greater than 1000. The next test case, however, shows that 1000 should not be ignored. If you run the tests, you’ll see that test explorer shows each test case as a distinct test.&lt;/p&gt;

&lt;p&gt;How can we make this test pass? Honestly, by this post, it’s way easier to go for the correct implementation than it is to cheat. So, let’s do just that:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TryParse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;part&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The code above should be easy to understand. We just split the string into parts using the comma as the delimiter. Then, for each part, we parse it to an integer, verify whether it’s equal or less than a thousand, and, if so, we add it to the result variable. Finally, we return the result.&lt;/p&gt;

&lt;h2 id=&quot;were-not-done-yet&quot;&gt;We’re Not Done Yet&lt;/h2&gt;

&lt;p&gt;The requirements say that negative numbers shouldn’t be allowed. Let’s add a test for that! For brevity’s sake, we’ll add a single test method with several test cases, so we’re forced to go for the correct implementation right away:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1,2,3,4,5,-5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-1,1,2,9&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;5,6,8,-5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Add_StringContainingNegativeNumbers_Throws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Throws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArgumentException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringCalculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For this test, we’re asserting not against a return value. Rather, we’re checking whether the method under test throws an exception.&lt;/p&gt;

&lt;p&gt;Remember that the requirements say we should throw an exception with a message saying that negatives are not allowed. We should also include a list of the negatives that were passed. This will require some changes in our method:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;negatives&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TryParse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;part&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;negatives&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;elseif&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;negatives&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;negativesList&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;negatives&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exceptionMessage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$&quot;Negative numbers not allowed: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;negativesList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArgumentException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exceptionMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see, right at the beginning, we define a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&amp;lt;int&amp;gt;&lt;/code&gt; to store the negatives we find while iterating over all the numbers. Inside the loop, we verify whether the current number is negative. If it is, we add it to the list. If it isn’t, we verify whether it’s less than or equals to 1000, in which we case we add it to the result variable.&lt;/p&gt;

&lt;p&gt;After the loop, we verify whether the negatives list has any elements. If it has, we create an exception message that includes the specified negatives and then throw a new ArgumentException. Otherwise, we return the result.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This post was a practical guide on how to get started with TDD in C#. So, where do you go from here?&lt;/p&gt;

&lt;p&gt;Well, most things in life you learn by doing. Programming is certainly one of those things. So, if you want the concepts you’ve seen today to really sink in, you’ve got to practice.&lt;/p&gt;

&lt;p&gt;The code I’ve written during this post is available as &lt;a href=&quot;https://github.com/carlosschults/string-calculator-kata&quot;&gt;a public repository on GitHub.&lt;/a&gt; Go there, clone it using &lt;a href=&quot;https://carlosschults.net/en/git-basics-for-tfs-users&quot;&gt;Git,&lt;/a&gt;, and start playing with it.&lt;/p&gt;

&lt;p&gt;You’ll see that I created one commit for each step in the TDD cycle. That way, it becomes easier for future readers to visualize all the steps in the process by going through the project’s history, one commit at a time.&lt;/p&gt;

&lt;p&gt;There are improvements that can be made to the code I shared today. For instance, the final &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add&lt;/code&gt; method could be written in a shorter, clearer, more efficient way, using &lt;a href=&quot;https://carlosschults.net/en/functional-programming-csharp/&quot;&gt;LINQ&lt;/a&gt;. You could add more test cases. Also, the kata requirements ask for a specific exception message in the case of negative numbers. Even though we’ve implemented the message as specified, we didn’t write a test for it. We could do that as part of your practice.&lt;/p&gt;

&lt;p&gt;Finally, stay tuned to this blog. This post is part of a series, to which I intend to add more parts.&lt;/p&gt;

&lt;p&gt;Thanks for reading, and until the next time!&lt;/p&gt;
</description>
        <pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate>
        <link>https://carlosschults.net/en/csharp-unit-testing-intro-tdd/</link>
        <guid isPermaLink="true">https://carlosschults.net/en/csharp-unit-testing-intro-tdd/</guid>
        
        <category>software-testing</category>
        
        <category>beginners</category>
        
        <category>unit-testing</category>
        
        <category>unit-testing-series</category>
        
        <category>automated-tests</category>
        
        <category>csharp</category>
        
        <category>agile</category>
        
        
      </item>
    
      <item>
        <title>Null Is Evil. What's The Best Alternative? Null.</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1593715153/null-evill-1068x437_ztikwf.jpg&quot; alt=&quot;&quot; /&gt;
&lt;span&gt;Photo by &lt;a href=&quot;https://unsplash.com/@benhershey?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Ben Hershey&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/null?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Editorial note: I originally wrote this post for the NDepend blog.  You can &lt;a href=&quot;https://blog.ndepend.com/null-evil/&quot;&gt;check out the original here, at their site&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;“Null is evil.” If you’ve been a software developer for any reasonable length of time, I bet you’ve come across that statement several times.&lt;/p&gt;

&lt;p&gt;I’d say it’s also very likely that you agree with the sentiment, i.e., that the null reference is a feature our programming languages would be better off without. Even its creator has expressed regret over the null reference, &lt;a href=&quot;https://en.wikipedia.org/wiki/Tony_Hoare#Apologies_and_retractions&quot;&gt;famously calling it his “billion-dollar mistake.”&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bashing poor old null tends to get old, so authors don’t do just that. They also offer alternatives. And while I do believe that many of the presented alternatives have their merits, I also think we may have overlooked the best solution for the whole thing.&lt;/p&gt;

&lt;p&gt;In this post, we’re going to examine some of the common alternatives for returning null before making the argument that the best alternative is null itself. Let’s get started!&lt;/p&gt;

&lt;h2 id=&quot;null-is-toxic&quot;&gt;Null Is Toxic…&lt;/h2&gt;

&lt;p&gt;I won’t dwell too much on the whole “null is evil” thing, since a lot has been written about it already. Some examples:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&amp;quot;https://sidburn.github.io/blog/2016/03/20/null-is-evil&amp;quot;&amp;gt;Null is Evil&quot;&gt;Null Is Evil&lt;/a&gt;
&lt;a href=&quot;&amp;quot;http://blog.ploeh.dk/2015/11/13/null-has-no-type-but-maybe-has/&amp;quot;&amp;gt;&quot;&gt;Null has no type, but Maybe has&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/12777/are-null-references-really-a-bad-thing&quot;&gt;This Stack Overflow answer&lt;/a&gt; also has some valuable information.&lt;/p&gt;

&lt;h2 id=&quot;but-useful-what-are-the-alternatives&quot;&gt;…But Useful. What Are the Alternatives?&lt;/h2&gt;

&lt;p&gt;Now, I hope we’re on the same page regarding null’s status as a problematic language feature. But toxic or not, null serves some purposes. People use it to represent an absent, invalid, or unknown piece of data, or even to indicate that an error has occurred.&lt;/p&gt;

&lt;p&gt;What should they be doing instead?&lt;/p&gt;

&lt;h3 id=&quot;throw-an-exception&quot;&gt;Throw an Exception&lt;/h3&gt;

&lt;p&gt;In some situations in which people return null, the reasonable thing to do is to throw an exception. Think of it this way: if a method promises to perform something and fails to do so, it should throw. In other words: when a method fails to fulfill its contract, then it is reasonable to throw.&lt;/p&gt;

&lt;p&gt;Of course, you should reserve exceptions for scenarios that are truly exceptional. If a certain situation happens often, then an exception is not the best solution.&lt;/p&gt;

&lt;h3 id=&quot;null-object-pattern&quot;&gt;Null Object Pattern&lt;/h3&gt;

&lt;p&gt;Consider the following lines of code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contract&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What should happen if there isn’t a contract with ID equals to 42? If the “Find” method returns null, then you’re in for a nasty NullReferenceException. As I’ve said earlier, null makes your code lie. If we were to be really pedantic about it, the method “Find” should be renamed to “FindOrReturnNull”. Too verbose, but more honest.&lt;/p&gt;

&lt;p&gt;Anyway, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Null_object_pattern&quot;&gt;null object pattern&lt;/a&gt; is an attempt to solve this problem. And how does it do that? By creating its own kind of null.&lt;/p&gt;

&lt;p&gt;To implement the pattern, we create a new class  ** ** (let’s call it “NullContract”) that represents the case when a contract is missing. We make this new class fulfill the same contract as the original class, but we do nothing in the methods. So, if we imagine that “Contract” implements “IContract”, our NullContract class could look something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NullContract&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IContract&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// ctor, properties, etc &lt;/span&gt;
	
	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;months&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// deliberately does nothing&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;By employing the null object pattern you could—theoretically, at least—be sure that you’ll always get an object that fulfills the contract you expect it to honor without blowing up in your face.&lt;/p&gt;

&lt;h3 id=&quot;maybeoption&quot;&gt;Maybe/Option&lt;/h3&gt;

&lt;p&gt;Finally, we have a very interesting alternative that is often found in &lt;a href=&quot;https://blog.ndepend.com/functional-programming-makes-code-not-oo/&quot;&gt;functional programming&lt;/a&gt; languages. This alternative is the use of a dedicated type meant to represent the use case of a potentially absent value. For instance, &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/options&quot;&gt;in F# this is called the option type&lt;/a&gt;; Haskell calls it &lt;a href=&quot;https://hackage.haskell.org/package/base-4.11.0.0/docs/Data-Maybe.html&quot;&gt;Maybe&lt;/a&gt;. Starting in version 8, Java introduced the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html&quot;&gt;Optional&lt;/a&gt; class.&lt;/p&gt;

&lt;p&gt;At this time, C# doesn’t offer something along those lines natively.&lt;/p&gt;

&lt;h2 id=&quot;alternatives-to-null-are-they-any-good&quot;&gt;Alternatives to Null: Are They Any Good?&lt;/h2&gt;

&lt;p&gt;Having presented the more commonly used alternatives for null, it’s time for the final verdict. Let’s start with the “throw exception” option.&lt;/p&gt;

&lt;h3 id=&quot;exceptions&quot;&gt;Exceptions&lt;/h3&gt;

&lt;p&gt;If the caller fails to supply the correct arguments for the function they’re calling, then we could say they’re breaking the function’s contract. Throwing an exception is the correct thing do to in this situation.&lt;/p&gt;

&lt;p&gt;The following code is a good example of what  &lt;strong&gt;not&lt;/strong&gt;  to do:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsNullOrWhiteSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// all is fine with the world; let's do what must be done and return some Foo!&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;// uh-oh! Something wrong with the input parameters. Let's return null. Sounds like a good idea!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I see code like this all the time in production. Nested ifs are awful. They should have at least used an “and” to fit the whole thing in just one if. But what should really happen is something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArgumentOutOfRangeException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;The value should be in the range of 1 to 100, inclusive&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsNullOrWhiteSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArgumentException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
             &lt;span class=&quot;s&quot;&gt;&quot;The value should be a valid string.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
             &lt;span class=&quot;k&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;// all is fine with the world; let's do what must be done and return some Foo!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Also, &lt;a href=&quot;https://blogs.msdn.microsoft.com/ericlippert/2008/09/10/vexing-exceptions/&quot;&gt;don’t catch exogenous exceptions&lt;/a&gt; that might happen inside your method and return null; instead, just let them bubble up since these type of exceptions represent problems outside of your control. Issues like a failure in the network are problems that you couldn’t have prevented anyway, code-wise.&lt;/p&gt;

&lt;h3 id=&quot;null-object-pattern-1&quot;&gt;Null Object Pattern&lt;/h3&gt;

&lt;p&gt;Let’s consider the null object pattern, which I’m certainly not a huge fan of. One problem with this pattern is that you should only use it when the calling code doesn’t care about the outcome of whatever it’s trying to accomplish. Consider again our contract example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contract&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This line of code is not “aware” (nor does it care) if the “Contract” variable refers to a valid contract or an instance of NullContract. If it’s a valid contract, it will be extended by 12 months. If it’s not, then nothing will happen. Sometimes, that’s exactly what you want, but not always. In this example, if a contract with ID equals to 42 really was supposed to exist but did not…maybe throwing an exception would work best.&lt;/p&gt;

&lt;p&gt;All I’ve said so far is that the null object pattern isn’t well suited for every scenario. This isn’t that bad of a problem; you could say the same about pretty much anything.&lt;/p&gt;

&lt;p&gt;My main issue with the null object pattern is that it amounts to little more than creating a new type of null without really solving the problem. You see,  &lt;strong&gt;using the pattern doesn’t prevent you from returning null&lt;/strong&gt;. If I consume some method written by a third party that claims to use the pattern, I should be able to assume that whatever it returns is safe for me to deference. But I can’t know for sure. I have three options:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Trust the author of the code;&lt;/li&gt;
  &lt;li&gt;Inspect the source code, if possible; or&lt;/li&gt;
  &lt;li&gt;Continue to check for null, which completely defeats the purpose of using the pattern.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You could argue that these problems aren’t relevant in the context of a single team working with the same codebase. The developers could agree on using the pattern correctly. But if everything amounts to trust and convention at the end of the day, you might as well just agree to never return null and you’d have the same result.&lt;/p&gt;

&lt;h3 id=&quot;maybeoption-1&quot;&gt;Maybe/Option&lt;/h3&gt;

&lt;p&gt;Last but not least, what about Maybe/Option types? This is an alternative that’s both elegant and robust, especially in languages such as F# where you’re actually forced, in a sense, to handle both cases by using pattern matching.&lt;/p&gt;

&lt;p&gt;But the sad reality is this: while maybe/option types are amazing approaches, they can’t change the fact that null exists and will continue existing. You can’t really stop people from using it, nor can you remove it from all the lines of code people have been writing since the dawn of C#.&lt;/p&gt;

&lt;p&gt;So, even though they are great approaches, they still suffer from the problem of being yet another type of null for the developers to deal with.&lt;/p&gt;

&lt;h2 id=&quot;the-solution-for-null-null-itself&quot;&gt;The Solution for Null: Null Itself&lt;/h2&gt;

&lt;p&gt;Do you know the old saying “When in a hole, stop digging?” For better or worse, null exists. Toxic or not, it’s a feature people use. So maybe the solution for this whole thing is just to fix null.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://kotlinlang.org/&quot;&gt;kotlin&lt;/a&gt; language got it right by having different nullable and non-nullable types and adding all kinds of checks to prevent the developer from doing things that would end badly, like dereferencing a nullable type without checking it for null or assigning a nullable value to a non-nullable variable.&lt;/p&gt;

&lt;p&gt;C# gave us the first step in the right direction many years ago with &lt;a href=&quot;https://docs.microsoft.com/pt-br/dotnet/csharp/programming-guide/nullable-types/&quot;&gt;nullable value types&lt;/a&gt;. After a long wait, &lt;a href=&quot;https://blog.ndepend.com/c-8-0-features-glimpse-future/&quot;&gt;reference types will finally get the same benefit with C# 8.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The alternative for null is null itself… &lt;strong&gt;when done properly&lt;/strong&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 02 Jul 2020 00:00:00 +0000</pubDate>
        <link>https://carlosschults.net/en/null-is-evil</link>
        <guid isPermaLink="true">https://carlosschults.net/en/null-is-evil</guid>
        
        <category>software-engineering</category>
        
        <category>best-practices</category>
        
        <category>programming</category>
        
        <category>csharp</category>
        
        
      </item>
    
      <item>
        <title>Sharpen the Saw: 4 Quick Tips for Your Dev Team</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1592314350/sharpen-the-saw-1038x437_z9ermr.jpg&quot; alt=&quot;&quot; /&gt;
Photo by Sven Brandsma on Unsplash&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Editorial note: I originally wrote this post for the SubMain blog.  You can &lt;a href=&quot;https://blog.submain.com/sharpen-saw/&quot;&gt;check out the original here, at their site&lt;/a&gt;. While you’re there, have a look at CodeIt.Right, their automated code review tool.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Are you familiar with the expression “sharpen the saw” in the context of learning and continuous improvement? If you’ve read Stephen Covey’s &lt;a href=&quot;https://en.wikipedia.org/wiki/The_7_Habits_of_Highly_Effective_People&quot; title=&quot;The 7 Habits of Highly Effective People&quot;&gt;The 7 Habits of Highly Effective People&lt;/a&gt;, then I’m sure you are. For those unfamiliar with the term, it basically means to engage in practices that will make you better at your craft without necessarily involving the craft itself.&lt;/p&gt;

&lt;p&gt;What can you as a tech lead, lead developer, or software architect do to encourage the developers on your team to sharpen their saws? That’s what we’ll to answer with this post. We’ll show you four quick, easy ways your team can improve their skills and deliver more value.&lt;/p&gt;

&lt;h2 id=&quot;1-sharpening-the-saw-by-reading-create-a-technical-book-club&quot;&gt;1. Sharpening the Saw by Reading: Create a Technical Book Club&lt;/h2&gt;

&lt;p&gt;Wouldn’t it be awesome to have a team made up of incredibly well-informed people, who are up to date with the relevant, shiny new things and have solid knowledge on the fundamentals of our industry? Yeah, I thought so. And there’s no better way of achieving that than by reading.&lt;/p&gt;

&lt;p&gt;What I suggest here is something very simple. Every month, you and your team choose an assigned read for the dev team. On which subject, you ask? Design patterns, concurrency, refactoring, unit testing—I’d say virtually anything is fair game, as long as the developers themselves are interested.&lt;/p&gt;

&lt;p&gt;Oh, and before I forget: this probably goes without mentioning, but your company should &lt;em&gt;buy&lt;/em&gt; the developers copies of the chosen books. If you feel you can’t afford that, well, I don’t believe you’re going to have a company for very long, I’m afraid.&lt;/p&gt;

&lt;p&gt;A less ideal solution would be to buy a copy of the book for one developer. Have them study the book in their spare time and then present their findings to the rest of the team by giving one or more internal talks. Then, select another book and another team member, and have that developer give the internal talk next month.&lt;/p&gt;

&lt;p&gt;Now, speaking of internal talks…&lt;/p&gt;

&lt;h2 id=&quot;2-sharpening-the-saw-by-talking-internal-presentations&quot;&gt;2. Sharpening the Saw by Talking: Internal Presentations&lt;/h2&gt;

&lt;p&gt;Having the developers deliver internal talks to each other is a great way to spread knowledge throughout the company. For the developers giving the talk, it’s the perfect opportunity to get some hands-on practice with several skills, such as&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Coming up with a subject and doing the necessary research.&lt;/li&gt;
  &lt;li&gt;Creating an appealing slide deck.&lt;/li&gt;
  &lt;li&gt;Speaking in public, which can be a tough experience for many of us.&lt;/li&gt;
  &lt;li&gt;Answering questions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I could go on and on, but in short, they’ll be practicing the general skill of communication. That’s simply priceless. Giving internal talks can be great practice for speaking at conferences, for example.&lt;/p&gt;

&lt;p&gt;And what’s on the table for the audience? Obviously, the learning opportunity. But I’ll add that, in the case of internal company talks, the probability of actually putting that knowledge you gained into use is much higher. Since the speakers are actually your coworkers—people who share context with you every day and are aware of the problems and challenges your company is facing—I’d say it’s very likely that they pick a topic that relates to the company.&lt;/p&gt;

&lt;h2 id=&quot;3-sharpening-the-saw-by-writing-create-and-maintain-an-engineering-blog&quot;&gt;3. Sharpening the Saw by Writing: Create and Maintain an Engineering Blog&lt;/h2&gt;

&lt;p&gt;When your developers give internal talks, they’re teaching one another, which is fantastic. But what if they could spread this knowledge beyond just your shop, while at the same time improving their writing skills and ability to articulate an argument? What if they could do so while learning about things like content marketing and SEO? And while they’re at it, what if they could demonstrate the technical know-how of your company, positioning it as an expert on its domain area?&lt;/p&gt;

&lt;p&gt;There’s a way to do just that, and it’s called blogging.&lt;/p&gt;

&lt;p&gt;Start an engineering blog. Decide on the specifics, such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What topics should be covered?&lt;/li&gt;
  &lt;li&gt;How frequently will you publish?&lt;/li&gt;
  &lt;li&gt;Who will the authors be?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It would make sense if, at least at the beginning, the developers who are naturally better writers were the blog’s authors. But since the goal here is to learn—to sharpen the saw—the ideal scenario is one in which every developer gets a chance to hone their writing chops.&lt;/p&gt;

&lt;h2 id=&quot;4-sharpening-the-saw-by-programming-hold-in-company-coding-dojos&quot;&gt;4. Sharpening the Saw by Programming: Hold In-Company Coding Dojos&lt;/h2&gt;

&lt;p&gt;A &lt;a href=&quot;http://codingdojo.org/&quot;&gt;coding dojo&lt;/a&gt;is a kind of training session for programmers in which they rotate in pairs, working in a collaborative manner on the same problem. The inspiration for the name comes from the martial arts. The goal of a coding dojo isn’t necessarily to solve the problem?but to develop both engineering skills, such as unit testing/TDD, and social skills, such as &lt;a href=&quot;https://blog.submain.com/code-review-vs-pair-programming-2/&quot;&gt;pair programming.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To hold a coding dojo, you’re going to need the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Space.&lt;/strong&gt; You need a?room large enough to hold from five to 15 people. (Some people say 20 people for a coding dojo is acceptable, but IMHO, this is way too much). Since we’re talking about sharpening your team’s saws, an office or meeting room at your company will probably do.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;A computer&lt;/strong&gt;. It could be a desktop computer or laptop; it doesn’t matter, as long as it’s placed on a desk with two chairs, where two people can sit and collaborate comfortably together.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;A projector or a large monitor&lt;/strong&gt;. All of the participants need to watch what’s going on at any given moment.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Snacks and beverages!&lt;/strong&gt; A coding dojo should be a bonding experience, and human beings love to connect over food and drink. And &lt;a href=&quot;https://www.artima.com/weblogs/viewpost.jsp?thread=4414&quot;&gt;programmers are human beings&lt;/a&gt;, last time I checked. Just be considerate of those with dietary restrictions, and you should be good.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, let’s say you’re actually doing this thing. You’ve assembled the needed gear, and people have shown up at the agreed-upon location. What now?&lt;/p&gt;

&lt;p&gt;Well, first things first. You need a problem! But not all programming challenges make a good coding dojo problem. As I said earlier, solving the problem isn’t necessarily the goal—rather, it’s more about practicing engineering skills such as TDD and pair programming. So, writing a compiler from scratch isn’t going to cut it. But implementing a converter to roman numerals might work quite well.&lt;/p&gt;

&lt;p&gt;What makes for a good coding dojo problem?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It’s small, so it’s feasible to solve it in a relatively short time.&lt;/li&gt;
  &lt;li&gt;It lends itself well to TDD.&lt;/li&gt;
  &lt;li&gt;It’s finite and well-defined. Vague, open-ended challenges won’t do.&lt;/li&gt;
  &lt;li&gt;It’s based on a real-world problem, not an abstract one.&lt;/li&gt;
  &lt;li&gt;It’s different from the challenges you solve at your day job.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You don’t really need to worry about finding good problems, though. The &lt;a href=&quot;http://codingdojo.org/KataCatalogue/&quot;&gt;web’s got your back.?&lt;/a&gt;There are &lt;a href=&quot;http://codekata.pragprog.com/&quot;&gt;plenty&lt;/a&gt; of &lt;a href=&quot;https://sites.google.com/site/tddproblems/&quot;&gt;sources&lt;/a&gt; for &lt;a href=&quot;https://code.joejag.com/coding-dojo/example-katas/&quot;&gt;problems&lt;/a&gt; out there.&lt;/p&gt;

&lt;p&gt;With choosing the problem out of the way, it’s time to pick a language to work on. You don’t need to use the same language you use every day at your job. In fact, it’s nice to use the coding dojo as an opportunity to try out different languages. This can help make things fresh and more challenging. Just don’t forget to have a person who’s knowledgeable about this language around so they can help when the group hits obstacles.&lt;/p&gt;

&lt;p&gt;Now,?to start, you’ll need two volunteers: one to be the driver and one to be the co-pilot. These terms come from pair programming. The driver is the person who’s typing, and the co-pilot gives advice and feedback. The remaining people are the audience, at least for now. Ideally, everyone in a coding dojo session should write code.&lt;/p&gt;

&lt;p&gt;So, with everyone in their places, the fun begins. The driver starts coding, using TDD’s red-green-refactor cycle:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First, they write a failing test.&lt;/li&gt;
  &lt;li&gt;Then, they write just the smallest possible amount of code that will make the test pass.&lt;/li&gt;
  &lt;li&gt;When the test is passing, it’s time to refactor. Only in this phase?are people in the audience are allowed to speak, giving advice and feedback to help the driver better refactor the code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the end of a?previously-established time period (five to ten?minutes), the driver stops coding and returns to the audience. The copilot becomes the driver, and a new member of the audience becomes the copilot.&lt;/p&gt;

&lt;p&gt;This cycle continues until everyone in the room had written code or the allotted time for the session expires—whatever comes first.&lt;/p&gt;

&lt;h3 id=&quot;retrospective&quot;&gt;Retrospective&lt;/h3&gt;

&lt;p&gt;As soon as the coding session itself is done, take some time to do a retrospective. Ask the participants about the things they liked and didn’t like about the session, and write it all down. These two lists will serve as a guideline for what to do and not to do in your future coding dojos.&lt;/p&gt;

&lt;h2 id=&quot;start-sharpening-your-sawand-your-teams-sawright-away&quot;&gt;Start Sharpening Your Saw—and Your Team’s Saw—Right Away!&lt;/h2&gt;

&lt;p&gt;Software development is a profession of practice. It requires continuous learning—or should I say, continuous saw-sharpening. Beyond the tips I’ve just given you, there are plenty of other ways to sharpen your saw. In fact, you’re doing one of them right now. You’re reading a tech blog!&lt;/p&gt;

&lt;p&gt;From &lt;a href=&quot;https://blog.submain.com/category/rulesexplained/&quot;&gt;in-depth tutorials on tools like CodeIt.Right&lt;/a&gt; that can help your team write better code?to &lt;a href=&quot;https://blog.submain.com/coding-best-practices-short-time/&quot;&gt;insights about best practices&lt;/a&gt;?to even tips about things &lt;a href=&quot;https://blog.submain.com/4-common-datetime-mistakes-c-avoid/&quot;&gt;you might have taken for granted&lt;/a&gt;, there’s no shortage of interesting and useful topics you can learn about by reading a good tech blog.&lt;/p&gt;

&lt;p&gt;Thanks for reading, and happy sharpening!&lt;/p&gt;

</description>
        <pubDate>Tue, 16 Jun 2020 00:00:00 +0000</pubDate>
        <link>https://carlosschults.net/en/sharpen-the-saw/</link>
        <guid isPermaLink="true">https://carlosschults.net/en/sharpen-the-saw/</guid>
        
        <category>software-engineering</category>
        
        <category>best-practices</category>
        
        <category>programming</category>
        
        <category>career-advice</category>
        
        
      </item>
    
      <item>
        <title>Functional Programming in C#: Map, Filter, and Reduce Your Way to Clean Code</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1548200356/Untitled_xfahmy.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Editorial note: I originally wrote this post for the SubMain blog.  You can &lt;a href=&quot;https://blog.submain.com/csharp-functional-programming/&quot;&gt;check out the original here, at their site&lt;/a&gt;. While you’re there, have a look at CodeIt.Right, which can help you improve the quality of your code.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;C# is supposed to be an object-oriented language, but it’s possible that you, as a .NET/C# developer, have been using functional programming concepts without even knowing it.&lt;/p&gt;

&lt;p&gt;And that’s what today’s post is about. I’ll just first briefly cover the attractions of functional programming and why it makes sense to apply it even when using a so-called object-oriented language. Then I’ll show you how you’ve already been using some functional style in your C# code, even if you’re not aware of it. I’ll tell you how you can apply functional thinking to your code in order to make it cleaner, safer, and more expressive.&lt;/p&gt;

&lt;h2 id=&quot;c-functional-programming-why&quot;&gt;C# Functional Programming: Why?&lt;/h2&gt;

&lt;p&gt;We know the .NET framework offers some functional capabilities in the form of the LINQ extension methods, but should you use them?&lt;/p&gt;

&lt;p&gt;To really answer this, we need to go back a step and understand the attraction of functional programming itself.  The way I see it, the easiest path to start understanding the benefits of functional programming is to first understand two topics: &lt;strong&gt;pure functions&lt;/strong&gt; and &lt;strong&gt;immutable data&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pure functions&lt;/strong&gt; are functions that can only access the data they receive as arguments and, as a consequence, can’t have any side effects. &lt;strong&gt;Immutable data&lt;/strong&gt; are just objects or data structures that, once initialized, can’t have their values changed, making them easier to reason about and automatically thread-safe.&lt;/p&gt;

&lt;h2 id=&quot;fundamental-functional-programming-operations-and-how-to-perform-them-using-c&quot;&gt;Fundamental Functional Programming Operations and How to Perform Them Using C#&lt;/h2&gt;

&lt;p&gt;With the &lt;em&gt;what&lt;/em&gt; and &lt;em&gt;why&lt;/em&gt; of functional programming out of the way, it’s time to get to the &lt;em&gt;how&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;l’ll be covering three fundamental functions: map, filter, and reduce. I’ll start by showing some use cases, then I’ll show a traditional, procedural way of solving the problem. And finally, I’ll present the functional way.&lt;/p&gt;

&lt;h2 id=&quot;map&quot;&gt;Map&lt;/h2&gt;

&lt;p&gt;In simple terms, the “map” operation takes a sequence of items, applies some transformation to each one of those items, and returns a new sequence with the resulting items. Let’s see some examples.&lt;/p&gt;

&lt;p&gt;Suppose you wrote the following code, due to a customer’s demand:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AddThreeToEachElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	       &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s a function that adds three to each element of the given &lt;a href=&quot;https://blog.submain.com/c-array/&quot;&gt;array&lt;/a&gt; of integers. Pretty straightforward.&lt;/p&gt;

&lt;p&gt;Now a request for a new function comes in. This time, it should add five to each element in an array. Ignoring the &lt;a href=&quot;https://en.wikipedia.org/wiki/Rule_of_three_(computer_programming)&quot;&gt;rule of three,&lt;/a&gt; you jump right ahead into a generalized version, parameterizing the number to be added:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AddNumberToEachElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	   &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt;
	   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	        &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then yet another request comes in. Now you must write a function that will multiply each element of the given array by, let’s say, three. I won’t add the code sample now because I’m sure you’ve got the picture. By now, you should know better than to hardcode the number, so you’d probably jump ahead to a general version right away. Even then, some duplication would still exist: the loop itself. Hmm…what if you could keep just the loop and instead parameterize the action to be applied on each item?&lt;/p&gt;

&lt;h3 id=&quot;the-functional-way&quot;&gt;The Functional Way&lt;/h3&gt;

&lt;p&gt;Take into consideration what you’ve just read about pure functions—and also your previous knowledge of&lt;a href=&quot;https://blog.submain.com/coding-best-practices-short-time/&quot;&gt;programming best practices&lt;/a&gt; in general—and think of ways the code could be improved.&lt;/p&gt;

&lt;p&gt;From my perspective, the main problems are&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;The code is too specific&lt;/strong&gt;. It can’t be easily changed to accommodate other transformations being applied to the array elements. It just performs a sum, and that’s it.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Too much boilerplate&lt;/strong&gt;. Look at the previous sample again. Count the lines. There are seven, of which only one really concerns itself with carrying through the business logic of the method.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How would the functional way improve on this? That’s the way I’d write the first example in F#, for instance:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I’m assuming here that “numbers” is a sequence of integers I’ve got somehow. Then I use the map function on the Seq module, passing the sequence as a parameter, along with a function that takes an int and adds three to it.&lt;/p&gt;

&lt;h3 id=&quot;the-functional-way-netc-flavor&quot;&gt;The Functional Way, .NET/C# Flavor&lt;/h3&gt;

&lt;p&gt;.NET implements the map operation in the form of the “Select” LINQ extension method. So you could rewrite the F# example above like this:&lt;/p&gt;

&lt;p&gt;var result = numbers.Select(x =&amp;gt; x + 3);&lt;/p&gt;

&lt;p&gt;One important point that needs explaining is that the type of the resulting sequence doesn’t need to match the type of the source sequence. Do you have a list of ‘Employee’ and need a sequence of ints (containing, for instance, their IDs)? Easy peasy:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employees&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EmployeeRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;All&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;filter&quot;&gt;Filter&lt;/h2&gt;

&lt;p&gt;I think filter is, hands down, the easiest operation of the bunch. It has a very intuitive name, and the need for filtering stuff is so common in programming that I bet you correctly guessed what it is just by its name (if you didn’t know it already).&lt;/p&gt;

&lt;p&gt;For the sake of completeness, though, let’s define it. The filter operation…wait for it…filters a sequence, returning a new sequence containing just the items approved by some criteria.&lt;/p&gt;

&lt;h3 id=&quot;the-imperative-way&quot;&gt;The Imperative Way&lt;/h3&gt;

&lt;p&gt;Since we’ve used employees in the previous section, let’s keep within the theme. Let’s say you need to come up with a list of the employees who have used at least three sick days.&lt;/p&gt;

&lt;p&gt;In a more procedural style, you’d maybe write something along the following lines:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetEmployeesWithAtLeastNSickdays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
	
	    &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sickdays&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;   
	    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
	    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I wouldn’t say there’s something &lt;em&gt;definitely&lt;/em&gt; wrong with this code. The method’s name is a bit too long, but it’s very descriptive. The code does what it promises. And it’s readable enough.&lt;/p&gt;

&lt;p&gt;But similarly to the previous section, we can make the argument that the code is too noisy. We can say that, essentially, the only line that does something domain related is the &lt;em&gt;if&lt;/em&gt; test. All the other lines are basically boilerplate-y infrastructure code. Can a functional approach help us here?&lt;/p&gt;

&lt;h3 id=&quot;the-functional-way-1&quot;&gt;The Functional Way&lt;/h3&gt;

&lt;p&gt;Let’s rewrite the method above by using LINQ:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetEmployeesWithAtLeastNSickdays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SickDays&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here we use the “Where” extension method, passing the filtering criterium as a delegate. To be honest, the outer method became not very useful since it just delegates the work. In real life, I’d get rid of it.&lt;/p&gt;

&lt;h2 id=&quot;reduce&quot;&gt;Reduce&lt;/h2&gt;

&lt;p&gt;Reduce is often the one many developers have some difficulty understanding. But it isn’t hard at all. Think of it like this: you have a sequence of something, and you also have a function that takes two of these “somethings” and returns one, after doing some processing.&lt;/p&gt;

&lt;p&gt;Then you start applying the function. You apply it to the first two elements in the sequence and store the result. Then you apply it again to the result and the third element. Then you do it again to the result and the fourth item, and so forth.&lt;/p&gt;

&lt;p&gt;The classical example of reduce is adding up a list of numbers, so that’s exactly what we’re going to do in our example.&lt;/p&gt;

&lt;h3 id=&quot;the-imperative-way-1&quot;&gt;The Imperative Way&lt;/h3&gt;

&lt;p&gt;So, suppose we’re to sum a bunch of integers. We could do it like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
	    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At this point, you’re probably familiar with what I have to say about this code: it isn’t necessarily wrong, but it’s inflexible and noisy. Can functional programming save us?&lt;/p&gt;

&lt;h3 id=&quot;the-functional-way-2&quot;&gt;The Functional Way&lt;/h3&gt;

&lt;p&gt;In .NET/C#, the “Reduce” operation assumes the form of the “Aggregate” extension method. This time, I’ll just get rid of the enclosing method and write the LINQ solution right away:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Aggregate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Things look a little bit more complex here, but don’t get scared. In this case, we’re just passing a function that takes two parameters, instead of one, like in the previous examples. It has to be that way since the function must be applied to two elements of the sequence each time.&lt;/p&gt;

&lt;p&gt;But as it turns out, there’s an even easier way of solving this particular problem (adding a bunch of numbers). Since summing a sequence of numbers is such a common use case, there’s a dedicated method to do just that. It’s called, not surprisingly, “Sum”:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What’s “Aggregate” good for, then? Well, adding a list of integers is just one of the applications for reduce, but you’re not in any way restricted to only that. You can use it with any binary operation, such as concatenating strings or summing custom types.&lt;/p&gt;

&lt;h2 id=&quot;the-verdict-is-the-functional-approach-better&quot;&gt;The Verdict: Is the Functional Approach Better?&lt;/h2&gt;

&lt;p&gt;After these examples, you might be wondering if the “functional” way is any better? It’d be extremely hard to define what “better” is, so I won’t even bother. Let’s consider another criterion: readability.&lt;/p&gt;

&lt;p&gt;Though we know that code readability &lt;a href=&quot;https://blog.submain.com/evaluate-code-readability/&quot;&gt;can also be highly subjective,&lt;/a&gt; I’d say that yes, the functional examples are more readable. Suppose we need to retrieve and sum all the salaries from employees with more than five years of company time. We could easily do that by writing a loop, in which we’d test the condition and accumulate the salary if the test turned out true.&lt;/p&gt;

&lt;p&gt;Or we could just write this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CompanyTimeInYears&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Salary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I honestly believe this line to be more readable (and generally better) than the procedural approach. It’s more declarative; it shows the intention of &lt;strong&gt;what&lt;/strong&gt; we’re trying to get done without being too concerned with the &lt;strong&gt;how&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It almost reads like natural language: “The list of employees where their time in the company is greater than five years, select their salary and sum them”.&lt;/p&gt;

&lt;h2 id=&quot;add-some-functional-spice-to-make-your-code-tastier&quot;&gt;Add Some Functional Spice to Make Your Code Tastier&lt;/h2&gt;

&lt;p&gt;Many people use LINQ for years without even realizing they’re using functional programming concepts. I take this as proof that functional programming isn’t beyond the capabilities of the enterprise developer who lacks a strong background in math.&lt;/p&gt;

&lt;p&gt;Some of the concepts presented here are neither new nor restricted to functional programming. The benefits of distinguishing between functions that produce side effects from those that don’t is the basis of principles like &lt;a href=&quot;https://en.wikipedia.org/wiki/Command%E2%80%93query_separation&quot;&gt;command-query separation (CQS)&lt;/a&gt;, for instance.&lt;/p&gt;

&lt;p&gt;The goal of this post was not to teach you functional programming. This is honestly beyond my capabilities, as I’m still studying it myself. And besides, there are &lt;a href=&quot;https://fsharpforfunandprofit.com&quot;&gt;awesome resources for that purpose if you want to learn more&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Instead, what I wanted here is to give you a little taste of what a functional style can do for your code, which is to make it more expressive, concise, and declarative. Now it’s up to you to try to apply the functional mindset to the code you write.&lt;/p&gt;
</description>
        <pubDate>Tue, 22 Jan 2019 00:00:00 +0000</pubDate>
        <link>https://carlosschults.net/en/functional-programming-csharp/</link>
        <guid isPermaLink="true">https://carlosschults.net/en/functional-programming-csharp/</guid>
        
        <category>csharp</category>
        
        <category>best practices</category>
        
        <category>functional-programming</category>
        
        
      </item>
    
      <item>
        <title>Value Objects: A Tool for Self-Documented Code and Fewer Errors</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1540385528/value-object-tool/value-object-tool-1038x437.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Editorial note: I originally wrote this post for the NDepend blog.  You can &lt;a href=&quot;https://blog.ndepend.com/value-objects-tool-self-documented-code-fewer-errors/&quot;&gt;check out the original here, at their site&lt;/a&gt;. While you’re there, take a look at NDepend.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Have you ever heard of value objects? I bet you have. Even though they’re talked about a lot less than I’d like, they’re still talked about &lt;em&gt;enough &lt;/em&gt;that many developers have at least some passing familiarity with the term.&lt;/p&gt;

&lt;p&gt;“Passing familiarity” isn’t good enough, though. So that’s what we’re fixing with this post. Today you’re going to learn what value objects are and how you, as a C# developer, can harness their power to make your code clearer, self-documenting, and less error-prone.&lt;/p&gt;

&lt;h2 id=&quot;what-arevalue-objects&quot;&gt;What Are Value Objects?&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Value objects&lt;/em&gt; are one of the building blocks of domain-driven design, as proposed by Eric Evans on his seminal book &lt;a href=&quot;https://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215&quot;&gt;Domain-Driven Design: Tackling Complexity in the Heart of Software.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Simply put, a value object is an object that represents a value. And I’m aware that sounds excruciatingly obvious and even boring when said this way. So, what’s all the fuss about it?&lt;/p&gt;

&lt;h2 id=&quot;some-properties&quot;&gt;Some Properties&lt;/h2&gt;

&lt;p&gt;I think it’s easier to understand value objects when we quit trying to explain what they are and talk about their characteristics instead.&lt;/p&gt;

&lt;h3 id=&quot;value-objects-dont-have-identity&quot;&gt;Value Objects Don’t Have Identity&lt;/h3&gt;

&lt;p&gt;I think it’s fair to say that the main characteristic of a value object is that it lacks &lt;em&gt;identity&lt;/em&gt;.  But what does that really mean in practice?&lt;/p&gt;

&lt;p&gt;Let’s say you go to the nearest ATM and deposit a $50 bill into your checking account. Then you drive a couple of hours to another town, go to a bank there, and withdraw $50.&lt;/p&gt;

&lt;p&gt;Now comes the question: does it matter to you that the bill you’ve got in your hands now isn’t the same one you deposited earlier? Of course not!  And why is that? Well, the thing we generally care about, as it concerns money, is its &lt;em&gt;value,&lt;/em&gt; not the vessel that holds that value&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In other words, we couldn’t care less about the &lt;em&gt;identity&lt;/em&gt; of that particular bill. The only thing that matters is its value.&lt;/p&gt;

&lt;p&gt;It’s no coincidence that money is a classic example of a value object.&lt;/p&gt;

&lt;h3 id=&quot;value-objects-are-immutable&quot;&gt;Value Objects Are Immutable&lt;/h3&gt;

&lt;p&gt;Can you change the number five? No, you can’t. There’s nothing you (or anyone else) can do to &lt;em&gt;mutate&lt;/em&gt; the value of the number five. If you add one to it, it doesn’t change; instead, you get six, which is &lt;em&gt;another&lt;/em&gt; number.&lt;/p&gt;

&lt;p&gt;Could you alter a date? Nope, you also can’t do that. If you start with “2018-01-9” and add one day to it, you get “2018-01-10.” You don’t change the original date at all. In fact, the immutability aspect of a value object is a direct consequence of the previous point; since a value object doesn’t have identity, we can say the value object &lt;em&gt;is&lt;/em&gt; its value. Therefore, it doesn’t even make sense to talk about changing it.&lt;/p&gt;

&lt;p&gt;The implication of this for you as a developer is that value objects are inherently safer and easier to reason about. There’s no risk of changing them by accident since they can’t be changed at all.&lt;/p&gt;

&lt;h3 id=&quot;value-objects-have-structural-equality&quot;&gt;Value Objects Have Structural Equality&lt;/h3&gt;

&lt;p&gt;Imagine you could magically teleport people to anywhere you wish, and you’ve decided to swap two men called “John Smith” during the night. How do you think their respective partners would react to see a total stranger in their beds instead of their husbands?&lt;/p&gt;

&lt;p&gt;People are obviously not interchangeable, despite sharing one or more characteristics. Even if our two Johns had not only the same name but also the same height, weight, skin color, and hair color, they would still be two completely different people. Even identical twins (or, on a slightly Black Mirror note, clones) continue to be different people, despite being as equal to one another as you can get.&lt;/p&gt;

&lt;p&gt;On the other hand, people change continuously during their lives, but they are still the same people (as long as we don’t get philosophical here, as in “&lt;a href=&quot;https://www.brainyquote.com/quotes/heraclitus_107157&quot;&gt;a man can’t step into the same river twice&lt;/a&gt;” type of thing).&lt;/p&gt;

&lt;p&gt;You may be wondering if I’ve gotten off track here, but I haven’t. This only serves to illustrate the crucial differences between entities and value objects. With entities, we care about identity, not about the value of its attributes.  With value objects, we care only about the value itself.&lt;/p&gt;

&lt;p&gt;The implication of this, in programming terms, is that value objects typically present structural equality. It makes sense to compare them by their values, not their references or identities. So, when implementing a value object, you’ll want to override “Equals” and “GetHashCode.”&lt;/p&gt;

&lt;h2 id=&quot;whats-in-it-for-me&quot;&gt;What’s in It for Me?&lt;/h2&gt;

&lt;p&gt;By now you should have a pretty good idea of what value objects are. What’s not clear yet is why you should use them.  To answer this, let’s consider the following line of code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;4.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Is there something wrong with this? Well, I could &lt;em&gt;&lt;a href=&quot;https://starwars.wikia.com/wiki/Wookieepedia:Quote_of_the_Day/Archive/Obi-Wan_Kenobi&quot;&gt;Ben Kenobi&lt;/a&gt; &lt;/em&gt;you and say that it might be wrong “from a certain point of view.” But I won’t. Instead, I’ll say it’s definitely wrong. It doesn’t matter that it compiles. It also doesn’t matter that it actually works some or even most of the time.&lt;/p&gt;

&lt;p&gt;The problem here is the code smell known as “primitive obsession,” i.e., modeling domain concepts using primitive types. The next few sections will dive in into why is this such a problem and how the use of value objects can help.&lt;/p&gt;

&lt;h3 id=&quot;value-objects-provide-context&quot;&gt;Value Objects Provide Context&lt;/h3&gt;

&lt;p&gt;OK, so why is &lt;a href=&quot;https://blog.ndepend.com/easy-miss-code-smells/&quot;&gt;primitive obsession a bad thing&lt;/a&gt;? There are in fact several reasons, but one of the main problems with the code snippet presented in the previous section is that it lacks a critical piece of information. As you can see, the code assigns the value 4.5 to the variable. But 4.5 what? Meters? Kilometers? Miles? Parsecs? In other words, we don’t have the &lt;strong&gt;unit of measurement&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This can be a recipe for disaster. It just takes a developer fetching a value from a database or a file, thinking it’s supposed to represent meters but it’s in fact kilometers. When they then proceed to use the value in a calculation, say, adding kilometers to miles…silence. Instead of failing fast, you’d get a program that silently misbehaves while corrupting data and providing inconsistent results.&lt;/p&gt;

&lt;p&gt;Well, at least you’re using &lt;a href=&quot;https://blog.ndepend.com/unit-testing-affect-codebases/&quot;&gt;unit tests&lt;/a&gt;…right?&lt;/p&gt;

&lt;p&gt;Sure, nothing prevents you from encoding that information in the variable name itself:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;distanceInKilometers&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;4.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Yeah, this is slightly better than the previous version, but it’s still a very brittle solution. At any moment, the value can be assigned to another variable or even passed as an argument to some function, and then the information is lost.&lt;/p&gt;

&lt;p&gt;By using value objects, you can eliminate this problem easily. You’d just have to choose a unit to be the internal representation of the type—for distance, it probably makes sense to use meter, since it’s an SI unit. And then you can provide several static factory methods for each necessary unit:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;Distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FromMeters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;distance2&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;Distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FromKilometers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AreEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;distance2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you go on to overload the “+” operator (or create a “Plus” method), you can safely add two distances that originate from different units of measurement since the internal representation is the same.&lt;/p&gt;

&lt;h3 id=&quot;value-objects-are-type-safe&quot;&gt;Value Objects Are Type Safe&lt;/h3&gt;

&lt;p&gt;Let’s say you have a method with this signature:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;PerformSomeImportantCalculation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;temperature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What would happen if you made a mistake and inverted the values when calling the method? The program would silently misbehave, and you wouldn’t even be aware. Hopefully, you’d have a good QA process in place that would catch this bug before it hits production, but hope isn’t exactly a strategy, right?&lt;/p&gt;

&lt;p&gt;Well, as it turns out, that’s the exact kind of problem value types are great at preventing. You’d just have to use custom types for each concept instead of relying on primitives:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;PerformSomeImportantCalculation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Distance&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;Temperature&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temperature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That way, you can’t just pass the parameters in the wrong order: the compiler won’t let you!&lt;/p&gt;

&lt;h3 id=&quot;value-objects-prevent-duplication-of-domain-logic&quot;&gt;Value Objects Prevent Duplication of Domain Logic&lt;/h3&gt;

&lt;p&gt;When you model domain concepts using primitive types, you tend to have a lot of code related to that concept spread throughout the whole application. Let’s say you’re building an application that has the concept of a license plate, and you’re using strings to represent those. Of course, not all strings are valid license plates. So your code ends up with format validations for license plates everywhere.&lt;/p&gt;

&lt;p&gt;This could be prevented by creating a “LicensePlate” class and performing the necessary validations on its constructor. That way you’d consolidate the validation code in one place; should it ever change in the future, you’d only have to change it in this one place.&lt;/p&gt;

&lt;h2 id=&quot;value-objects-and-value-types-arent-synonymous&quot;&gt;Value Objects and Value Types Aren’t Synonymous&lt;/h2&gt;

&lt;p&gt;This section is necessary in order to clarify a common misconception, which is to mix up value objects with the concept of value types in C#. See, in C#, we have &lt;a href=&quot;https://carlosschults.net/en/value-reference-types-in-csharp/&quot;&gt;two categories of types: reference types and value types.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While you certainly can use structs (value types) to implement value objects—examples in the BCL would be DateTime or the primitive numeric types— there’s nothing preventing you from using classes.&lt;/p&gt;

&lt;p&gt;On the other hand, structs are not automatically value objects. For instance, while it’s considered good practice to keep structs immutable, they’re not immutable by default.&lt;/p&gt;

&lt;p&gt;In short, value type is an implementation detail in C#/.NET while value object is a design pattern. Keep that in mind and consult the &lt;a href=&quot;https://docs.microsoft.com/EN-US/dotnet/standard/design-guidelines/choosing-between-class-and-struct&quot;&gt;Microsoft design guidelines&lt;/a&gt; and you should be fine.&lt;/p&gt;

&lt;h2 id=&quot;value-objects-are-worth-it&quot;&gt;Value Objects Are Worth It!&lt;/h2&gt;

&lt;p&gt;Value objects are a relatively low-cost technique that can greatly enhance the manageability and clarity of your code. By employing value objects, you can make your code easier to reason about, crafting APIs that are self-documenting, easy to understand, hard to use incorrectly, and inherently type-safe.&lt;/p&gt;
</description>
        <pubDate>Wed, 24 Oct 2018 00:00:00 +0000</pubDate>
        <link>https://carlosschults.net/en/value-objects-tool/</link>
        <guid isPermaLink="true">https://carlosschults.net/en/value-objects-tool/</guid>
        
        <category>csharp</category>
        
        <category>best-practices</category>
        
        <category>ddd</category>
        
        <category>oop</category>
        
        <category>software-design</category>
        
        
      </item>
    
      <item>
        <title>Coding Best Practices When You’re Short On Time</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1539703469/coding-best-practices-1038x437_ugnhab.jpg&quot; alt=&quot;&quot; /&gt;
Photo by Ales Nesetril on Unsplash&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Editorial note: I originally wrote this post for the SubMain blog.  You can &lt;a href=&quot;https://blog.submain.com/coding-best-practices-short-time/&quot;&gt;check out the original here, at their site&lt;/a&gt;. While you’re there, download and try their CodeIt.Right product.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;One topic in software development that really fascinates me is coding best practices. I’m always searching for ways to improve my work and deliver value in a fast and consistent manner.&lt;/p&gt;

&lt;p&gt;It can be tricky to define what a “&lt;a href=&quot;https://www.daedtech.com/what-is-a-best-practice-in-software-development/&quot;&gt;coding best practice” is&lt;/a&gt;. Some people are even in favor of &lt;a href=&quot;https://dzone.com/articles/death-best-practices&quot;&gt;downright retiring the term!&lt;/a&gt; But one thing pretty much everyone agrees upon is this: coming up with and implementing strategies—by whatever name you call them—to improve the output of one’s work is something that any developer worth his or her salt should be continuously doing.&lt;/p&gt;

&lt;p&gt;Of course, there’s no free lunch. The adoption of a best practice takes time…and sometimes you just don’t have much of that to begin with. And then there’s management, whose buy-in is not always guaranteed.&lt;/p&gt;

&lt;p&gt;So, what to do if your development team is struggling with the poor quality of a codebase while lacking time to implement best practices that would help?&lt;/p&gt;

&lt;p&gt;The answer I offer you today is what I’ll call the “coding best practices emergency pack”: &lt;em&gt;a small list of coding best practices that you can adopt on relatively short notice to get your team and your codebase from utter chaos to a more manageable state&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Because there’s lots of advice on coding best practices out there, to the point where it’s hard not to feel overwhelmed, I narrowed down my list of emergency-pack best practices by requiring they meet three criteria:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;They must be fundamental, in the sense that they’re the building blocks with which you can implement more sophisticated practices later.&lt;/li&gt;
  &lt;li&gt;You can adopt them in relatively short notice. (I’d say a week is feasible.)&lt;/li&gt;
  &lt;li&gt;Their cost is free or very low.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The practices that follow all fit these parameters. And without further ado, here it is: my coding best practices emergency pack, with items listed in the order they should be implemented and starting with the most critical one.&lt;/p&gt;

&lt;h2 id=&quot;version-control-system&quot;&gt;Version Control System&lt;/h2&gt;

&lt;p&gt;I once worked for a software development shop where no version control system was used. The source files were placed in a shared folder that every developer could access. What was the process we used when editing a file? Yeah, you guessed it:  we’d simply create a copy of the file and rename it to “filename_old.ext” or something like that.&lt;/p&gt;

&lt;p&gt;This was about eight or nine years ago. So maybe things have improved, right? Well, they certainly have, to some extent, but not completely. There are still &lt;a href=&quot;https://twitter.com/_m_b_j_/status/938785388268806146&quot;&gt;companies out there that don’t use a VCS&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;how-to-proceed&quot;&gt;How to Proceed?&lt;/h3&gt;

&lt;p&gt;From now on, I’ll just assume you agree that a VCS is a fundamental coding best practice. If that’s not the case, there’s plenty of resources out there explaining &lt;a href=&quot;https://www.git-tower.com/learn/git/ebook/en/desktop-gui/basics/what-is-version-control#start&quot;&gt;what a VCS is&lt;/a&gt; and &lt;a href=&quot;https://www.atlassian.com/git/tutorials/what-is-version-control#benefits-of-version-control&quot;&gt;why should you use one.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With that out of the way, it’s time to get to specifics. Which tool should you use? How to go about its adoption?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt; is a solid choice. And despite having a steeper learning curve for &lt;a href=&quot;https://carlosschults.net/en/git-basics-for-tfs-users&quot;&gt;those more used to centralized version control systems, such as Subversion or TFVC&lt;/a&gt;, it’s &lt;em&gt;de facto&lt;/em&gt; standard in our industry. So by all means, learn it, since not doing so can harm your career in the future.&lt;/p&gt;

&lt;p&gt;But it’s possible that Git is not the best choice for your team &lt;strong&gt;right now&lt;/strong&gt;. Remember, you’re short on time. So we need to get your team to adopt these coding best practices ASAP.&lt;/p&gt;

&lt;p&gt;How do we do this? So, let’s say you have experience with &lt;a href=&quot;https://subversion.apache.org/&quot;&gt;Subversion&lt;/a&gt;, having used it at your previous company, but you have no experience with Git at all. If that’s the case, I’d say Subversion is the best choice for you. The overhead of learning a new system and teaching it to your co-workers while putting it into production would be too great.&lt;/p&gt;

&lt;h2 id=&quot;code-review&quot;&gt;Code Review&lt;/h2&gt;

&lt;p&gt;I’m not going to lie: I &lt;em&gt;love &lt;/em&gt;code reviews—and &lt;a href=&quot;https://www.codinghorror.com/blog/archives/000495.html&quot;&gt;I’m not alone in that&lt;/a&gt;. I’ve witnessed firsthand how a good code review can reduce the number of bugs in a codebase, make the code look and feel more consistent, and perhaps best of all, spread knowledge throughout a development team.&lt;/p&gt;

&lt;p&gt;And here’s a major selling point: a code review practice is relatively easy to implement. Start as simple as you can, and then tweak and experiment with your approach as the need arises.&lt;/p&gt;

&lt;h3 id=&quot;what-do-i-mean-by-code-review&quot;&gt;What Do I Mean by Code Review?&lt;/h3&gt;

&lt;p&gt;Talking about “code review” can be tricky. People sometimes mean widely different things when they use the term, so I think it warrants further clarification.&lt;/p&gt;

&lt;p&gt;I’m not in favor of a highly stressful and bureaucratic code review process, where your code is scrutinized and criticized in public for hours. I don’t believe in public shaming as a tool for achieving quality. On the contrary, &lt;a href=&quot;https://blog.submain.com/code-review-vs-pair-programming-2/&quot;&gt;the type of code review I advocate for&lt;/a&gt; is a lightweight and low-stress process, usually initiated by submitting a pull request or using your favorite IDE.&lt;/p&gt;

&lt;h3 id=&quot;how-to-proceed-1&quot;&gt;How to Proceed &lt;/h3&gt;

&lt;p&gt;Since we’re now on the same page about what a code review should look like, how would one go about implementing the practice? My answer is, not surprisingly, “the simplest way that could possibly work.” &lt;/p&gt;

&lt;p&gt;For instance, if yours is a .NET shop using TFS/TFVC, you can start by &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ColinD.ColinsALMCheckinPoliciesVS2017&quot;&gt;installing a check-in policy&lt;/a&gt; that requires a code review for each check-in. If your team uses GitHub, you can use &lt;a href=&quot;https://help.github.com/articles/about-pull-requests/&quot;&gt;pull requests&lt;/a&gt;. Just start performing reviews so you and your team can get used to it. Then, with time, start tuning and perfecting your approach.&lt;/p&gt;

&lt;p&gt;Here are some of the questions that can appear as you refine your process for this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;What’s the goal of a code review?&lt;/strong&gt; Are we looking for bugs? Trying to improve readability? Checking adherence to the company’s coding standard?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Where do we draw the line between “suggestions” and “impediments”?&lt;/strong&gt; Is it OK to give a thumbs-down to someone’s code for bad indentation or a slightly off variable name?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;What do when reviewer and reviewee can’t come to a consensus?&lt;/strong&gt; Bring in a mediator to give the final word? And who should be this mediator? The lead developer?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The answer to all of these questions can be found in &lt;strong&gt;automation&lt;/strong&gt;. Much of the awkwardness of a code review can be removed when you employ a &lt;a href=&quot;https://blog.submain.com/different-styles-code-analyzer/&quot;&gt;code analyzer&lt;/a&gt; to handle the automatable portions of the process.&lt;/p&gt;

&lt;p&gt;For instance, &lt;a href=&quot;https://submain.com/codeit.right/features&quot;&gt;SubMain’s CodeIt.Right&lt;/a&gt; will give you real-time feedback from inside Visual Studio, alerting you of possible coding issues and even automatically fix code smells and violations for you.&lt;/p&gt;

&lt;p&gt;By employing automation, you set your developers free to worry about higher level concerns when performing reviews, such as code clarity or architectural decisions.&lt;/p&gt;

&lt;h2 id=&quot;automated-builds&quot;&gt;Automated Builds&lt;/h2&gt;

&lt;p&gt;You may be thinking that I’ve got it wrong. After all, does it even make sense to talk about automated builds without mentioning automated tests?&lt;/p&gt;

&lt;p&gt;Well, I’m going argue that yes, it does make sense, and for one very simple reason: it eliminates “&lt;a href=&quot;https://blog.codinghorror.com/the-works-on-my-machine-certification-program/&quot;&gt;it works on my machine&lt;/a&gt;” syndrome. &lt;/p&gt;

&lt;p&gt;By having a central place where builds are performed, you shed light on all kinds of problems, from poor management of dependencies to bad test discipline.&lt;/p&gt;

&lt;h3 id=&quot;how-to-proceed-2&quot;&gt;How to Proceed&lt;/h3&gt;

&lt;p&gt;My advice here is the same as before: do the simplest thing that could work.&lt;/p&gt;

&lt;p&gt;If your team already uses TFS, then learn how to create a &lt;a href=&quot;https://docs.microsoft.com/en-us/vsts/build-release/actions/ci-cd-part-1&quot;&gt;build definition and you’re good to go&lt;/a&gt;. On the other hand, if you host your projects on GitHub, you might be interested in taking a look at &lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis CI.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With time, you should improve your strategy. Remember the static code analyzers I mentioned earlier? You can integrate them into your build process. Unit testing and other kinds of automated tests are a very important addition as well.&lt;/p&gt;

&lt;p&gt;Speaking of which…&lt;/p&gt;

&lt;h2 id=&quot;notable-absences&quot;&gt;Notable Absences&lt;/h2&gt;

&lt;p&gt;You might be surprised to see that I haven’t included unit testing in the list of coding best practices, &lt;a href=&quot;https://carlosschults.net/en/unit-testing-for-beginners-part1/&quot;&gt;despite being myself a firm believer in the importance of automated testing&lt;/a&gt; to the overall quality of a codebase. And why is that?&lt;/p&gt;

&lt;p&gt;Adding unit tests to a legacy application, unfortunately, is &lt;em&gt;hard&lt;/em&gt;, to the point that there’s even &lt;a href=&quot;https://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052/ref=sr_1_1?ie=UTF8&amp;amp;qid=1515443597&amp;amp;sr=8-1&amp;amp;keywords=working+effectively+with+legacy+code&quot;&gt;a famous book&lt;/a&gt;that focuses solely on this. It’s just not a feasible task for you to tackle quickly.&lt;/p&gt;

&lt;p&gt;In a similar fashion, it’s possible that a portion of readers expected me to talk about clean code or the &lt;a href=&quot;https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)&quot;&gt;SOLID&lt;/a&gt;principles. I do encourage you to research and learn about these topics,  but I don’t think they’re a good fit for the purpose of this post. They are, as the name already points out, principles. Think of them as philosophical guidelines—useful, but not as easy to break down into simple, actionable advice.&lt;/p&gt;

&lt;h2 id=&quot;deploy-your-package-asap&quot;&gt;Deploy Your Package ASAP!&lt;/h2&gt;

&lt;p&gt;It’s possible that some of you found these practices to be extremely basic and not post-worthy. “Who doesn’t use version control in twenty-freaking-eighteen???” I hear you saying.&lt;/p&gt;

&lt;p&gt;Well, it really doesn’t take long to find evidence (anecdotal, but still) that &lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/65931/are-there-serious-companies-that-dont-use-version-control-and-continuous-integr&quot;&gt;things are not all sunshine and rainbows&lt;/a&gt;. To believe that even basic coding best practices, such as using version control or automated testing, are universally applied is probably more wishful thinking than what we’d like to believe.&lt;/p&gt;

&lt;p&gt;For the rest of you, I hope this list proves useful.&lt;/p&gt;

&lt;p&gt;You know what they say. “When in a hole, stop digging.” And that’s exactly the type of help I wanted to offer with this post: a quick and easy fix, meant to give you and your teammates just enough sanity that you can focus and regain control of your application, ensuring its long-term health.&lt;/p&gt;
</description>
        <pubDate>Tue, 16 Oct 2018 00:00:00 +0000</pubDate>
        <link>https://carlosschults.net/en/coding-best-practices-short-time/</link>
        <guid isPermaLink="true">https://carlosschults.net/en/coding-best-practices-short-time/</guid>
        
        <category>csharp</category>
        
        <category>best practices</category>
        
        
      </item>
    
      <item>
        <title>4 Common Datetime Mistakes in C# — And How to Avoid Them</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1531165684/4-datetime-mistakes-1038x437_nm6csc.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Editorial note: I originally wrote this post for the SubMain blog.  You can &lt;a href=&quot;https://blog.submain.com/4-common-datetime-mistakes-c-avoid/&quot;&gt;check out the original here, at their site&lt;/a&gt;. While you’re there, have a look at CodeIt.Right, which can help you with time-related issues and much more.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Do you remember the “falsehoods programmers believe about &lt;em&gt;X&lt;/em&gt;”  meme that became popular among software blogs a few years ago? The first one was about &lt;a href=&quot;https://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/&quot;&gt;names&lt;/a&gt;, but several others soon followed, covering topics such as &lt;a href=&quot;https://www.mjt.me.uk/posts/falsehoods-programmers-believe-about-addresses/&quot;&gt;addresses&lt;/a&gt;, &lt;a href=&quot;https://wiesmann.codiferes.net/wordpress/?p=15187&amp;amp;lang=en&quot;&gt;geography,&lt;/a&gt; and &lt;a href=&quot;https://wiesmann.codiferes.net/wordpress/?p=22201&quot;&gt;online shopping&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My favorite was &lt;a href=&quot;https://infiniteundo.com/post/25326999628/falsehoods-programmers-believe-about-time&quot;&gt;the one about time&lt;/a&gt;. I hadn’t thought deeply about time and its intricacies up until that point, and I was intrigued by how a fundamental domain could be such a fertile ground for misunderstandings.&lt;/p&gt;

&lt;p&gt;Now even though I like the post, I have a problem with it: it lists wrong assumptions, and then it basically stops there. The reader is likely to leave the article wondering:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Why are these assumptions falsehoods?&lt;/li&gt;
  &lt;li&gt;How likely is it that I’ll get in trouble due to one of these assumptions?&lt;/li&gt;
  &lt;li&gt;What’s the proper way of dealing with these issues?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The article is interesting food for thought, but I think it’d make sense to provide more actionable information.&lt;/p&gt;

&lt;p&gt;That’s what today’s post is about. I’m going to show you four common mistakes C#/.NET developers make when dealing with time. And that’s not all. I’ll also show what you should do to avoid them and make your code safer and easier to reason about.&lt;/p&gt;

&lt;h2 id=&quot;1-naively-calculating-durations&quot;&gt;1. Naively Calculating Durations&lt;/h2&gt;

&lt;p&gt;Consider the code below:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/3e18612b9a9238382b6d4fa3c574a231.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Will this code work? It depends on where and when it’s going to run.&lt;/p&gt;

&lt;p&gt;When you use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DateTime.Now&lt;/code&gt;, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DateTime&lt;/code&gt; you get represents the current date and time local to your machine (i.e., it has the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kind&lt;/code&gt; property set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Local&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;If you live in an area that observes DST (Daylight Saving Time), you know there’s one day in the year when all clocks must be moved forward a certain amount of time (generally one hour, but there are places that adjust by other offsets). Of course, there’s also the day when the opposite happens.&lt;/p&gt;

&lt;p&gt;Now picture this: today is March 12th, 2017, and you live in New York City. You start using the program above. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StartMatch()&lt;/code&gt; method runs at exactly 01:00 AM.  One hour and 15 minutes later, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EndMatch()&lt;/code&gt; method runs. The calculation is performed, and the following text is shown:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Duration of the match: 00:02:15&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I bet you’ve correctly guessed what just happened here: when clocks were about to hit 2 AM, DST just kicked in and moved them straight to 3 AM. Then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EndMatch&lt;/code&gt; got back the current time, effectively adding a whole hour to the calculation. If the same had happened at the end of DST, the result would’ve been just 15 minutes!&lt;/p&gt;

&lt;p&gt;Sure, the code above is just a toy example, but what if it were a payroll application? Would you like to pay an employee the wrong amount?&lt;/p&gt;

&lt;h3 id=&quot;what-to-do&quot;&gt;What to Do?&lt;/h3&gt;

&lt;p&gt;When calculating the duration of human activities, use UTC for the start and end dates. That way, you’ll be able to** unambiguously point to an instant in time**. Instead of using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Now&lt;/code&gt; property on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DateTime&lt;/code&gt;, use `UtcNow to retrieve the date time already in UTC to perform the calculations:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/82492845edaa8f8fc16c646ed2bbcf2a.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;What if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DateTime&lt;/code&gt; objects you already have are set to Local? In that case, you should use the ToUniversalTime() method to convert them to UTC:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/58837695af07386836753ef6541233aa.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;a-little-warning-about-touniversaltime&quot;&gt;A Little Warning About ToUniversalTime()&lt;/h3&gt;

&lt;p&gt;The usage of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ToUniversalTime()&lt;/code&gt; — and its sibling, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ToLocalTime()&lt;/code&gt;— can be a little tricky. The problem is that these methods make assumptions about what you want based on the value of the Kind property of your date, and that can cause unexpected results.&lt;/p&gt;

&lt;p&gt;When calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ToUniversalTime()&lt;/code&gt;, one of the following things will happen:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kind&lt;/code&gt; is set to UTC, then the same value is returned.&lt;/li&gt;
  &lt;li&gt;On the other hand, if it’s set to Local, the corresponding value in UTC is returned.&lt;/li&gt;
  &lt;li&gt;Finally, if Kind is set to Unspecified,** then it’s assumed the datetime is meant to be local, **and the corresponding UTC datetime is returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The problem we have here is &lt;a href=&quot;https://codeofmatt.com/2013/04/25/the-case-against-datetime-now/#localkindsdontroundtrip&quot;&gt;that local times don’t roundtrip&lt;/a&gt;. They’re local as long as they don’t leave the context of your machine. If you save a local datetime to a database and then retrieve it back, the information that’s supposed to be local is lost: now it’s unspecified.&lt;/p&gt;

&lt;p&gt;So, the following scenario can happen:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You retrieve the current date and time using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DateTime.UtcNow&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;You save it to the database.&lt;/li&gt;
  &lt;li&gt;Another part of the code retrieves this value and, unaware that it’s supposed to already be in UTC, calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ToUniversalTime()&lt;/code&gt; on it.&lt;/li&gt;
  &lt;li&gt;Since the datetime is unspecified, the method will treat it as Local and perform an unnecessary conversion, generating a wrong value.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How do you prevent this? It’s a recommended practice to use UTC to record the time when an event happened. My suggestion here is to follow this advice and also to make it explicit that you’re doing so. Append the “UTC” suffix to every database column and class property that holds a UTC datetime. Instead of Created, change it to CreatedUTC and so on. It’s not as pretty, but it’s definitely more clear.&lt;/p&gt;

&lt;h2 id=&quot;2-not-using-utc-when-it-should-be-used-and-vice-versa&quot;&gt;2. Not Using UTC When It Should Be Used (and Vice Versa)&lt;/h2&gt;

&lt;p&gt;We could define this as a universal rule: use UTC to record the time when events &lt;em&gt;happened&lt;/em&gt;. When logging, auditing, and recording all types of timestamps in your application, UTC is the way to go.&lt;/p&gt;

&lt;p&gt;So, use UTC everywhere! …Right? Nope, not so fast.&lt;/p&gt;

&lt;p&gt;Let’s say you need to be able to reconstruct the local datetime — to the user’s perspective — of when something happened, and the only information you have is a timestamp in UTC. That’s a piece of bad luck.&lt;/p&gt;

&lt;p&gt;In cases like this, it’d make more sense to either (a) store the datetime in UTC along with the user’s time zone or (b) use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DateTimeOffset&lt;/code&gt; type, which will record the local date along with the UTC offset, enabling you to reconstruct the UTC date from it when you need it.&lt;/p&gt;

&lt;p&gt;Another common use case where UTC is not the right solution is &lt;a href=&quot;https://stackoverflow.com/questions/19626177/how-to-store-repeating-dates-keeping-in-mind-daylight-savings-time?noredirect=1&amp;amp;lq=1&quot;&gt;scheduling future local events&lt;/a&gt;. You wouldn’t want to wake up one hour later or earlier in the days of DST transitions, right? That’s exactly what would happen if you’d set your alarm clock by UTC.&lt;/p&gt;

&lt;h2 id=&quot;3-not-validating-user-input&quot;&gt;3. Not Validating User Input&lt;/h2&gt;

&lt;p&gt;Let’s say you’ve created a simple Windows desktop app that lets users set reminders for themselves. The user enters the date and time at which they want to receive the reminder, clicks a button, and that’s it.&lt;/p&gt;

&lt;p&gt;Everything seems to be working fine until a user from Brazil emails you, complaining the reminder she set for October 15th at 12:15 AM didn’t work. What happened?&lt;/p&gt;

&lt;h3 id=&quot;dst-strikes-back&quot;&gt;DST Strikes Back&lt;/h3&gt;

&lt;p&gt;The villain here is good old Daylight Saving Time again. In 2017, DST in Brazil started at midnight on October 15th. (Remember that Brazil is in the southern hemisphere.) So, the date-time combination the user supplied &lt;strong&gt;simply didn’t exist in her time zone!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Of course, the opposite problem is also possible. When DST ends and clocks turn backward by one hour, this &lt;strong&gt;generates ambiguous times.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;what-is-the-remedy&quot;&gt;What Is the Remedy?&lt;/h3&gt;

&lt;p&gt;How do you deal with those issues as a C# developer? The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TimeZoneInfo&lt;/code&gt; class has got you covered. It not only represents a time zone but it also provides methods to check for a datetime validity:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/2b94d57390b3518294730c01003f159c.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;What should you do then? What should replace the “do something” comments in the snippets above?&lt;/p&gt;

&lt;p&gt;You could show the user a message saying the input date is invalid. Or you could preemptively choose another date for the user.&lt;/p&gt;

&lt;p&gt;Let’s talk about invalid times first. Your options: move forward or backward. It’s somewhat of an arbitrary decision, so which one should you pick? For instance, the Google Calendar app on Android chooses the former. And it makes sense when you think about it. That’s exactly what your clocks already did due to DST. Why shouldn’t you do the same?&lt;/p&gt;

&lt;p&gt;And what about ambiguous times? You also have two options: choose between the first and second occurrences. Then again, it’s somewhat arbitrary, but my advice is to pick the first one. Since you have to choose one, why not make things simpler?&lt;/p&gt;

&lt;h2 id=&quot;4-mistaking-an-offset-for-a-time-zone&quot;&gt;4. Mistaking an Offset for a Time Zone&lt;/h2&gt;

&lt;p&gt;Consider the following timestamp: 1995-07-14T13:05:00.0000000-03:00. When asked what the -03:00 at the end is called, many developers answer, “a time zone.”&lt;/p&gt;

&lt;p&gt;Here’s the thing. They probably correctly assume that the number represents the offset from UTC. Also, they’d probably see that you can get the corresponding time in UTC from the offset. (Many developers fail to understand that in a string like this, the offset is already applied: to get the UTC time, you should invert the offset sign. Only then should you add it to the time.)&lt;/p&gt;

&lt;p&gt;The mistake is in thinking that the offset is all there is to a time zone. It’s not.  A time zone is a geographical area, and it consists of many pieces of information, such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;One or more offsets. (DST is a thing, after all.)&lt;/li&gt;
  &lt;li&gt;The dates when DST transitions happen. (These can and do change whenever governments feel like it.)&lt;/li&gt;
  &lt;li&gt;The amount of time applied when transitions happened. (It’s not one hour everywhere.)&lt;/li&gt;
  &lt;li&gt;The historical records of changes to the above rules.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In short: don’t try to guess a time zone by the offset. You’ll be wrong most of the time.&lt;/p&gt;

&lt;h2 id=&quot;its-about-timeyou-learn-about-time&quot;&gt;It’s About Time…You Learn About Time!&lt;/h2&gt;

&lt;p&gt;This list is by no means exhaustive. I only wanted to give you a quick start in the fascinating and somewhat bizarre world of datetime issues. There are plenty of valuable resources out there for you to learn from, such as the &lt;a href=&quot;https://stackoverflow.com/tags/timezone/info&quot;&gt;time zone tag on Stack Overflow&lt;/a&gt; or blogs such as &lt;a href=&quot;https://codeblog.jonskeet.uk/&quot;&gt;Jon Skeet’s&lt;/a&gt; and &lt;a href=&quot;https://codeofmatt.com/&quot;&gt;Matt Johnson’s,&lt;/a&gt; who are authors of the popular NodaTime library.&lt;/p&gt;

&lt;p&gt;And of course, always use the tools at your disposal. For instance, &lt;a href=&quot;https://blog.submain.com/codeit-right-rules-explained-part-2/&quot;&gt;SubMain’s CodeIt.Right&lt;/a&gt; has a rule to force you to specify a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IFormatProvider&lt;/code&gt; in situations where it’s optional, which can save you from nasty bugs when parsing dates.&lt;/p&gt;
</description>
        <pubDate>Wed, 11 Jul 2018 00:00:00 +0000</pubDate>
        <link>https://carlosschults.net/en/4-common-datetime-mistakes-csharp/</link>
        <guid isPermaLink="true">https://carlosschults.net/en/4-common-datetime-mistakes-csharp/</guid>
        
        <category>csharp</category>
        
        <category>best practices</category>
        
        <category>time</category>
        
        
      </item>
    
      <item>
        <title>Code Review vs Pair-Programming: Which One Should Your Team Pick?</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1516470435/code-review-vs-pair-programming1038x437_w99q2t.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Editorial note: I originally wrote this post for the SubMain blog.  You can &lt;a href=&quot;https://blog.submain.com/code-review-vs-pair-programming-2/&quot;&gt;check out the original here, at their site&lt;/a&gt;. While you’re there, have a look at CodeIt.Right, which can help you with automated code reviews.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Some weeks ago, I was browsing Twitter when I saw this:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Pair Programming &amp;gt; Code Review&lt;/p&gt;&amp;mdash; Rafael Ponte (@rponte) &lt;a href=&quot;https://twitter.com/rponte/status/932390250848178176?ref_src=twsrc%5Etfw&quot;&gt;November 19, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;This prompted a brief discussion between the author and me. He made good arguments, but I left unconvinced that pair programming was the obvious winner.&lt;/p&gt;

&lt;p&gt;As someone who’s implemented code review with success and also paired to some extent, I could see how both practices can be valuable. But is one of them clearly &lt;em&gt;better&lt;/em&gt; than the other? Are code review and pair programming interchangeable, or are there scenarios in which one clearly shines?&lt;/p&gt;

&lt;p&gt;That’s what I’m going to answer today. Let’s dive in.&lt;/p&gt;

&lt;h2 id=&quot;what-i-mean-by-code-review&quot;&gt;What I Mean By Code Review&lt;/h2&gt;

&lt;p&gt;Picture this: you’re a young programmer on your first development job. After you finish your first assignment, they call you to a meeting room; there you find your tech lead and three senior developers. There’s also a large monitor displaying your code. Time for review!&lt;/p&gt;

&lt;p&gt;For two-and-a-half excruciating hours, they scrutinize your work while you sweat profusely. From criticizing your high-level design decisions to nitpicking over the most trivial stylistic preferences, nothing gets a free pass.&lt;/p&gt;

&lt;p&gt;Is this the scene your mind conjures when you see the words “code review”?&lt;/p&gt;

&lt;p&gt;Good news, then. That’s &lt;em&gt;not&lt;/em&gt; the kind of review I’m talking about. Instead, think of a very informal and lightweight process. You submit your code for review by creating a pull request or maybe using some embedded functionality on your IDE.&lt;/p&gt;

&lt;h3 id=&quot;the-good&quot;&gt;The Good&lt;/h3&gt;

&lt;p&gt;After touching briefly on the &lt;em&gt;what&lt;/em&gt; and &lt;em&gt;how&lt;/em&gt; of a code review, let’s get to the &lt;em&gt;why&lt;/em&gt;. Why should your team adopt this practice? What are the benefits?&lt;/p&gt;

&lt;p&gt;The first reason is, not surprisingly, &lt;strong&gt;to catch bugs&lt;/strong&gt;. I’d bet you’re familiar with that old piece of software wisdom that says &lt;a href=&quot;https://www.cs.umd.edu/projects/SoftEng/ESEG/papers/82.78.pdf&quot;&gt;that the later a defect is found, the higher the cost of fixing it&lt;/a&gt;. Then why not use a relatively cheap process &lt;a href=&quot;https://www.cs.umd.edu/projects/SoftEng/ESEG/papers/82.78.pdf&quot;&gt;that can catch up to 60% of defects&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Here’s another reason your company should perform code reviews: to &lt;strong&gt;improve the readability of the code&lt;/strong&gt;. Trying to read and understand some new piece of code frequently leads to the discovery of issues such as&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Poor naming.&lt;/li&gt;
  &lt;li&gt;Bad indentation.&lt;/li&gt;
  &lt;li&gt;Instances of &lt;a href=&quot;https://en.wikipedia.org/wiki/Cargo_cult_programming&quot;&gt;cargo cult programming&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Non-idiomatic code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The reviewer could also spot overlooked corner cases or help the author assess how performative their code is.&lt;/p&gt;

&lt;p&gt;And here’s one last reason. A well-done code review can &lt;strong&gt;spread knowledge throughout the team.&lt;/strong&gt; This improves the product’s quality by destroying knowledge silos.&lt;/p&gt;

&lt;h3 id=&quot;the-bad&quot;&gt;The Bad&lt;/h3&gt;

&lt;p&gt;While some say code reviews are &lt;a href=&quot;https://blog.codinghorror.com/code-reviews-just-do-it/&quot;&gt;the number one practice you should adopt&lt;/a&gt; to improve your code, &lt;a href=&quot;https://blog.nelhage.com/2010/06/i-hate-code-review/&quot;&gt;this kind of enthusiasm is not universal&lt;/a&gt;. So, what are the potential drawbacks?&lt;/p&gt;

&lt;p&gt;For the most part, their complaint is &lt;strong&gt;time&lt;/strong&gt;. When you submit some code for review, you’ll have to wait until the reviewer is done.&lt;/p&gt;

&lt;p&gt;What should you do while waiting? Ideally, your team should break up the available work in small, discrete units so it can work on these pieces somewhat independently. That’s not always feasible, though. And by the way, the &lt;strong&gt;constant switching of tasks might be detrimental to the developer’s focus and productivity&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let’s say Bob spends &lt;em&gt;x&lt;/em&gt; hours implementing a feature. Then Alice reviews his work and says his implementation is completely wrong, and he needs to start from scratch. &lt;strong&gt;Those &lt;em&gt;x&lt;/em&gt; development hours were just thrown away&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Finally, people sometimes will waste ridiculous amounts of time &lt;strong&gt;arguing on pointless stylistic details&lt;/strong&gt;, such as the position of braces or whether or not to include an underscore before a private field’s name. These debates can unfortunately escalate to levels that turn the workplace toxic.&lt;/p&gt;

&lt;h2 id=&quot;pair-programming-not-just-a-super-code-review&quot;&gt;Pair Programming: Not Just a Super Code Review&lt;/h2&gt;

&lt;p&gt;Pair programming is a technique in which two developers collaborate on the code together, sitting at one workstation.&lt;/p&gt;

&lt;p&gt;They periodically take turns in two roles. The &lt;em&gt;driver&lt;/em&gt; writes the code, thinking out loud in order to explain their design decisions and thought process. The &lt;em&gt;navigator&lt;/em&gt; observes the driver’s work, giving real-time feedback and advice.&lt;/p&gt;

&lt;p&gt;So, is it just “code review on steroids”, &lt;a href=&quot;https://blog.codinghorror.com/pair-programming-vs-code-reviews/&quot;&gt;as put by Jeff Atwood&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Maybe not. One of the basic principles of agile methodologies is the shorter your feedback loop, the better you are. You can see how getting someone to review your code sooner rather than later works in harmony with the principles that make agile so successful.&lt;/p&gt;

&lt;h3 id=&quot;the-good-1&quot;&gt;The Good&lt;/h3&gt;

&lt;p&gt;Well, it should be no surprise that many benefits of pair programming are also benefits of code reviews, such as fewer bugs, improvement in code readability, and knowledge dispersion throughout the team.&lt;/p&gt;

&lt;p&gt;Pair programming may provide exclusive benefits as well, such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Higher focus&lt;/strong&gt;. The presence of a peer may exert some pressure to stay motivated to solve the task at hand.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Shorter feedback cycle&lt;/strong&gt;. Since your pair is reviewing your code in real time, there’s a lot less risk of wasting time due to delayed feedback.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Increase in usage of other good engineering practices&lt;/strong&gt;. As suggested in a study done at North Carolina State University, &lt;a href=&quot;https://collaboration.csc.ncsu.edu/laurie/Papers/ESE%20WilliamsPairProgramming_V2.pdf&quot;&gt;teams using pair programming tend to increasingly use development practices such as unit testing, continuous integration, and establishing coding standards&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-bad-1&quot;&gt;The Bad&lt;/h3&gt;

&lt;p&gt;As in the case of the code review, pair programming is far from being a universally accepted practice. While many developers love it, &lt;a href=&quot;https://web.archive.org/web/20110101145142/https://tersesystems.com/2010/12/29/where-pair-programming-fails-for-me&quot;&gt;others don’t have such happy stories to tell&lt;/a&gt;. So, what are some of the most cited problems with pairing?&lt;/p&gt;

&lt;p&gt;Let’s start with one common complaint: pair programming &lt;strong&gt;can be exhausting&lt;/strong&gt;. In fact, many claim that &lt;a href=&quot;https://softwareengineering.stackexchange.com/a/9518&quot;&gt;pairing is more effective when used for shorter blocks of time—from one and a half to two and a half hours.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Obviously, an odd number of team members doesn’t work well for pair programming. But a shifting number of available personnel is inevitable.&lt;/p&gt;

&lt;p&gt;Next on our list of problems is the fact that paring isn’t very remote friendly. You can better imagine the issue after hearing what Daniel Kaplan, who wrote “&lt;a href=&quot;https://builttoadapt.io/what-its-like-to-pair-for-a-year-86d048494324&quot;&gt;What It’s Like to Pair for a Year&lt;/a&gt;,” had to say about pairing:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;These scheduling interruptions happen, but on a typical day we avoid them by having the pairs show up at the same time (for breakfast and standup), go to lunch at the same time, and leave at the same time. This maximizes the time the pairs are pairing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, pairing &lt;strong&gt;requires synchronicity&lt;/strong&gt;, which might make it a non-option for remote teams (or even co-located teams with flexible hours).&lt;/p&gt;

&lt;p&gt;Some people argue that pairing can &lt;strong&gt;undermine creativity and prevent experimentation.&lt;/strong&gt; While pairing, it’d be rude to waste your pair’s time trying some experimental approach that might ultimately end up not working. So, the safest possible design tends to always prevail, even if it’s not the best possible one.&lt;/p&gt;

&lt;p&gt;Finally, pairing doesn’t really provide one of the key benefits of the after-the-fact code review: a person with zero context analyzing the code. The two developers &lt;strong&gt;share a context from the beginning of the session&lt;/strong&gt;, and the effect this has cannot be underestimated. People tend to &lt;a href=&quot;https://en.wikipedia.org/wiki/IKEA_effect&quot;&gt;overvalue their contributions and get emotionally attached to what they create&lt;/a&gt;; that’s why it’s so important to get a second person that doesn’t have this attachment and is thus able to provide a clearer judgment.&lt;/p&gt;

&lt;h2 id=&quot;code-review-vs-pair-programming-the-verdict&quot;&gt;Code Review vs Pair Programming: The Verdict?&lt;/h2&gt;

&lt;p&gt;I’ve reached the conclusion that, although code review and pair programming &lt;em&gt;seem&lt;/em&gt; equivalent, they’re really not. There is some overlap, but each practice also presents some unique benefits and challenges.&lt;/p&gt;

&lt;p&gt;There’s no getting around that pair programming, despite its benefits, requires an even number of people, working at the same time. If your team consists of developers living across several time zones (or even a co-located team with extremely flexible hours), then it’s a no-brainer: code review to the rescue.&lt;/p&gt;

&lt;p&gt;If your team doesn’t fit the above description, then give pair programming a try. As long as you work hard to accommodate and have empathy for &lt;a href=&quot;https://www.amazon.com/Quiet-Power-Introverts-World-Talking/dp/0307352153/ref=asap_bc?ie=UTF8&quot;&gt;different kinds of personalities&lt;/a&gt; and don’t make it mandatory, it can be beneficial to your team.&lt;/p&gt;

&lt;p&gt;Finally, there’s nothing stopping you from using &lt;em&gt;both&lt;/em&gt;. You could adopt pair programming as the default MO and leave soloing and code review to fill in the gaps where pair programming doesn’t quite fit so well.&lt;/p&gt;

&lt;h2 id=&quot;no-matter-what-you-do-embrace-automation&quot;&gt;No Matter What You Do, Embrace Automation&lt;/h2&gt;

&lt;p&gt;Imagine you write for a publication, such as a magazine. After you have a draft, you submit it for review. Would it make sense for the editor to spend all their time looking for spelling errors? Of course not! We have automated spell-check for that, freeing the editor to look for more &lt;em&gt;high-level&lt;/em&gt; problems, such as poorly chosen words, lack of cohesion, inappropriate tone, and all those things your English teacher kept nagging you about in high school.&lt;/p&gt;

&lt;p&gt;With software, things should not be so different. By using &lt;a href=&quot;https://submain.com/products/codeit.right.aspx&quot;&gt;an automated code review tool&lt;/a&gt;, you can eliminate a lot of the bickering that often occurs in code reviews or pair programming sessions. There will be no arguing about naming and formatting conventions, the position of brackets, and others pointless trivia.&lt;/p&gt;

&lt;p&gt;You can also employ a static analysis tool to warn you about potential bugs and opportunities for refactoring. That way, the reviewer/navigator is free to focus on the high-level stuff that requires human creativity, intelligence, and empathy.&lt;/p&gt;

&lt;h2 id=&quot;trust-and-respect&quot;&gt;Trust and Respect&lt;/h2&gt;

&lt;p&gt;While researching for this post, one theme kept reappearing: that code review emerges from a lack of trust in our developers or that pair programming infantilizes them.&lt;/p&gt;

&lt;p&gt;I couldn’t disagree more.&lt;/p&gt;

&lt;p&gt;Precisely because we respect our developers—and our clients—we should employ techniques and tools at our disposal to improve the quality of our work.&lt;/p&gt;

&lt;p&gt;It’s not about lack of trust. It’s about recognizing that programming is hard and sometimes, just one brain isn’t up to the task.&lt;/p&gt;

</description>
        <pubDate>Wed, 24 Jan 2018 00:00:00 +0000</pubDate>
        <link>https://carlosschults.net/en/code-review-vs-pair-programming/</link>
        <guid isPermaLink="true">https://carlosschults.net/en/code-review-vs-pair-programming/</guid>
        
        <category>pair programming</category>
        
        <category>best practices</category>
        
        <category>code review</category>
        
        <category>agile</category>
        
        
      </item>
    
  </channel>
</rss>
