<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>carlos schults / blog</title>
    <description>Artigos sobre desenvolvimento de software e tecnologia.</description>
    <link>https://carlosschults.net/</link>
    <atom:link href="https://carlosschults.net/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 24 Jun 2021 18:43:03 +0000</pubDate>
    <lastBuildDate>Thu, 24 Jun 2021 18:43:03 +0000</lastBuildDate>
    <generator>Jekyll v4.1.1</generator>
    
    
      <item>
        <title>Como Reduzir a Complexidade Ciclomática: Um Guia Completo</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1617641333/reduce-cyclomatic-complexity/reduce-cyclomatic-complexity-1038x437.jpg&quot; alt=&quot;&quot; /&gt;
&lt;span&gt;Foto por &lt;a href=&quot;https://unsplash.com/@hishahadat?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Shahadat Rahman&lt;/a&gt; no &lt;a href=&quot;https://unsplash.com/s/photos/complexity?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Nota editorial: Escrevi originalmente este post para o blog da LinearB.  Você pode &lt;a href=&quot;https://linearb.io/blog/reduce-cyclomatic-complexity/&quot;&gt;conferir o original em inglês no site deles&lt;/a&gt;. Enquanto estiver lá, dê uma olhada no produto deles, uma solução de inteligência de software que usa Git e estatísticas de projetos para ajudar as equipes de desenvolvimento a melhorar sua produtividade.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Engenheiros(as) de software dignos do nome estão sempre em busca de maneiras de melhorar seu código. A boa notícia é que existe uma maneira confiável de avaliar a saúde de uma base de código e de um projeto, e isso é através do uso de &lt;a href=&quot;https://linearb.io/metrics-modern-dev-leaders/&quot;&gt;métricas&lt;/a&gt;. O post de hoje é sobre uma métrica específica. Você aprenderá como reduzir a complexidade ciclomática e, mais importante, por que você gostaria de fazê-lo.&lt;/p&gt;

&lt;p&gt;Vamos começar definindo a complexidade ciclomática. Depois disso, você aprenderá qual é o problema de ter um alto valor de complexidade ciclomática e por que você precisaria reduzi-la. Depois do “o quê” e do “porquê”, finalmente chegaremos ao “como”: mostraremos as táticas que você pode adotar para reduzir a complexidade ciclomática de seu código. Vamos lá.&lt;/p&gt;

&lt;h2 id=&quot;complexidade-ciclomática-uma-breve-definição&quot;&gt;Complexidade Ciclomática: Uma breve definição&lt;/h2&gt;

&lt;p&gt;A complexidade ciclomática é uma importante métrica de software. Refere-se ao número de caminhos de execução possíveis dentro de um determinado código - por exemplo, uma função. Quanto mais estruturas de decisão você usar, mais ramificações possíveis existem para seu código.&lt;/p&gt;

&lt;p&gt;A complexidade ciclomática é especialmente importante quando se trata de testes. Ao calcular a complexidade ciclomática de uma função, por exemplo, você sabe o número mínimo de casos de teste que você precisará para alcançar a &lt;a href=&quot;https://linearb.io/blog/what-is-branch-coverage/&quot;&gt;cobertura de ramificação&lt;/a&gt; completa dessa função. Portanto, podemos dizer que a complexidade ciclomática pode ser um preditor de quão difícil é testar um determinado código.&lt;/p&gt;

&lt;h2 id=&quot;um-exemplo-de-complexidade-ciclomática-super-simples&quot;&gt;Um Exemplo de Complexidade Ciclomática Super Simples&lt;/h2&gt;

&lt;p&gt;Considere a seguinte função escrita em pseudocódigo:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, ${name}!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Como tem uma única declaração, é fácil ver sua complexidade ciclomática é 1. Agora, vamos mudar um pouco as coisas:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sayGoodbye&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, ${name}!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sayGoodbye&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Goodbye, ${name}!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A segunda versão da função tem um ramo nela. O chamador da função pode passar &lt;strong&gt;true&lt;/strong&gt; como o valor do parâmetro &lt;strong&gt;sayGoodbye&lt;/strong&gt;, mesmo que o valor padrão seja &lt;strong&gt;false&lt;/strong&gt;&lt;em&gt;. Se isso acontecer, a função imprimirá uma mensagem de adeus após dizer olá. Por outro lado, se o interlocutor não fornecer um valor para o parâmetro ou escolher &lt;strong&gt;false&lt;/strong&gt;&lt;/em&gt;, a mensagem de adeus não será exibida.&lt;/p&gt;

&lt;p&gt;Portanto, a função tem dois ramos de execução possíveis, o que é o mesmo que dizer que sua complexidade ciclomática tem um valor de 2.&lt;/p&gt;

&lt;h2 id=&quot;por-que-a-complexidade-ciclomática-é-ruim&quot;&gt;Por que a Complexidade Ciclomática é Ruim?&lt;/h2&gt;

&lt;p&gt;A complexidade ciclomática não é intrinsecamente ruim. Por exemplo, você pode ter um pedaço de código com um valor complexo ciclomático um pouco alto que é super fácil de ler e entender. Entretanto, de modo geral, podemos dizer que ter uma alta complexidade ciclomática é ou um sintoma de problemas com a base de código ou uma causa potencial de problemas futuros. Vamos cobrir algumas das razões pelas quais você gostaria de reduzi-la com mais detalhes.&lt;/p&gt;

&lt;h3 id=&quot;a-complexidade-ciclomática-pode-contribuir-para-a-complexidade-cognitiva&quot;&gt;A Complexidade Ciclomática Pode Contribuir para a Complexidade Cognitiva&lt;/h3&gt;

&lt;p&gt;A complexidade cognitiva refere-se ao quanto é difícil entender um determinado código. Embora nem sempre seja esse o caso, a complexidade ciclomática pode ser um dos fatores que impulsionam a complexidade cognitiva. Quanto maior a complexidade cognitiva de um pedaço de código, mais difícil é navegar e manter.&lt;/p&gt;

&lt;h3 id=&quot;a-complexidade-ciclomática-torna-o-código-mais-difícil-de-ser-testado&quot;&gt;A Complexidade Ciclomática torna o código mais difícil de ser testado&lt;/h3&gt;

&lt;p&gt;Como já mencionamos, valores mais altos de complexidade ciclomática resultam na necessidade de um maior número de casos de teste para testar de forma abrangente um bloco de código - e.g., uma função. Portanto, se você quer facilitar sua vida ao escrever testes, provavelmente quer reduzir a complexidade ciclomática de seu código.&lt;/p&gt;

&lt;h3 id=&quot;a-complexidade-ciclomática-contribui-para-maior-risco-de-defeitos&quot;&gt;A Complexidade Ciclomática Contribui para Maior Risco de Defeitos&lt;/h3&gt;

&lt;p&gt;É mais provável que você introduza defeitos em uma área da base de código que você muda muito do que a uma que você raramente toca. Além disso, quanto mais complexo for um determinado pedaço de código, mais provável é que você o entenda mal e introduza um defeito a ele.&lt;/p&gt;

&lt;p&gt;Portanto, código complexo que sofre muito &lt;a href=&quot;https://linearb.io/blog/what-is-code-churn/&quot;&gt;churn&lt;/a&gt;- mudanças freqüentes pela equipe - representa mais risco de defeitos. Ao reduzir a complexidade ciclomática - e, idealmente, também a rotatividade do código - você estará mitigando esses riscos.&lt;/p&gt;

&lt;h2 id=&quot;como-reduzir-a-complexidade-ciclomática-6-maneiras-práticas&quot;&gt;Como Reduzir a Complexidade Ciclomática: 6 Maneiras Práticas&lt;/h2&gt;

&lt;p&gt;Agora vamos rever algumas dicas práticas que você pode usar para garantir que a complexidade ciclomática de seu código seja a mais baixa possível.&lt;/p&gt;

&lt;h3 id=&quot;1preferir-funções-menores&quot;&gt;1.Preferir funções menores&lt;/h3&gt;

&lt;h4 id=&quot;o-que-fazer&quot;&gt;O que fazer?&lt;/h4&gt;

&lt;p&gt;Sendo todas as outras iguais, funções menores são mais fáceis de ler e entender. Elas também são menos propensas a conter bugs em virtude de seu comprimento. Se você não tem muito código, você não tem muitas oportunidades para o código de bugs. O mesmo raciocínio se aplica à complexidade ciclomática: é menos provável que você tenha um código complexo se tiver menos período de código. Portanto, o conselho aqui é preferir funções menores.&lt;/p&gt;

&lt;h4 id=&quot;como-fazer-isso&quot;&gt;Como fazer isso?&lt;/h4&gt;

&lt;p&gt;Para cada função, identifique sua principal responsabilidade. Extraia o que sobra para suas próprias funções e módulos. Fazer isso também facilita a reutilização do código, o que é um ponto que revisaremos em breve.&lt;/p&gt;

&lt;h3 id=&quot;2evitar-argumentos-de-bandeira-em-funções&quot;&gt;2.Evitar Argumentos de Bandeira em Funções&lt;/h3&gt;

&lt;h4 id=&quot;o-que-fazer-1&quot;&gt;O que fazer?&lt;/h4&gt;

&lt;p&gt;Os argumentos da bandeira são parâmetros booleanos que você acrescenta a uma função. As pessoas normalmente os utilizam quando precisam mudar o funcionamento de uma função, preservando ao mesmo tempo o antigo comportamento.&lt;/p&gt;

&lt;h4 id=&quot;como-fazer&quot;&gt;Como fazer?&lt;/h4&gt;

&lt;p&gt;O que usar ao invés de parâmetros de bandeira? Em poucas palavras, você pode usar estratégias que alcançam o mesmo resultado sem incorrer em alta complexidade. Por exemplo, você poderia criar uma nova função, mantendo a antiga como está e extraindo as partes comuns em sua própria função privada.&lt;/p&gt;

&lt;p&gt;Se o parâmetro da bandeira estiver sendo usado para melhorar ou melhorar de alguma forma o comportamento da função original, você pode querer aproveitar o [padrão decorator] (https://en.wikipedia.org/wiki/Decorator_pattern) para alcançar o mesmo fim.&lt;/p&gt;

&lt;h3 id=&quot;3reduzir-o-número-de-estruturas-de-decisão&quot;&gt;3.Reduzir o número de estruturas de decisão&lt;/h3&gt;

&lt;h4 id=&quot;o-que-fazer-2&quot;&gt;O que fazer?&lt;/h4&gt;

&lt;p&gt;Você pode considerar este um “não-cérebro”. Se as estruturas de decisão - especialmente &lt;strong&gt;se-else&lt;/strong&gt; e mudar de caso são o que causa mais ramos no código, é lógico que você deve reduzi-los se quiser manter a complexidade ciclomática à distância.&lt;/p&gt;

&lt;h4 id=&quot;como-fazer-isso-1&quot;&gt;Como fazer isso?&lt;/h4&gt;

&lt;p&gt;Algumas das táticas que acabamos de ver podem contribuir para reduzir o número de &lt;strong&gt;se&lt;/strong&gt; declarações em seu código. Por exemplo, em vez de usar argumentos de bandeira e depois usar uma declaração &lt;strong&gt;if&lt;/strong&gt;* para verificar, você pode usar o padrão decorador. Em vez de usar um caso de troca para rever muitas possibilidades e decidir qual delas o código executará, você pode aproveitar o &lt;a href=&quot;https://en.wikipedia.org/wiki/Strategy_pattern&quot;&gt;design pattern strategy&lt;/a&gt;. Claro que, em algum ponto do código, você ainda precisará de um estojo de troca. Afinal de contas, &lt;em&gt;alguém&lt;/em&gt; tem que decidir qual a implementação real a ser usada. Entretanto, esse ponto se torna o único ponto no código que precisa dessa estrutura de decisão.&lt;/p&gt;

&lt;h3 id=&quot;4get-rid-of-duplicated-code-livre-se-do-código-duplicado&quot;&gt;4.Get Rid of Duplicated Code (Livre-se do código duplicado)&lt;/h3&gt;

&lt;h4 id=&quot;o-que-fazer-3&quot;&gt;O que fazer?&lt;/h4&gt;

&lt;p&gt;Às vezes, você tem funções/métodos que fazem quase a mesma coisa. Manter ambos aumentam a complexidade ciclomática total de sua classe ou módulo. Se você pode limitar suas duplicatas, você pode limitar a complexidade.&lt;/p&gt;

&lt;h4 id=&quot;como-fazer-1&quot;&gt;Como fazer?&lt;/h4&gt;

&lt;p&gt;Remova as duplicatas de código por:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;extraindo os bits de código comuns para seus próprios métodos/funções dedicados.&lt;/li&gt;
  &lt;li&gt;alavancando padrões de projeto - tais como &lt;a href=&quot;https://en.wikipedia.org/wiki/Template_method_pattern&quot;&gt;o design pattern template&lt;/a&gt;- que incentivam a reutilização do código.&lt;/li&gt;
  &lt;li&gt;extraindo funções utilitárias genéricas em pacotes-gems, módulos npm, pacotes NuGet, etc. - que podem ser reutilizados por toda a organização.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;5remover-código-obsoleto&quot;&gt;5.Remover Código Obsoleto&lt;/h3&gt;

&lt;h4 id=&quot;o-que-fazer-4&quot;&gt;O que fazer?&lt;/h4&gt;

&lt;p&gt;Há muitas razões pelas quais é uma boa idéia remover o código obsoleto, ou seja, o código morto de sua aplicação. Para nosso contexto, basta dizer que essa é uma forma “gratuita” de aumentar a cobertura de código e diminuir a complexidade ciclomática.&lt;/p&gt;

&lt;h4 id=&quot;como-fazer-isso-2&quot;&gt;Como fazer isso?&lt;/h4&gt;

&lt;p&gt;Basta usar uma ferramenta que lhe permita identificar o código morto - até mesmo sua IDE pode ser capaz de fazê-lo - e depois apagá-lo impiedosamente.&lt;/p&gt;

&lt;h3 id=&quot;6não-reinvente-a-roda&quot;&gt;6.Não Reinvente a Roda&lt;/h3&gt;

&lt;h4 id=&quot;o-que-fazer-5&quot;&gt;O que fazer?&lt;/h4&gt;

&lt;p&gt;Deixe o desenvolvedor que nunca escreveu uma função - ou mesmo alguns deles - realizar a formatação da data lançar a primeira pedra! É quase como um rito de passagem.&lt;/p&gt;

&lt;p&gt;Escrever código que simplesmente duplica a funcionalidade que a biblioteca padrão de seu idioma ou sua estrutura já oferece é uma maneira segura de aumentar desnecessariamente a complexidade. Se &lt;a href=&quot;https://wiki.c2.com/?SoftwareAsLiability&quot;&gt;código é uma responsabilidade&lt;/a&gt;, você quer escrever apenas a quantidade estritamente necessária.&lt;/p&gt;

&lt;h4 id=&quot;como-fazer-isso-3&quot;&gt;Como fazer isso?&lt;/h4&gt;

&lt;p&gt;Implemente uma sólida estratégia de revisão de código que seja capaz de identificar e se livrar de tais reinvenções de roda.&lt;/p&gt;

&lt;h2 id=&quot;reduzir-a-complexidade-ciclomática-aumentar-a-clareza-do-código&quot;&gt;Reduzir a Complexidade Ciclomática, Aumentar a Clareza do Código&lt;/h2&gt;

&lt;p&gt;A complexidade ciclomática é uma das métricas mais valiosas na engenharia de software. Ela tem implicações importantes para a qualidade do código e a capacidade de manutenção, sem mencionar os testes. A alta complexidade ciclomática pode ser tanto um sinal de problemas existentes como um preditor de problemas futuros. Portanto, manter o valor desta métrica sob controle é certamente algo que você quer fazer se quiser alcançar uma base de código saudável. Mantê-lo sob controle é exatamente o que você aprendeu com nosso posto.&lt;/p&gt;

&lt;p&gt;Antes de separar os caminhos, uma última advertência. Tenha em mente que nenhuma métrica é uma panacéia quando usada isoladamente. Muitas vezes, o que você realmente gostaria de fazer é rastrear e melhorar um &lt;a href=&quot;https://linearb.io/5-key-metrics-fix-your-software-teams-quality/&quot;&gt;grupo de métricas&lt;/a&gt; que, juntos, podem lhe dar uma visão geral da saúde de sua equipe e de seu projeto. Obrigado pela leitura.&lt;/p&gt;
</description>
        <pubDate>Mon, 05 Apr 2021 00:00:00 +0000</pubDate>
        <link>https://carlosschults.net/pt/reduzir-complexidade-ciclomatica/</link>
        <guid isPermaLink="true">https://carlosschults.net/pt/reduzir-complexidade-ciclomatica/</guid>
        
        <category>boas-praticas</category>
        
        <category>testes-automatizados</category>
        
        <category>testes-unitarios</category>
        
        <category>testes-de-software</category>
        
        <category>engenharia-de-software</category>
        
        
      </item>
    
      <item>
        <title>Testes de Mutação: O Que São e Como Tornam A Cobertura de Código Relevante</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1595528879/mutation/mutation-testing-1038x437.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Photo by &lt;a href=&quot;https://unsplash.com/@wocintechchat?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Christina @ wocintechchat.com&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/software-testing?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTA: Este post foi originalmente escrito para o blog da NCrunch. Você pode ler o &lt;a href=&quot;https://blog.ncrunch.net/post/mutation-testing-code-coverage.aspx&quot;&gt;artigo original, em inglês, no site deles&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Sou fascinado com o conceito de testes de mutação desde que os conheci. Pensei finalmente ter encontrado a resposta para tantos problemas que tive ao escrever testes. Com os testes de mutação, agora eu tinha uma maneira de realmente confiar em meus testes. Finalmente, a cobertura de código tinha significado novamente.&lt;/p&gt;

&lt;p&gt;Então, fiquei atônito ao perceber que muito poucos desenvolvedores compartilhavam meu interesse em testes de mutação. Na verdade, ouso dizer que a maioria dos desenvolvedores ainda nem sequer ouviu falar sobre isso. E isso é uma pena porque eles - e nós, como uma indústria - estamos perdendo tantos benefícios.&lt;/p&gt;

&lt;p&gt;Portanto, este posto é minha humilde tentativa de remediar a situação. Vou começar por explicar os atuais dilemas que os desenvolvedores enfrentam em relação à confiabilidade dos testes que escrevem. Em seguida, vou prosseguir para lhe mostrar como os testes de mutação são a resposta a estes dilemas. Explicarei o que é, como pode tornar seus testes mais confiáveis, e como pode transformar a cobertura de código na valiosa métrica que deve ser.&lt;/p&gt;

&lt;h2 id=&quot;o-problema-a-confiabilidade-dos-testes&quot;&gt;O problema: a confiabilidade dos testes&lt;/h2&gt;

&lt;p&gt;Ao aprender sobre &lt;a href=&quot;https://carlosschults.net/pt/testes-unitarios-iniciantes-parte1/&quot;&gt;testes unitários&lt;/a&gt; - ou testes automatizados em geral - a maioria das pessoas fará a mesma pergunta ou uma pergunta semelhante: Como sei que meus testes estão corretos? Essa é uma preocupação legítima. Se seus testes não são confiáveis, então talvez você esteja melhor sem nenhum teste.&lt;/p&gt;

&lt;p&gt;Então, qual é a resposta? Como as pessoas lidam com o problema da confiabilidade dos testes sem depender de testes de mutação?&lt;/p&gt;

&lt;h2 id=&quot;tornando-os-testes-confiáveis-sem-testes-de-mutação&quot;&gt;Tornando os testes confiáveis sem testes de mutação&lt;/h2&gt;

&lt;p&gt;Há técnicas que os desenvolvedores empregam para melhorar a confiabilidade de seus testes, e cobriremos brevemente algumas delas nesta seção. Se você tem experiência com testes unitários, provavelmente está familiarizado com essas técnicas. Vamos lá.&lt;/p&gt;

&lt;h3 id=&quot;manter-os-testes-simples&quot;&gt;Manter os testes simples&lt;/h3&gt;

&lt;p&gt;A primeira técnica que cobriremos aqui para melhorar a confiabilidade de seus testes é apenas mantê-los simples. E por “simples” quero dizer com menos complexidade ciclomática. Quanto menor a &lt;a href=&quot;https://pt.wikipedia.org/wiki/Complexidade_ciclom%C3%A1tica&quot;&gt;complexidade ciclomática&lt;/a&gt; de um determinado código, mais provável é que ele realmente faz o que você pensa que faz. O código simples é mais fácil de entender, que é uma propriedade que você definitivamente quer que seus testes unitários tenham.&lt;/p&gt;

&lt;p&gt;Mantenha o código de teste simples ao ponto de ser óbvio. Isso significa, por exemplo, evitar loops ou estruturas de decisão. Além disso, evite fazer qualquer coisa para computar o resultado esperado (mais sobre isso na próxima seção). Em vez disso, codifique-o de maneira fixa.&lt;/p&gt;

&lt;h3 id=&quot;não-duplique-o-código-de-implementação&quot;&gt;Não Duplique o Código de Implementação&lt;/h3&gt;

&lt;p&gt;Digamos que você esteja praticando o &lt;a href=&quot;https://codingdojo.org/kata/RomanNumerals/&quot;&gt;Coding Kata dos números romanos&lt;/a&gt;. Resista à tentação de gerar automaticamente os valores esperados (“I” para 1, “II” para 2, e assim por diante). Em vez disso, codifique os valores de forma fixa. Se a repetição realmente o incomoda e sua ferramenta de teste o permite, use testes parametrizados.&lt;/p&gt;

&lt;p&gt;Por que isso seria um problema? Simples: Quanto mais sofisticado for o código de teste, mais provável é que seja uma duplicação do código de produção. Se este for o caso, você pode ter o azar de se encontrar na situação em que seu código de produção está errado (não resolve o problema como deveria fazer), mas os testes passam. Esse é um dos piores cenários possíveis. É ainda pior do que não ter nenhum teste.&lt;/p&gt;

&lt;h3 id=&quot;garanta-que-você-veja-o-teste-falhar&quot;&gt;Garanta que você veja o teste falhar&lt;/h3&gt;

&lt;p&gt;Garantir que cada teste falhe pelo menos uma vez antes de ser aprovado. Se você vê o teste falhar quando acha que deveria estar falhando e vice-versa, isso é um sinal de que você está se movendo na direção certa. Não garante nada, mas diminui a probabilidade de o teste estar passando devido a uma coincidência.&lt;/p&gt;

&lt;p&gt;Como fazer isso? Assim que você chegar à fase verde, danifique o código de implementação de tal maneira que um ou mais testes devem falhar. Você poderia inverter os condicionantes, substituir strings ou literais numéricos por valores aleatórios, ou mesmo apagar um if. Se você conseguir sabotar o código de produção e se safar, isso não é um bom sinal. Seu conjunto de testes ou está errado ou incompleto. Em certo sentido, você está testando os testes.&lt;/p&gt;

&lt;p&gt;Desenvolvedores que empregam &lt;a href=&quot;https://carlosschults.net/pt/testes-unitarios-csharp-intro-tdd/&quot;&gt;TDD (desenvolvimento orientado a testes)&lt;/a&gt; já fazem isso, por definição. Uma vez que você escreve um teste falho e depois procede para que ele seja aprovado, você está vendo o teste falhar. É claro, o teste deve falhar da maneira esperada. Isso significa que se você estiver realizando uma asserção, o teste deve falhar devido a uma falha na asserção e não, digamos, porque o método sob teste lança uma exceção. Sim, isto é melhor do que nada, mas ainda assim pode não ser suficiente. Como um teste unitário representa um caso de uso único, é totalmente possível introduzir um defeito no código de produção de tal forma que este teste em particular ainda passe.&lt;/p&gt;

&lt;h2 id=&quot;temos-que-fazer-melhor-é-aí-que-entra-o-teste-de-mutação&quot;&gt;Temos que fazer melhor: É Aí Que Entra o Teste de Mutação&lt;/h2&gt;

&lt;p&gt;Então, você acabou de aplicar a técnica descrita na última seção. Ótimo! Não é perfeita, porém. Aí vem um problema. Você não pode simplesmente inserir muitos defeitos e executar os testes, pois não seria capaz de identificar qual defeito foi responsável pelo fracasso dos testes. A maneira correta de fazer isso é inserir um único defeito deliberado, executar todos os testes, verificar seu resultado e &lt;em&gt;então&lt;/em&gt; reverter a mudança. Depois disso, você pode introduzir outro erro, executar todos os testes novamente, verificar o resultado, reverter a mudança…e repetir, muitas vezes. Nem precisa dizer que tal abordagem é extremamente lenta, entediante e propensa a erros.&lt;/p&gt;

&lt;p&gt;É aí que entram os testes de mutação.&lt;/p&gt;

&lt;h3 id=&quot;o-que-é-teste-de-mutação-afinal&quot;&gt;O que é teste de mutação, afinal?&lt;/h3&gt;

&lt;p&gt;O teste de mutação é nada mais, nada menos, do que automatizar todo o processo de “sabotar o código de produção e executar testes para ver se eles falham” que você acabou de ver. Para usar o teste de mutação, você precisa de um framework, ou ferramenta, de teste de mutação. O framework irá alterar o código de produção, introduzindo defeitos que são chamados de “mutações”. Para cada mutação introduzida, o framework executará novamente o conjunto de testes unitários. Se todos os testes forem aprovados, dizemos que a mutação sobreviveu. Isso é uma coisa ruim. Significa que ou seu conjunto de testes está faltando ou os testes existentes estão errados.&lt;/p&gt;

&lt;p&gt;Se, por outro lado, um ou mais testes falharem, isso significa que a mutação foi morta, o que é uma coisa boa. A ferramenta repetirá esse processo até que se teste a parte relevante da base de código. Quando tudo estiver feito, você poderá verificar os resultados, que conterão o número de mutações introduzidas, assim como a proporção de mutantes sobreviventes vs. mutantes mortos.&lt;/p&gt;

&lt;h3 id=&quot;os-testes-de-mutação-melhoram-a-cobertura-do-código&quot;&gt;Os testes de mutação melhoram a cobertura do código&lt;/h3&gt;

&lt;p&gt;Um dos tópicos mais controversos no mundo dos testes de unidade é o argumento sobre a cobertura de código. Alguns desenvolvedores dizem que chegar à cobertura total é essencial; outros argumentarão que é uma métrica inútil. Quem está certo?&lt;/p&gt;

&lt;p&gt;Primeiro de tudo, é preciso entender que esta questão não é preto no branco. Como é o caso de praticamente tudo em software, há alguma nuance. É claro que a cobertura de código não é inútil. Saber que sua base de código tem, digamos, 10% de cobertura de teste é definitivamente um dado útil. Tal cobertura é muito baixa: ver a barra verde não lhes oferecerá nenhuma confiança. Isso não quer dizer que ter 100% de cobertura é necessariamente uma coisa boa em si mesmo. Você poderia ter testes que não têm afirmações, por exemplo. Sim, este é um exemplo elaborado, mas algo assim poderia (e às vezes acontece) acontecer.&lt;/p&gt;

&lt;p&gt;Uma ocorrência mais comum seria ter apenas testes que não exercitam suficientemente os caminhos no software. Em resumo: baixa cobertura de código é definitivamente uma coisa ruim, mas alta (ou total) cobertura de código não é &lt;em&gt;necessariamente&lt;/em&gt; uma coisa boa, uma vez que não diz nada sobre a qualidade dos testes na suíte.&lt;/p&gt;

&lt;p&gt;Como os testes de mutação verificam a qualidade da suíte de testes, é a peça que falta no quebra-cabeça. Se sua base de código tem uma alta cobertura de código e os resultados dos testes de mutação mostram que a maioria ou todas as mutações introduzidas estão sendo mortas, então sorria! Você provavelmente tem uma ótima suíte de teste no lugar!&lt;/p&gt;

&lt;h2 id=&quot;testes-de-mutação-abrace-hoje&quot;&gt;Testes de Mutação Abrace Hoje&lt;/h2&gt;

&lt;p&gt;No post de hoje, falamos sobre o problema da confiabilidade dos testes, depois procedemos a uma revisão de algumas técnicas e diretrizes que você pode usar para superar esse desafio. Finalmente, vimos como o teste de mutação é a abordagem superior para resolver esse problema.&lt;/p&gt;

&lt;p&gt;Eis o seguinte: As técnicas que abordamos são boas diretrizes a serem seguidas ao escrever testes unitários. Seus testes serão beneficiados por cumpri-los, quer você empregue ou não testes de mutação. Mas as diretrizes só podem levá-lo até agora. Elas dependem muito da força de vontade e disciplina humanas, e todos nós temos quantidades limitadas delas. A fim de levar a qualidade de seus testes ao próximo nível, você precisa adotar a automação.&lt;/p&gt;

&lt;p&gt;São necessários apenas alguns minutos de pesquisa no Google para encontrar uma ferramenta de teste de mutação para a plataforma de sua preferência. Faça isso hoje e comece a aproveitar os benefícios que os testes de mutação podem oferecer a você e à sua equipe!&lt;/p&gt;

</description>
        <pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate>
        <link>https://carlosschults.net/pt/testes-de-mutacao/</link>
        <guid isPermaLink="true">https://carlosschults.net/pt/testes-de-mutacao/</guid>
        
        <category>testes-de-software</category>
        
        <category>testes-unitarios</category>
        
        <category>testes-automatizados</category>
        
        <category>cobertura-de-codigo</category>
        
        <category>testes-de-mutacao</category>
        
        <category>tdd</category>
        
        
      </item>
    
      <item>
        <title>Testes Unitários em C#: Iniciando Com TDD</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1459979937/testes-unitarios-iniciantes-min_povcse.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Este post faz parte de uma série. &lt;a href=&quot;http://carlosschults.net/tag_ptbr/serie-testes-unitarios/&quot;&gt;Veja os outros artigos.&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hoje eu trago outro post para ajudá-los a começar com os testes da unidade C#. Já cobri o &lt;a href=&quot;https://carlosschults.net/pt/testes-unitarios-iniciantes-parte1&quot;&gt;básico de testes unitários&lt;/a&gt;, explicando o que eles são e por que são tão importantes. Depois disso, mostrei &lt;a href=&quot;https://carlosschults.net/pt/testes-unitarios-iniciantes-parte-2&quot;&gt;como começar com os testes unitários&lt;/a&gt; com um exemplo prático. Hoje, vamos um passo adiante, explorando a metodologia TDD.&lt;/p&gt;

&lt;p&gt;Você provavelmente já ouviu falar de TDD, mas pode ficar confuso quanto ao que é. A propósito, isto não é culpa sua. Há muitos equívocos em torno desta sigla. Algumas pessoas até a usam de forma intercambiável com os testes unitários. Neste post, você vai aprender por que eles estão errados, e mais.&lt;/p&gt;

&lt;p&gt;Começamos o post com uma breve definição de TDD. Você aprenderá não apenas que TDD significa Desenvolvimento Orientado por Testes, mas também que não é uma técnica de teste, apesar do nome. Depois disso, eu explico o que é TDD e quais são seus benefícios.&lt;/p&gt;

&lt;p&gt;Após o “o quê” e o “porquê” estarem ambos fora do nosso caminho, estaremos prontos para nos divertir um pouco. Vou lhes mostrar, na prática, como começar com a TDD, desenvolvendo uma solução para um famoso exercício de programação. Soa bem? Então, vamos começar.&lt;/p&gt;

&lt;h2 id=&quot;testes-unitários-em-c--tdd-começando-pelo-básico&quot;&gt;Testes Unitários em C# &amp;amp; TDD: Começando Pelo Básico&lt;/h2&gt;

&lt;p&gt;Já mencionei anteriormente que o TDD não é uma técnica de teste. Mas o que é isso? E como está relacionado ao teste de unidade C# (ou teste de unidade em geral, já agora?)&lt;/p&gt;

&lt;h3 id=&quot;definindo-tdd&quot;&gt;Definindo TDD&lt;/h3&gt;

&lt;p&gt;Como você já viu, TDD significa “Test-Driven Development”, ou “Desenvolvimento guiado por testes.” É uma técnica ou metodologia de desenvolvimento de software que utiliza testes unitários para guiar ou dirigir o desenvolvimento da aplicação.&lt;/p&gt;

&lt;p&gt;Em vez de fazer a coisa mais intuitiva, que seria escrever testes unitários após o código de produção, a metodologia TDD afirma que você deve começar escrevendo um teste unitário falho. Depois você escreve o código de produção, mas apenas o necessário para que o teste seja aprovado.&lt;/p&gt;

&lt;p&gt;Acho que agora você está se perguntando pelo menos duas coisas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Como isso funciona na prática?&lt;/li&gt;
  &lt;li&gt;Por que escrever o código de uma maneira tão estranha?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;É o que vamos ver a seguir.&lt;/p&gt;

&lt;h3 id=&quot;as-fases-do-tdd&quot;&gt;As fases do TDD&lt;/h3&gt;

&lt;p&gt;O desenvolvimento orientado por testes depende da repetição de um ciclo incrivelmente curto. Este ciclo é composto de três fases:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Primeiro, você escreve um teste que representa um requisito específico da funcionalidade que você está tentando implementar.&lt;/li&gt;
  &lt;li&gt;Em seguida, você faz o teste passar, escrevendo a quantidade mínima de código de produção com a qual você pode escapar.&lt;/li&gt;
  &lt;li&gt;Se necessário, você refatoria o código para eliminar duplicações ou outros problemas.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Como a funcionalidade ainda não existe, o teste que você escreve no passo nº 1 falhará. Ou seja, em linguagens como Python ou Ruby. No caso de linguagens estaticamente digitadas, como Java ou C#, o código nem sequer será compilado. Para nossos propósitos, a não compilação do código conta como falha no teste.&lt;/p&gt;

&lt;p&gt;No passo 2, você tem que fazer o teste passar, mas nada além disso. O que eu quero dizer é que seu objetivo aqui não é resolver o problema, pelo menos ainda não. Ao invés disso, seu único trabalho é fazer o teste passar, escrevendo a menor quantidade possível de código. Fazer batota - por exemplo, devolver um valor codificado - não só é OK, mas encorajado, como você logo verá.&lt;/p&gt;

&lt;p&gt;Finalmente, a terceira fase é a única que permite a você escrever o código de produção sem ter que criar primeiro um teste de reprovação. Mas você não pode criar novas classes ou funções; você só pode refatorar o código que você escreveu na etapa anterior, para torná-lo mais legível, para eliminar a duplicação ou para resolver outro problema. E, é claro, o teste ainda deve ser aprovado.&lt;/p&gt;

&lt;p&gt;As pessoas freqüentemente usam o TDD como “red green-refactor” porque a maioria das ferramentas de teste de unidade usa vermelho para denotar testes fracassados e verde para passar nos testes.&lt;/p&gt;

&lt;h3 id=&quot;por-que-usar-o-tdd&quot;&gt;Por que usar o TDD?&lt;/h3&gt;

&lt;p&gt;O difícil de entender quando se começa a usar o TDD não é o como. O “como” é trivial: escrever um teste, faze-lo passar, talvez refatorar, enxaguar, repetir. A parte preocupante é o “por quê”. Por que desenvolver software de uma maneira tão não-intuitiva?&lt;/p&gt;

&lt;p&gt;Vou falar mais sobre a filosofia TDD em artigos futuros. Em poucas palavras, aplicar TDD garante que você terá um código testável desde o início. Ele o incentivará a projetar seu código de uma maneira simples e modular.&lt;/p&gt;

&lt;p&gt;Mas talvez a principal vantagem do TDD seja aumentar a confiança do desenvolvedor em seu código. Ao desenvolver um pequeno passo de cada vez, você nunca será capaz de errar muito, já que está fazendo muito pouco. Saber que você está apenas a um teste de reprovação de ter um código de trabalho é reconfortante.&lt;/p&gt;

&lt;h2 id=&quot;testes-unitários-em-c--tdd-o-guia-mão-na-massa&quot;&gt;Testes Unitários em C# &amp;amp; TDD: O Guia Mão-Na-Massa&lt;/h2&gt;

&lt;p&gt;Eu cobri como começar com os testes de unidade C# no passado. Eu também cobri as ferramentas necessárias e como começar. Entretanto, não vou assumir que você tenha lido esses artigos. Em vez disso, vou cobrir tudo a partir do zero. Assim, você será capaz de seguir o tutorial mesmo que tenha zero de experiência com testes unitários.&lt;/p&gt;

&lt;h3 id=&quot;nosso-problema-o-kata-string-calculator&quot;&gt;Nosso problema: O Kata String Calculator&lt;/h3&gt;

&lt;p&gt;Para nosso tutorial, escreveremos uma solução para o &lt;a href=&quot;https://osherove.com/tdd-kata-1&quot;&gt;coding kata String Calculator&lt;/a&gt;, idealizado pelo Roy Osherov. Um kata de codificação é um exercício de programação, destinado a permitir que os desenvolvedores pratiquem práticas de engenharia de software ágeis fundamentais, como a refatoração, e - você adivinhou - TDD.&lt;/p&gt;

&lt;p&gt;Para simplificar, vou ignorar algumas das exigências do kata. O que se segue são as exigências que vamos utilizar:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Vamos criar uma classe chamada StringCalculator, com um único método estático com a assinatura estática int Add(string numbers);&lt;/li&gt;
  &lt;li&gt;O método pega uma string representando números separados por uma vírgula, e retorna sua soma.&lt;/li&gt;
  &lt;li&gt;Se passarmos uma string vazia, o método deve retornar zero.&lt;/li&gt;
  &lt;li&gt;A passagem de um único número deve resultar no próprio número.&lt;/li&gt;
  &lt;li&gt;Se passarmos números negativos, o método deve lançar uma ArgumentException, com a mensagem “Números negativos não permitidos:” seguida dos negativos que foram especificados.&lt;/li&gt;
  &lt;li&gt;O método deve ignorar números maiores que 1000 devem. Portanto, “1.2.1000” deve resultar em 1003, mas “1.2.1001” deve resultar em 3.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;criando-o-projeto-de-produção&quot;&gt;Criando o Projeto de Produção&lt;/h3&gt;

&lt;p&gt;Para este tutorial, estarei usando a edição comunitária do Visual Studio 2019. Se você ainda não o tem, pode baixá-lo e instalá-lo de graça.&lt;/p&gt;

&lt;p&gt;Abra o VS e clique em “Criar um novo projeto”, como na imagem a seguir:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1594235427/unit3/img1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Na janela aberta, escolha Biblioteca de Classes (.NET Core) como modelo para o novo projeto. Em seguida, clique em “Next” (Próximo):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1594235427/unit3/img2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A tela seguinte simplesmente pede um nome para o projeto e a solução. Eu escolhi” StringCalculatorKata” tanto para o projeto quanto para a solução. Você também terá que fornecer um local para salvar os arquivos do projeto. Quando terminar, basta clicar em “Criar”.&lt;/p&gt;

&lt;p&gt;Se tudo correr bem, você deverá ver a classe padrão aberta para você no Visual Studio. Vá ao Solution Explorer e exclua essa classe; não vamos precisar dela.&lt;/p&gt;

&lt;h3 id=&quot;criando-o-projeto-de-teste&quot;&gt;Criando o Projeto de Teste&lt;/h3&gt;

&lt;p&gt;Agora, é hora de criar o projeto de teste. Poderíamos fazer isso de duas maneiras: criando um projeto regular de “Biblioteca de Classe” e depois adicionando as dependências necessárias a ele, ou criando um projeto de teste de unidade imediatamente. Iremos com este último, já que facilita tudo isso.&lt;/p&gt;

&lt;p&gt;Você conhece o procedimento: clique com o botão direito do mouse na solução, vá para “Adicionar”,depois para “Novo Projeto…”. Em seguida, escolha o modelo “NUnit Test Project (.NET Core)”.&lt;/p&gt;

&lt;p&gt;Em seguida, você deverá fornecer um nome e um local para o projeto. Gosto de seguir a convenção de nomear o projeto de teste após o projeto de produção, com um “.Test” adicionado. Portanto, escolho “StringCalculatorKata.Test”. Terminar a criação do projeto.&lt;/p&gt;

&lt;p&gt;Se tudo correr bem, você deve ver agora uma nova classe que se parece com esta:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tests&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SetUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Test1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Pass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Vamos fazer algumas coisas. Primeiro, livre-se do método &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Setup()&lt;/code&gt;. Não vamos precisar dele. Depois, acrescente um novo método com o código abaixo:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Test2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Portanto, agora temos dois testes, um que deve passar e outro que deve falhar. Vamos examiná-los para ver se eles estão funcionando corretamente. Vá ao menu “Executar” e clique em “Executar todos os testes”.&lt;/p&gt;

&lt;p&gt;Agora, abra a janela Test Explorer (View -&amp;gt; Test Explorer). Deve ser parecido com isto:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1594235427/unit3/tests-running.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Parece que tudo está funcionando bem! Mas antes de começarmos a fazer nosso exercício de codificação do kata, há dois passos finais que precisamos dar. Primeiro, vamos renomear a classe de teste. Ir para o explorador de soluções, expandir o projeto de teste de unidade, e excluir sua classe de teste padrão. Depois, clique com o botão direito do mouse no projeto de teste, vá para “Adicionar”, depois para “Nova classe…” e adicione uma nova classe chamada “StringCalculatorKata”. Alternativamente, você pode renomear a classe existente.&lt;/p&gt;

&lt;p&gt;A segunda coisa que temos que fazer é garantir que nosso projeto de teste possa ver nosso projeto de produção. Para resolver isso, estamos acrescentando uma referência.&lt;/p&gt;

&lt;p&gt;Vá até o explorador de soluções novamente, clique com o botão direito do mouse no projeto de teste, depois vá até “Adicionar” e clique em “Referência…”.&lt;/p&gt;

&lt;p&gt;Na nova janela, selecione “Projetos” no painel esquerdo, e depois selecione o projeto StringCalculatorKata, que deve ser o único disponível:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1594235427/unit3/add-reference.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Depois, basta clicar em “OK”, e agora você está pronto para continuar.&lt;/p&gt;

&lt;h2 id=&quot;iniciando-nosso-kata-de-codificação&quot;&gt;Iniciando nosso Kata de Codificação&lt;/h2&gt;

&lt;p&gt;Agora, estamos prontos para escrever nosso primeiro teste de reprovação. Portanto, abra a classe StringCalculatorTest e acrescente a ela o seguinte método&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Add_EmptyStringAsParam_ReturnsZero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AreEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringCalculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Em nosso primeiro caso de teste, testamos o cenário mais simples possível. Ou seja, chamamos o método Add de passar uma string vazia, que, de acordo com os requisitos que você viu antes, deve resultar em 0. É claro que nem o método Add nem a classe StringCalculator existem, portanto nosso código nem sequer é compilado. Bem, parabéns! Você realizou com sucesso o primeiro passo no ciclo vermelho-verde-refator, escrevendo um teste de reprovação! Lembre-se: em idiomas estaticamente digitados como C#, a falha em compilar conta como um teste reprovado.&lt;/p&gt;

&lt;p&gt;Portanto, nosso primeiro passo é nos livrarmos do erro de compilação. Se você pairar sobre “StringCalculator”, você deve ver um pequeno pop-up explicando o erro e oferecendo possíveis correções:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1594238110/unit3/hover-tip.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Clique em “Mostrar correções potenciais” e depois em “Gerar novo tipo…”. Você deve então ver uma janela solicitando os detalhes e a localização do novo tipo. Mude o “acesso” para “público” e a localização para o projeto de produção, que é “StringCalculatorKata”. A janela deve ser parecida com esta:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1594238213/unit3/create-production-class.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Clique em “OK”. Agora, se você abrir o explorador de soluções e expandir o projeto StringCalculatorKata, você deve ver a classe StringCalculator.cs à espreita por lá. Legal.&lt;/p&gt;

&lt;p&gt;Entretanto, nosso código ainda não está compilado. E isso porque, apesar de termos criado a classe de produção, não adicionamos o método Add a ela. Então, vamos fazer da mesma forma que fizemos com a classe.&lt;/p&gt;

&lt;p&gt;Passe o mouse sobre a palavra “Adicionar” até que a ajuda apareça com a mensagem “’ StringCalculator’ não contém uma definição para ‘Adicionar’”. Clique em Mostrar correções potenciais, e depois clique em “Gerar método ‘StringCalculator.Add’”.&lt;/p&gt;

&lt;p&gt;Você verá que a classe de produção agora contém um método chamado Add, com o dobro como um tipo de retorno. Queremos que o método retorne int, então vamos mudar isso. Vamos também mudar o nome do parâmetro para “números” para corresponder aos requisitos do kata de codificação. Neste ponto, sua classe StringCalculator completa deve ser parecida com esta:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringCalculator&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NotImplementedException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Agora seu código deve ser compilado. Faça o teste novamente, e você verá que ele falha, com uma mensagem como esta:&lt;/p&gt;

&lt;pre&gt;
Add_EmptyStringAsParam_ReturnsZero
   Source: StringCalculatorTest.cs line 8
   Duration: 43 ms

  Message: 
    System.NotImplementedException : The method or operation is not implemented.
  Stack Trace: 
    StringCalculator.Add(String numbers) line 9
    StringCalculatorTest.Add_EmptyStringAsParam_ReturnsZero() line 10

&lt;/pre&gt;

&lt;p&gt;Temos uma falha de teste verdadeira. Estamos prontos para escrever o código de produção? Não tão rápido. Claro, nosso teste falha, mas falha da maneira errada. Como nosso teste contém uma asserção, esperávamos uma asserção fracassada. Em vez disso, o que temos é uma falha devido ao método em teste, lançando uma exceção.&lt;/p&gt;

&lt;p&gt;A correção aqui é simples. Vamos apenas mudar o método Add, para que ele retorne qualquer número diferente de zero:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Agora, faça o teste novamente, e você verá que a mensagem de erro é esta:&lt;/p&gt;

&lt;pre&gt;
Add_EmptyStringAsParam_ReturnsZero
   Source: StringCalculatorTest.cs line 8
   Duration: 76 ms

  Message: 
      Expected: 0
      But was:  -1
&lt;/pre&gt;

&lt;h3 id=&quot;fazendo-o-teste-passar&quot;&gt;Fazendo o teste passar&lt;/h3&gt;

&lt;p&gt;Estamos agora finalmente prontos para fazer o teste passar. Como disse anteriormente, para passar no teste, você não só é permitido, mas também encorajado a fazer batota. Em nosso caso, podemos simplesmente fazer com que o método Add retorne zero:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;escrevendo-o-segundo-teste-um-único-número&quot;&gt;Escrevendo o segundo teste: Um único número&lt;/h3&gt;

&lt;p&gt;Os requisitos dizem que a passagem de um único número deve retornar o próprio número. Isso soa como uma coisa útil para testar:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Add_StringContainingSingleNumber_ReturnsTheNumberItself&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AreEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringCalculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;O teste falha com a seguinte mensagem:&lt;/p&gt;

&lt;pre&gt;
Add_StringContainingSingleNumber_ReturnsTheNumberItself
   Source: StringCalculatorTest.cs line 14
   Duration: 56 ms

  Message: 
      Expected: 5
      But was:  0

&lt;/pre&gt;

&lt;p&gt;Como podemos fazer o teste acima passar da maneira mais preguiçosa possível? Que tal assim?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;testando-dois-números&quot;&gt;Testando Dois Números&lt;/h3&gt;

&lt;p&gt;Como já testamos o método Add passando por números zero (uma seqüência vazia) e um único número, parece que o próximo passo natural para nós agora seria escrever um teste para o cenário de adição de dois números. Então, vamos fazer exatamente isso.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Add_TwoNumbersSeparatedByComma_ReturnsTheirSum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;7,8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expectedResult&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AreEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expectedResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringCalculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;O teste acima naturalmente falha uma vez que nosso método atualmente retorna 0 quando recebe um fio vazio e cinco de outra forma. Como podemos mudá-lo, para que este novo teste passe, os testes mais antigos continuem a passar, de uma forma que não resolve o problema em geral?&lt;/p&gt;

&lt;p&gt;Esta é uma idéia:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;testando-três-números&quot;&gt;Testando Três Números&lt;/h3&gt;

&lt;p&gt;Você já notou que, até agora, não fizemos nenhuma refatoração? Bem, estamos nos aproximando do ponto em que nossos testes nos levam a incluir alguma duplicação desagradável em nosso código. Então, usaremos a refatoração para alterar o código de uma forma que se aproxime de uma solução geral.&lt;/p&gt;

&lt;p&gt;Vamos ver se podemos fazer isso testando o cenário com três números:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Add_ThreeNumbersSeparatedByComma_ReturnsTheirSum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1, 2, 3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AreEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringCalculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;O teste naturalmente falhará. Como a corda fornecida contém vírgulas, caímos no ramo condicional que retorna 15. Nosso desafio agora é mudar o método de produção de forma a fazer este teste passar. Podemos fazê-lo sem ir à solução geral do problema? Vamos ver.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1, 2, 3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Comparando o parâmetro especificado com a entrada exata usada no teste, podemos fazer o teste passar, evitando ir para a solução geral. Entretanto, agora conseguimos criar uma duplicação de código. Você consegue ver isso? Estamos fazendo duas comparações contra o valor dos números, uma logo após a outra. Vamos ver se conseguimos nos livrar dessa duplicação.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1, 2, 3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TryParse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Aproveitando o método &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TryParse&lt;/code&gt; do tipo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System.Int32&lt;/code&gt;, consegui me livrar do primeiro if. Também usamos um recurso introduzido no &lt;a href=&quot;https://carlosschults.net/pt/funcionalidades-csharp-7/&quot;&gt;C# 7&lt;/a&gt; chamado “out variables”. Este recurso nos permite utilizar parâmetros sem ter que declará-los previamente.&lt;/p&gt;

&lt;p&gt;Todos os testes ainda passam, portanto, não posso escrever mais código de produção. Qual deve ser o próximo teste?&lt;/p&gt;

&lt;h3 id=&quot;testando-mais-de-três-números&quot;&gt;Testando Mais de Três Números&lt;/h3&gt;

&lt;p&gt;Os requisitos não dizem que devemos ser capazes de lidar apenas com três números. Portanto, vamos criar outro caso de teste para cobrir os cenários com 4, 5, ou mais números. Já que estamos nisso, podemos também incluir a exigência de ignorar números maiores que 1000.&lt;/p&gt;

&lt;p&gt;Para fazer isso sem ter que criar muitos métodos de teste, vamos aproveitar o recurso NUnit [testes parametrizados] (https://docs.nunit.org/articles/nunit/writing-tests/attributes/testcase.html), adicionando um único método com vários casos de teste:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1,2,3,4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;8,7,20&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;5,0,4,1001&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;5,0,4,1000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1009&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;26,6,90&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;122&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Add_MoreThanThreeNumbersSeparatedByComma_ReturnsTheirSum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AreEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringCalculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Observe que o terceiro caso de teste exemplifica a exigência que diz que devemos ignorar números superiores a 1000. O próximo caso de teste, no entanto, mostra que 1000 não deve ser ignorado. Se você executar os testes, verá que o test explorer mostra cada caso de teste como um teste distinto.&lt;/p&gt;

&lt;p&gt;Como podemos fazer este teste passar? Honestamente, a essa altura, é muito mais fácil ir para a implementação correta do que trapacear. Então, vamos fazer exatamente isso:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TryParse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;part&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;O código acima deve ser fácil de entender. Nós apenas dividimos o fio em partes usando a vírgula como delimitador. Então, para cada parte, nós a dividimos em um inteiro, verificamos se é igual ou inferior a mil e, se for o caso, adicionamo-la à variável de resultado. Finalmente, retornamos o resultado.&lt;/p&gt;

&lt;h2 id=&quot;ainda-não-terminamos&quot;&gt;Ainda não terminamos&lt;/h2&gt;

&lt;p&gt;Os requisitos dizem que números negativos não devem ser permitidos. Vamos acrescentar um teste para isso! Por uma questão de brevidade, acrescentaremos um único método de teste com vários casos de teste, de modo que somos forçados a ir imediatamente para a implementação correta:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1,2,3,4,5,-5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-1,1,2,9&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;5,6,8,-5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Add_StringContainingNegativeNumbers_Throws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Throws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArgumentException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringCalculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Para este teste, afirmamos que não estamos contra um valor de retorno. Ao invés disso, estamos verificando se o método em teste abre uma exceção.&lt;/p&gt;

&lt;p&gt;Lembre-se que os requisitos dizem que devemos lançar uma exceção com uma mensagem dizendo que os negativos não são permitidos. Devemos também incluir uma lista dos negativos que foram aprovados. Isto exigirá algumas mudanças em nosso método:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;negatives&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TryParse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;part&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;negatives&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;elseif&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;negatives&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;negativesList&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;negatives&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exceptionMessage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$&quot;Negative numbers not allowed: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;negativesList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArgumentException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exceptionMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Como você pode ver, logo no início, nós definimos uma instância de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&amp;lt;int&amp;gt;&lt;/code&gt; para armazenar os negativos que encontramos enquanto iteramos sobre todos os números. Dentro do laço, verificamos se o número atual é negativo. Se for, adicionamo-lo à lista. Se não for, verificamos se é menor ou igual a 1000, caso em que o adicionamos à variável de resultado.&lt;/p&gt;

&lt;p&gt;Após o loop, verificamos se a lista negativa tem algum elemento. Se tiver, criamos uma mensagem de exceção que inclui os negativos especificados e, em seguida, lançamos uma nova ArgumentException. Caso contrário, devolvemos o resultado.&lt;/p&gt;

&lt;h2 id=&quot;conclusão&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Este post foi um guia prático sobre como começar com o TDD em C#. Então, para onde você vai a partir daqui?&lt;/p&gt;

&lt;p&gt;Bem, a maioria das coisas na vida você aprende fazendo. A programação é certamente uma dessas coisas. Portanto, se você quer que os conceitos que você viu hoje realmente se afundem, você tem que praticar.&lt;/p&gt;

&lt;p&gt;O código que escrevi durante este post está disponível como &lt;a href=&quot;https://github.com/carlosschults/string-calculator-kata&quot;&gt;um repositório público no GitHub.&lt;/a&gt; Vá lá, clone-o usando &lt;a href=&quot;https://carlosschults.net/pt/basicos-do-git-usuarios-tfvc&quot;&gt;Git,&lt;/a&gt;, e comece a brincar com ele.&lt;/p&gt;

&lt;p&gt;Você verá que eu criei um compromisso para cada etapa do ciclo TDD. Dessa forma, torna-se mais fácil para os futuros leitores visualizar todas as etapas do processo, percorrendo a história do projeto, um compromisso de cada vez.&lt;/p&gt;

&lt;p&gt;É possível melhorar o código que eu usei hoje. Por exemplo, o código do método &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add&lt;/code&gt; pode ser escrito de uma forma mais curta, clara e eficiente, usando &lt;a href=&quot;https://carlosschults.net/pt/programacao-funcional-csharp/.&quot;&gt;LINQ&lt;/a&gt; Você pode criar mais testes. Os requisitos do exercício que apresentamos no início pedem por uma mensagem de erro específica ao lançar a exceção quando há números negativos na string. Apesar de termos implementado a mensagem como pedido, nós não criamos um teste pra isso. Você pode fazer isso, como forma de praticar.&lt;/p&gt;

&lt;p&gt;Finalmente, fique atento a este blog. Este post é parte de uma série, à qual pretendo acrescentar mais partes.&lt;/p&gt;

&lt;p&gt;Obrigado pela leitura, e até a próxima!&lt;/p&gt;
</description>
        <pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate>
        <link>https://carlosschults.net/pt/testes-unitarios-csharp-intro-tdd/</link>
        <guid isPermaLink="true">https://carlosschults.net/pt/testes-unitarios-csharp-intro-tdd/</guid>
        
        <category>csharp</category>
        
        <category>iniciantes</category>
        
        <category>testes-de-software</category>
        
        <category>testes-unitarios</category>
        
        <category>testes-automatizados</category>
        
        <category>csharp</category>
        
        <category>metodologias-ageis</category>
        
        <category>serie-testes-unitarios</category>
        
        
      </item>
    
      <item>
        <title>Null É Ruim. Qual A Melhor Alternativa? Null.</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1593715153/null-evill-1068x437_ztikwf.jpg&quot; alt=&quot;&quot; /&gt;
&lt;span&gt;Foto por &lt;a href=&quot;https://unsplash.com/@benhershey?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Ben Hershey&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/null?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Nota editorial: Eu escrevi originalmente este post para o blog da NDepend. Você pode &lt;a href=&quot;https://blog.ndepend.com/null-evil/&quot;&gt;conferir o original aqui, em inglês, no site deles&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;“Null é maligno”. Se você tem sido um desenvolvedor de software por qualquer período de tempo razoável, aposto que já se deparou com essa afirmação várias vezes.&lt;/p&gt;

&lt;p&gt;Eu diria também que é muito provável que você concorde com o sentimento, ou seja, que a referência nula é uma característica sem a qual nossas linguagens de programação ficariam melhor. Até mesmo seu criador expressou seu pesar pela referência nula, &lt;a href=&quot;https://en.wikipedia.org/wiki/Tony_Hoare#Apologies_and_retractions&quot;&gt;chamando-a de seu “erro de um bilhão de dólares”&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Criticar null tende a ficar chato rapidamente, portanto, os autores não fazem só isso. Eles também oferecem alternativas. E embora eu acredite que muitas das alternativas apresentadas têm seus méritos, também acho que talvez tenhamos negligenciado a melhor solução para tudo isso.&lt;/p&gt;

&lt;p&gt;Neste post, vamos examinar algumas das alternativas comuns para o retorno nulo antes de fazer o argumento de que a melhor alternativa é a própria nulidade. Vamos começar!&lt;/p&gt;

&lt;h2 id=&quot;null-é-tóxico&quot;&gt;Null é Tóxico…&lt;/h2&gt;

&lt;p&gt;Não vou me deter muito em toda essa coisa do “nulo é mal”, já que muito já foi escrito sobre isso. Alguns exemplos (em inglês):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&amp;quot;https://sidburn.github.io/blog/2016/03/20/null-is-evil&amp;quot;&amp;gt;Null is Evil&quot;&gt;Null Is Evil&lt;/a&gt;
&lt;a href=&quot;&amp;quot;http://blog.ploeh.dk/2015/11/13/null-has-no-type-but-maybe-has/&amp;quot;&amp;gt;&quot;&gt;Null has no type, but Maybe has&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/12777/are-null-references-really-a-bad-thing&quot;&gt;Esta resposta de Stack Overflow&lt;/a&gt; também tem algumas informações valiosas.&lt;/p&gt;

&lt;h2 id=&quot;mas-útil-quais-são-as-alternativas&quot;&gt;…Mas útil. Quais são as Alternativas?&lt;/h2&gt;

&lt;p&gt;Agora, espero que estejamos na mesma página no que diz respeito ao status de nulo como um recurso de linguagem problemática. Mas tóxico ou não, o nulo serve a alguns propósitos. As pessoas o usam para representar um dado ausente, inválido ou desconhecido, ou mesmo para indicar que ocorreu um erro.&lt;/p&gt;

&lt;p&gt;O que deveriam estar fazendo ao invés disso?&lt;/p&gt;

&lt;h3 id=&quot;lançar-uma-exceção&quot;&gt;Lançar uma Exceção&lt;/h3&gt;

&lt;p&gt;Em algumas situações em que as pessoas retornam null, a coisa razoável a fazer é lançar uma exceção. Pense desta maneira: se um método promete realizar algo e não o faz, ele deve lançar uma exceção. Em outras palavras: quando um método não cumpre seu contrato, então é razoável disparar uma exceção.&lt;/p&gt;

&lt;p&gt;É claro que você deve reservar exceções para cenários que sejam verdadeiramente excepcionais. Se uma determinada situação acontece com freqüência, então uma exceção não é a melhor solução.&lt;/p&gt;

&lt;h3 id=&quot;padrão-de-objeto-null&quot;&gt;Padrão de Objeto Null&lt;/h3&gt;

&lt;p&gt;Considere as seguintes linhas de código:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contract&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;O que deveria acontecer se não houvesse um contrato com ID igual a 42? Se o método “Find” retornar null, então você vai ganhar uma desagradável &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NullReferenceException&lt;/code&gt;. Como eu disse anteriormente, a nulidade faz seu código mentir. Se fossemos realmente pedantes sobre isso, o método “Find” deveria ser renomeado para “FindOrReturnNull”. Muito verboso, mas mais honesto.&lt;/p&gt;

&lt;p&gt;De qualquer forma, o &lt;a href=&quot;https://en.wikipedia.org/wiki/Null_object_pattern&quot;&gt;padrão de objeto nulo&lt;/a&gt; é uma tentativa de resolver este problema. E como ele faz isso? Criando seu próprio tipo de nulo.&lt;/p&gt;

&lt;p&gt;Para implementar o padrão, criamos uma nova classe (vamos chamá-la de “NullContract”) que representa o caso quando um contrato está faltando. Fazemos esta nova classe cumprir o mesmo contrato que a classe original, mas não fazemos nada nos métodos. Assim, se imaginarmos que “Contrato” implementa &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IContract&lt;/code&gt;, nossa classe NullContract poderia ser algo parecido com isto:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NullContract&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IContract&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// construtor, propriedades, etc &lt;/span&gt;
	
	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;months&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// não faz nada aqui, propositalmente&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Ao empregar o padrão de objeto nulo você poderia - teoricamente, pelo menos - ter a certeza de que sempre receberá um objeto que cumpre o contrato que você espera que ele honre sem explodir na sua cara.&lt;/p&gt;

&lt;h3 id=&quot;maybeoption&quot;&gt;Maybe/Option&lt;/h3&gt;

&lt;p&gt;Finalmente, temos uma alternativa muito interessante que muitas vezes é encontrada na &lt;a href=&quot;https://blog.ndepend.com/functional-programming-makes-code-not-oo/&quot;&gt;programação funcional&lt;/a&gt; linguagens. Esta alternativa é o uso de um tipo dedicado, destinado a representar o caso de uso de um valor potencialmente ausente. Por exemplo, &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/options&quot;&gt;em F# isto é chamado de tipo de option&lt;/a&gt;; Haskell a chama de &lt;a href=&quot;https://hackage.haskell.org/package/base-4.11.0.0/docs/Data-Maybe.html&quot;&gt;Maybe&lt;/a&gt;. A partir da versão 8, Java introduziu a classe &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html&quot;&gt;Optional&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Neste momento, o C# não oferece algo parecido com este tipo nativamente.&lt;/p&gt;

&lt;h2 id=&quot;alternativas-ao-null-elas-são-boas&quot;&gt;Alternativas ao Null: Elas são boas?&lt;/h2&gt;

&lt;p&gt;Tendo apresentado as alternativas mais comumente usadas para nulo, é hora do veredicto final. Vamos começar com a opção “lançar exceção”.&lt;/p&gt;

&lt;h3 id=&quot;exceções&quot;&gt;Exceções&lt;/h3&gt;

&lt;p&gt;Se o chamador não fornecer os argumentos corretos para a função que está chamando, então poderíamos dizer que ele está quebrando o contrato da função. Lançar uma exceção é a coisa correta a fazer nesta situação.&lt;/p&gt;

&lt;p&gt;O código a seguir é um bom exemplo do que &lt;strong&gt;não&lt;/strong&gt;* deve ser feito:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsNullOrWhiteSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// tá tudo certo: vamos fazer o que precisa ser feito e retornar&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// um novo objeto!&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;// Tem coisa errada com os parâmetros recebidos. Já sei! Vamos retornar null!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Eu vejo códigos como este o tempo todo em produção. Os ifs aninhados são horríveis. Eles deveriam pelo menos ter usado um “and” para encaixar tudo em apenas um “if”. Mas o que realmente deveria acontecer é algo assim:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArgumentOutOfRangeException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;O valor deve estar no intervalo de 1 a 100, inclusive.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsNullOrWhiteSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArgumentException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
             &lt;span class=&quot;s&quot;&gt;&quot;O valor deve ser uma string válida.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
             &lt;span class=&quot;k&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;// tá tudo certo: vamos fazer o que precisa ser feito e retornar&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// um novo objeto!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Além disso, &lt;a href=&quot;https://blogs.msdn.microsoft.com/ericlippert/2008/09/10/vexing-exceptions/&quot;&gt;não capture exceções exógenas&lt;/a&gt; que possam acontecer dentro de seu método e retorne nulo; em vez disso, deixe-as subir, pois este tipo de exceções representam problemas fora de seu controle. Problemas como uma falha na rede são problemas que você não poderia ter evitado de qualquer forma, em código.&lt;/p&gt;

&lt;h3 id=&quot;padrão-null-object&quot;&gt;Padrão Null Object&lt;/h3&gt;

&lt;p&gt;Vamos considerar o padrão de objeto nulo, do qual certamente não sou um grande fã. Um problema com este padrão é que você só deve usá-lo quando o código de chamada não se importa com o resultado do que quer que ele esteja tentando realizar. Considere novamente nosso exemplo de contrato:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contract&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Esta linha de código não é “consciente” (nem se importa) se a variável “Contrato” se refere a um contrato válido ou a uma instância da NullContract. Se for um contrato válido, ele será prorrogado por 12 meses. Se não for, então nada acontecerá. Às vezes, é exatamente isso que você quer, mas nem sempre. Neste exemplo, se um contrato com ID equivale a 42 realmente deveria existir, mas não… talvez lançar uma exceção funcionaria melhor.&lt;/p&gt;

&lt;p&gt;Tudo o que eu disse até agora é que o padrão de objeto nulo não é bem adequado para cada cenário. Isto não é um problema tão ruim assim; você poderia dizer o mesmo sobre praticamente qualquer coisa.&lt;/p&gt;

&lt;p&gt;Meu principal problema com o padrão de objeto nulo é que ele equivale a pouco mais do que criar um novo tipo de objeto nulo sem realmente resolver o problema. Veja, &lt;strong&gt;utilizar o padrão não impede que você retorne nulo&lt;/strong&gt;. Se eu consumir algum método escrito por um terceiro que afirma usar o padrão, devo ser capaz de assumir que o que quer que seja que ele retorne é seguro. Mas eu não posso ter certeza. Eu tenho três opções:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Confiar no autor do código;&lt;/li&gt;
  &lt;li&gt;Inspecionar o código-fonte, se possível; ou&lt;/li&gt;
  &lt;li&gt;Continuar a verificar a nulidade, o que derrota completamente o propósito de usar o padrão.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pode-se argumentar que estes problemas não são relevantes no contexto de uma única equipe que trabalha com a mesma base de código. Os desenvolvedores poderiam concordar em usar o padrão corretamente. Mas se tudo equivale a confiança e convenção no final do dia, você poderia muito bem concordar em nunca retornar nulo e teria o mesmo resultado.&lt;/p&gt;

&lt;h4 id=&quot;maybeoption-1&quot;&gt;Maybe/Option&lt;/h4&gt;

&lt;p&gt;Por último, mas não menos importante, e quanto aos tipos Maybe/Option? Esta é uma alternativa ao mesmo tempo elegante e robusta, especialmente em linguagens como o F#, onde você é forçado, de certa forma, a lidar com ambos os casos usando &lt;em&gt;pattern matching.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Mas a triste realidade é a seguinte: embora &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Maybe/Option&lt;/code&gt; sejam abordagens surpreendentes, elas não podem mudar o fato de que o nulo existe e continuará a existir. Você não pode realmente impedir as pessoas de usá-lo, nem pode removê-lo de todas as linhas de código que as pessoas têm escrito desde o início da história do C#.&lt;/p&gt;

&lt;p&gt;Portanto, mesmo sendo grandes abordagens, elas ainda sofrem com o problema de serem mais um tipo de nulo para os desenvolvedores lidarem.&lt;/p&gt;

&lt;h2 id=&quot;a-solução-para-null-o-próprio-null&quot;&gt;A solução para Null: O próprio Null&lt;/h2&gt;

&lt;p&gt;Você conhece o velho ditado “Quando em um buraco, pare de cavar”? Para o melhor ou para o pior, existe o nulo. Tóxico ou não, é uma característica que as pessoas usam. Portanto, talvez a solução para tudo isso seja apenas consertar o nulo.&lt;/p&gt;

&lt;p&gt;A linguagem &lt;a href=&quot;https://kotlinlang.org/&quot;&gt;kotlin&lt;/a&gt; acertou ao ter diferentes tipos de nulos e não nulos e adicionar todos os tipos de verificações para evitar que o desenvolvedor faça coisas que acabariam mal, como desreferenciar um tipo nulo sem verificá-lo ou atribuir um valor nulo a uma variável não nula.&lt;/p&gt;

&lt;p&gt;O C# nos deu o primeiro passo na direção certa há muitos anos com &lt;a href=&quot;https://docs.microsoft.com/pt-br/dotnet/csharp/programming-guide/nullable-types/&quot;&gt;tipos de valor nulo&lt;/a&gt;. Após uma longa espera, &lt;a href=&quot;https://blog.ndepend.com/c-8-0-features-glimpse-future/&quot;&gt;tipos de referência finalmente obterão o mesmo benefício com C# 8.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A alternativa para o nulo é o próprio nulo… &lt;strong&gt;quando feito corretamente&lt;/strong&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 02 Jul 2020 00:00:00 +0000</pubDate>
        <link>https://carlosschults.net/pt/null-problematico</link>
        <guid isPermaLink="true">https://carlosschults.net/pt/null-problematico</guid>
        
        <category>engenharia-de-software</category>
        
        <category>boas-praticas</category>
        
        <category>programacao</category>
        
        <category>csharp</category>
        
        
      </item>
    
      <item>
        <title>Afiando a Serra: 4 Dicas Rápidas Para Sua Equipe</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1592314350/sharpen-the-saw-1038x437_z9ermr.jpg&quot; alt=&quot;&quot; /&gt;
Photo de Sven Brandsma no Unsplash&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTA: Eu escrevi este post originalmente para o blog da SubMain. Caso lhe interesse, você pode &lt;a href=&quot;https://blog.submain.com/sharpen-saw/&quot;&gt;ler o post original no site deles, em inglês&lt;/a&gt;. Enquanto estiver por lá, aproveite para dar uma olhada no CodeIt.Right, uma ferramenta para automatizar revisões de código.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Você está familiarizado com a expressão “afiar a serra” no contexto de aprendizagem e melhoria contínua? Se você leu o livro de Stephen Covey chamado &lt;a href=&quot;https://pt.wikipedia.org/wiki/Os_Sete_H%C3%A1bitos_das_Pessoas_Altamente_Eficazes&quot; title=&quot;Os Sete Hábitos das Pessoas Altamente Eficazes&quot;&gt;“Os Sete Hábitos das Pessoas Altamente Eficazes”&lt;/a&gt;, então tenho certeza que você está. Para quem não está familiarizado com o termo, significa basicamente se engajar em práticas que o tornarão melhor em sua profissão ou arte.&lt;/p&gt;

&lt;p&gt;O que você como líder técnico, desenvolvedor líder ou arquiteto de software pode fazer para incentivar os desenvolvedores de sua equipe a “afiar suas serra”? Isso é o que vamos responder com este post. Vamos mostrar a você quatro maneiras rápidas e fáceis de sua equipe melhorar suas habilidades e agregar mais valor.&lt;/p&gt;

&lt;h2 id=&quot;1-afiando-a-serra-pela-leitura-criar-um-clube-do-livro-técnico&quot;&gt;1. Afiando a Serra pela Leitura: Criar um Clube do Livro Técnico&lt;/h2&gt;

&lt;p&gt;Não seria fantástico ter uma equipe formada por pessoas incrivelmente bem informadas, atualizadas com as novidades relevantes, e com sólidos conhecimentos sobre os fundamentos da nossa indústria? Sim, eu pensei que sim. E não há melhor maneira de conseguir isso do que lendo.&lt;/p&gt;

&lt;p&gt;O que eu sugiro aqui é algo muito simples. Todos os meses, você e sua equipe escolhem uma leitura designada para a equipe de desenvolvimento. Sobre que assunto, você pergunta? Padrões de design, concorrência, refatoração, teste unitário - eu diria que praticamente tudo é jogo justo, desde que os próprios desenvolvedores estejam interessados.&lt;/p&gt;

&lt;p&gt;Ah, e antes que eu esqueça: isso provavelmente não precisa ser mencionado, mas sua empresa deve &lt;em&gt;comprar&lt;/em&gt; aos desenvolvedores cópias dos livros escolhidos. Se você sente que não pode pagar isso, bem, eu não acredito que você vai ter uma empresa por muito tempo, pra ser sincero.&lt;/p&gt;

&lt;p&gt;Uma solução menos ideal seria comprar uma cópia do livro para um desenvolvedor. Peça que estudem o livro em seu tempo livre e depois apresentem suas descobertas para o resto da equipe, dando uma ou mais palestras internas. Em seguida, selecione outro livro e outro membro da equipe, e peça a esse desenvolvedor que dê a palestra interna no próximo mês.&lt;/p&gt;

&lt;p&gt;Agora, falando em conversas internas…&lt;/p&gt;

&lt;h2 id=&quot;2-afiando-a-serra-através-de-palestras-apresentações-internas&quot;&gt;2. Afiando a Serra Através de Palestras: Apresentações Internas&lt;/h2&gt;

&lt;p&gt;Fazer com que os desenvolvedores façam palestras internas uns com os outros é uma ótima maneira de disseminar o conhecimento por toda a empresa. Para os desenvolvedores que dão a palestra, é a oportunidade perfeita para praticar várias habilidades, tais como:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Aprender um assunto e fazer as pesquisas necessárias.&lt;/li&gt;
  &lt;li&gt;Criar slides bem feitos.&lt;/li&gt;
  &lt;li&gt;Falar em público, o que pode ser uma experiência difícil para muitos de nós.&lt;/li&gt;
  &lt;li&gt;Responder perguntas.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Eu poderia continuar, mas em resumo, eles estarão praticando a habilidade geral de comunicação. Isso simplesmente não tem preço. Dar palestras internas pode ser uma ótima prática para falar em conferências, por exemplo.&lt;/p&gt;

&lt;p&gt;E qual a vantagem para quem assiste a palestra? Obviamente, a oportunidade de aprendizado. Mas vou acrescentar que, no caso das conversas internas da empresa, a probabilidade de realmente colocar em uso esse conhecimento que você adquiriu é muito maior. Como os palestrantes são na verdade seus colegas de trabalho - pessoas que compartilham o contexto com você todos os dias e estão cientes dos problemas e desafios que sua empresa está enfrentando - eu diria que é muito provável que eles escolham um tópico que se relacione com a empresa.&lt;/p&gt;

&lt;h2 id=&quot;3-afiando-a-serra-com-a-escrita-criar-e-manter-um-blog-de-tecnologia&quot;&gt;3. Afiando a Serra Com a Escrita: Criar e Manter um Blog de Tecnologia&lt;/h2&gt;

&lt;p&gt;Quando seus desenvolvedores dão palestras internas, eles estão ensinando uns aos outros, o que é fantástico. Mas e se eles pudessem disseminar esse conhecimento para além da sua empersa, ao mesmo tempo em que melhoram a sua capacidade de escrita e de articular um argumento? E se eles pudessem fazer isso enquanto aprendem sobre coisas como marketing de conteúdo e SEO? Melhor ainda, e se eles pudessem demonstrar o know-how técnico de sua empresa, posicionando-a como especialista em sua área de domínio?&lt;/p&gt;

&lt;p&gt;Há uma maneira de fazer exatamente isso, e chama-se blogging.&lt;/p&gt;

&lt;p&gt;Inicie um blog de engenharia de software. Decida sobre as especificidades, como por exemplo:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Quais tópicos devem ser abordados?&lt;/li&gt;
  &lt;li&gt;Com que freqüência você vai publicar?&lt;/li&gt;
  &lt;li&gt;Quem serão os autores?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Faria sentido se, pelo menos no início, os desenvolvedores que são naturalmente melhores escritores fossem os autores do blog. Mas como o objetivo aqui é aprender a afiar a serra - o cenário ideal é aquele em que todo desenvolvedor tem a chance de afiar suas costeletas de escrita.&lt;/p&gt;

&lt;h2 id=&quot;4-afiação-da-serra-por-programação-coding-dojos-na-empresa&quot;&gt;4. Afiação da Serra por Programação: Coding Dojos Na Empresa&lt;/h2&gt;

&lt;p&gt;Um &lt;a href=&quot;http://codingdojo.org/&quot;&gt;coding dojo&lt;/a&gt; é uma espécie de sessão de treinamento na qual as pessoas revezam em pares, trabalhando de forma colaborativa sobre o mesmo problema. A inspiração para o nome vem das artes marciais. O objetivo de um dojo não é necessariamente resolver o problema… mas desenvolver tanto habilidades de engenharia, como testes unitários/TDD, quanto habilidades sociais, como &lt;a href=&quot;https://carlosschults.net/pt/revisao-codigo-vs-programacao-em-par/&quot;&gt;programação em pares&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Para realizar um dojo de codificação, você vai precisar do seguinte:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Espaço.&lt;/strong&gt; Você precisa de um lugar grande o suficiente para acomodar de 5 a 15 pessoas. (Algumas pessoas dizem que 20 pessoas para um dojo codificador é aceitável, mas IMHO, isso é demais). Já que estamos falando em afiar as serras da sua equipe, um escritório ou sala de reuniões na sua empresa provavelmente serve.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Um computador&lt;/em&gt;**. Pode ser um computador desktop ou laptop; não importa, desde que seja colocado em uma mesa com duas cadeiras, onde duas pessoas possam sentar-se e colaborar confortavelmente juntas.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Um projetor ou um monitor grande&lt;/em&gt;**. Todos os participantes precisam observar o que está acontecendo em um determinado momento.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Lanches!&lt;/em&gt; Um dojo codificador deve ser uma experiência de união, e os seres humanos adoram se conectar sobre a comida e a bebida. E &lt;a href=&quot;https://www.artima.com/weblogs/viewpost.jsp?thread=4414&quot;&gt;os programadores são seres humanos&lt;/a&gt;, da última vez que verifiquei. Basta ser atencioso com aqueles com restrições alimentares e tudo vai dar certo.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Então, você resolveu fazer isso. Você montou o equipamento necessário, e as pessoas apareceram no local combinado. E agora?&lt;/p&gt;

&lt;p&gt;Bem, começando do começo. Você precisa de um problema! Mas nem todos os desafios de programação são um bom problema de codificação do dojo. Como eu disse anteriormente, resolver o problema não é necessariamente o objetivo, mas sim praticar habilidades de engenharia como TDD e programação em pares. Então, escrever um compilador a partir do zero não rola. Mas implementar um conversor para numerais romanos pode funcionar muito bem.&lt;/p&gt;

&lt;p&gt;Quais são as características de um bom problema para um coding dojo?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;É pequeno, então é viável resolvê-lo em um tempo relativamente curto.&lt;/li&gt;
  &lt;li&gt;Empresta-se bem à TDD.&lt;/li&gt;
  &lt;li&gt;É finito e bem definido. Desafios vagos e em aberto não servem.&lt;/li&gt;
  &lt;li&gt;É baseado em um problema do mundo real, não um problema abstrato.&lt;/li&gt;
  &lt;li&gt;É diferente dos desafios que você resolve no seu trabalho diário.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Você não precisa se preocupar em encontrar bons problemas, no entanto. A &lt;a href=&quot;http://codingdojo.org/KataCatalogue/&quot;&gt;web resolve seu problema&lt;/a&gt;Ela &lt;a href=&quot;http://codekata.pragprog.com/&quot;&gt;está cheia&lt;/a&gt; de &lt;a href=&quot;https://sites.google.com/site/tddproblems/&quot;&gt;fontes&lt;/a&gt; para &lt;a href=&quot;https://code.joejag.com/coding-dojo/example-katas/&quot;&gt;problemas&lt;/a&gt; lá fora.&lt;/p&gt;

&lt;p&gt;Com a escolha do problema fora do caminho, é hora de escolher uma linguagem de programação. Você não precisa usar a mesma linguagem que você usa todos os dias em seu trabalho. Na verdade, é bom usar o dojo como uma oportunidade para experimentar diferentes linguagens. Isso pode ajudar a tornar as coisas novas e mais desafiadoras. Só não se esqueça de ter por perto uma pessoa que conheça bem essa linguagem para que ela possa ajudar quando o grupo tiver dúvidas.&lt;/p&gt;

&lt;p&gt;Agora, para começar, você vai precisar de dois voluntários: um para ser o motorista e outro para ser o co-piloto. Estes termos vêm da programação em pares. O motorista é a pessoa que está digitando, e o co-piloto dá conselhos e feedback. As demais pessoas são o público, pelo menos por enquanto. O ideal seria que todos em uma sessão de dojo escrevessem código.&lt;/p&gt;

&lt;p&gt;Então, com todos em seus lugares, a diversão começa. O motorista começa a codificar, usando o ciclo vermelho-verde-refatorar da TDD:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Primeiro, a pessoa que está na posição de motorista escreve um teste que falha.&lt;/li&gt;
  &lt;li&gt;Então, ela escreve apenas a menor quantidade possível de código que vai fazer o teste passar.&lt;/li&gt;
  &lt;li&gt;Quando o teste está passando, é hora de refatorar. Somente nesta fase as pessoas na platéia têm permissão para falar, dando conselhos e feedback para ajudar o motorista a refatorar melhor o código.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ao final de um período de tempo previamente estabelecido (cinco a dez minutos), o motorista pára de codificar e retorna à audiência. O co-piloto torna-se o motorista, e um novo membro da audiência torna-se o co-piloto.&lt;/p&gt;

&lt;p&gt;Este ciclo continua até que todos na sala tenham escrito o código ou até que o tempo previsto para a sessão expire - o que vier primeiro.&lt;/p&gt;

&lt;h3 id=&quot;retrospectiva&quot;&gt;Retrospectiva&lt;/h3&gt;

&lt;p&gt;Assim que a sessão de codificação propriamente dita estiver concluída, dedique algum tempo para fazer uma retrospectiva. Pergunte aos participantes sobre as coisas que eles gostaram e não gostaram da sessão, e escreva tudo isso. Estas duas listas servirão como uma diretriz para o que fazer e não fazer em seus futuros dojos de codificação.&lt;/p&gt;

&lt;h2 id=&quot;conclusão&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;O desenvolvimento de software é uma profissão de prática. Requer aprendizagem contínua - ou melhor, afiação contínua da serra. Além das dicas que acabei de lhe dar, há muitas outras maneiras de afiar sua serra. Na verdade, você está fazendo um deles agora mesmo. Você está lendo um blog técnico!&lt;/p&gt;

&lt;p&gt;Desde &lt;a href=&quot;https://blog.submain.com/category/rulesexplained/&quot;&gt;tutoriais aprofundados sobre ferramentas como CodeIt.Right&lt;/a&gt; que podem ajudar sua equipe a escrever melhor código?até &lt;a href=&quot;https://blog.submain.com/coding-best-practices-short-time/&quot;&gt;insights sobre melhores práticas&lt;/a&gt;?até mesmo dicas sobre coisas &lt;a href=&quot;https://blog.submain.com/4-common-datetime-mistakes-c-avoid/&quot;&gt;você pode ter tomado como certo&lt;/a&gt;, não faltam tópicos interessantes e úteis que você pode aprender lendo um bom blog sobre tecnologia.&lt;/p&gt;

&lt;p&gt;Obrigado pela leitura!&lt;/p&gt;

</description>
        <pubDate>Tue, 16 Jun 2020 00:00:00 +0000</pubDate>
        <link>https://carlosschults.net/pt/afiando-a-serra/</link>
        <guid isPermaLink="true">https://carlosschults.net/pt/afiando-a-serra/</guid>
        
        <category>engenharia-de-software</category>
        
        <category>boas-práticas</category>
        
        <category>programação</category>
        
        <category>carreira</category>
        
        
      </item>
    
      <item>
        <title>Programação Funcional em C#: Mapeando, Filtrando e Reduzindo Em Busca de Código Limpo</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1548200356/Untitled_xfahmy.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTA: Este post foi originalmente publicado no blog da SubMain. Você pode &lt;a href=&quot;https://blog.submain.com/csharp-functional-programming/&quot;&gt;ler o original aqui, em inglês&lt;/a&gt;. Aproveite para conferir o CodeIt.Right, um produto que pode ajudar a melhorar seu código.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Você provavelmente pensa no C# como uma linguagem orientada a objeto. Mas é possível que você, ao programar em C#, tenha usado conceitos de programação funcional sem sequer ter notado.&lt;/p&gt;

&lt;p&gt;O post de hoje trata desse tema. Vou começar abordando as vantagens da programação funcional, mostrando a justificativa se aplicá-la mesmo usando uma assim chamada linguagem orientada a objetos. Depois vou explicar como você já está usando um pouco do estilo funcional em seu código C#, mesmo sem estar ciente disso. Finalmente, vou demonstrar como aplicar um pouco de pensamento funcional ao seu código pode torná-lo mais limpo, seguro e mais expressivo.&lt;/p&gt;

&lt;h2 id=&quot;programação-funcional-em-c-por-quê&quot;&gt;Programação Funcional em C#: Por quê?&lt;/h2&gt;

&lt;p&gt;Nós sabemos que o .NET framework oferece algumas capacidades funcionais na forma dos métodos de extensão do LINQ, mas qual seria a vantagem de usá-las?&lt;/p&gt;

&lt;p&gt;Para responder bem essa pergunta, precisamos voltar um passo e entender os atrativos da programação funcional em si. Na minha opinião, para começar a entender os benefícios da programação funcional você precisa primeiro entender dois tópicos: &lt;strong&gt;funções puras&lt;/strong&gt; e &lt;strong&gt;imutabilidade&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Funções puras&lt;/strong&gt; são funções que apenas podem acessar os valores que receberam por argumentos e, como consequência, não podem ter nenhum efeito colateral. &lt;strong&gt;Imutabilidade&lt;/strong&gt; se refere a objetos ou estruturas de dados que, uma vez inicializados, não podem sofrer nenhuma mudança em seus valores. Isso os torna mais fáceis de entender e seguros para serem usados em código com múltiplas threads.&lt;/p&gt;

&lt;h2 id=&quot;operações-fundamentais-da-programação-funcional-e-como-executá-las-usando-c&quot;&gt;Operações Fundamentais da Programação Funcional e Como Executá-las Usando C#&lt;/h2&gt;

&lt;p&gt;Como já cobrimos o &lt;em&gt;o quê&lt;/em&gt; e o &lt;em&gt;porquê&lt;/em&gt; da programação funcional, está na hora de vermos o &lt;em&gt;como&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Eu vou abordar três operações: &lt;strong&gt;map&lt;/strong&gt;, &lt;strong&gt;filter&lt;/strong&gt; e &lt;strong&gt;reduce&lt;/strong&gt;. Vou começar mostrando alguns problemas, usando uma abordagem procedural tradicional para resolvê-los. Em seguida, vou apresentar a alternativa usando o estilo funcional.&lt;/p&gt;

&lt;h2 id=&quot;map&quot;&gt;Map&lt;/h2&gt;

&lt;p&gt;Em termos simples, a operação “map” recebe uma sequência de valores, aplica alguma transformação em cada um dos itens, e retorna uma nova sequência contendo os valores resultantes. Vamos ver alguns exemplos:&lt;/p&gt;

&lt;p&gt;Imagine que você escreveu o código a seguir, devido à requisição de algum cliente:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AddThreeToEachElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	       &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;É uma função que adiciona três a cada elemento do &lt;a href=&quot;https://blog.submain.com/c-array/&quot;&gt;array&lt;/a&gt; de inteiros especificado. Bem tranquilo.&lt;/p&gt;

&lt;p&gt;Então aparece o pedido de uma nova função. Dessa vez, é para adicionar cinco a cada elemento do vetor. Ignorando a &lt;a href=&quot;https://en.wikipedia.org/wiki/Rule_of_three_(computer_programming)&quot;&gt;regra de três,&lt;/a&gt; você pula direto para uma versão generalizada, parametrizando o número a ser adicionado:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AddNumberToEachElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	   &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt;
	   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	        &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Então aparece um novo pedido. Agora você tem que escrever uma função para multiplicar cada elemento do array especificado por três. Não vou me dar ao trabalho de adicionar o código de exemplo, porque seria bem trivial. A esse ponto, você já sabe o suficiente para evitar fixar o número no código, então você provavelmente vai pular direto para uma versão generalizada. Mesmo assim, alguma duplicação ainda vai permanecer: o laço de repetição em si. E se você pudesse manter o loop e parametrizar a ação a ser aplicada nos itens?&lt;/p&gt;

&lt;h3 id=&quot;a-maneira-funcional&quot;&gt;A Maneira Funcional&lt;/h3&gt;

&lt;p&gt;Leve em consideração o que você acabou de ler sobre funções puras—e também seu conhecimento prévio de &lt;a href=&quot;https://blog.submain.com/coding-best-practices-short-time/&quot;&gt;boas práticas de programação&lt;/a&gt; em geral—e pense em maneiras nas quais o código do exemplo poderia ser melhorado.&lt;/p&gt;

&lt;p&gt;No meu ponto de vista, os problemas principais são:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;O código é muito específico&lt;/strong&gt;. Não é fácil modificá-lo para acomodar outras transformações a serem aplicadas nos elementos do array. O código só faz uma soma, e é só.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Muito código boilerplate&lt;/strong&gt;. Olhe novamente o exemplo anterior. Conte as linhas. Há sete, das quais apenas uma realmente tem algo a ver com a regra de negócio do método.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Como que o estilo funcional pode melhorar isso? O código a seguir mostra como eu reescreveria o exemplo em F#, por exemplo:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Aqui, “numbers” represente uma sequência de números que eu consegui de alguma forma. Então eu uso a função &lt;strong&gt;map&lt;/strong&gt; que pertence ao módulo &lt;strong&gt;Seq&lt;/strong&gt;, passando a sequência como um dos parâmetros, junto com uma função que recebe um número inteiro e adiciona três a ele.&lt;/p&gt;

&lt;h3 id=&quot;o-jeito-funcional-sabor-c&quot;&gt;O Jeito Funcional, sabor C#&lt;/h3&gt;

&lt;p&gt;O .NET implementa a operação map na forma do método de extensão do LINQ chamado “Select.” Então, para converter o código em F# acima para C#, você faria assim:&lt;/p&gt;

&lt;p&gt;var result = numbers.Select(x =&amp;gt; x + 3);&lt;/p&gt;

&lt;p&gt;É importante salientar o que o tipo da sequência resultante não precisa ser o mesmo da sequência de entrada. Você tem uma lista de objetos do tipo “Employee” e precisa recuperar os seus ids, na forma de uma sequência de ints? Fácil:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employees&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EmployeeRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;All&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ids&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;filter&quot;&gt;Filter&lt;/h2&gt;

&lt;p&gt;A operação filter é, sem dúvida, a mais fácil das três. Ela tem um nome bastante intuitivo, e a necessidade de se filtrar coisas é algo tão comum na programação que eu tenho certeza de que você adivinhou o que ela faz só pelo nome (caso já não soubesse antes).&lt;/p&gt;

&lt;p&gt;Mesmo assim, vamos defini-la. A operação filter filtra uma sequência, retornando uma nova sequência contendo apenas os itens aprovados por um ou mais critérios especificados.&lt;/p&gt;

&lt;h3 id=&quot;o-jeito-imperativo&quot;&gt;O Jeito Imperativo&lt;/h3&gt;

&lt;p&gt;Já que nós usamos o exemplo de “employees” na seção anterior, vamos continuar dentro do mesmo tema. Digamos que você precise recuperar uma lista com os funcionários que tenham tirado pelo menos três dias de atestado médico.&lt;/p&gt;

&lt;p&gt;Em um estilo mais procedura, você provavelmente escreveria algo assim:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetEmployeesWithAtLeastNSickdays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
	
	    &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sickdays&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;   
	    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
	    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Eu não acho que o código acima esteja errado. O nome do método é um pouco longo, porém bastante descritivo. O código faz o que promete. E a legibilidade está boa.&lt;/p&gt;

&lt;p&gt;Mas da mesma forma que no exemplo anterior, nós poderíamos fazer o argumento de que o código está poluído demais Podemos dizer quem, na prática, a única linha que faz algo relacionado à lógica do problema é o teste do if. Todas as outras linhas são código boilerplate. Será que a abordagem funcional consegue melhorar a situação?&lt;/p&gt;

&lt;h3 id=&quot;a-maneira-funcional-1&quot;&gt;A Maneira Funcional&lt;/h3&gt;

&lt;p&gt;Vamos reescrever o código acima usando LINQ:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetEmployeesWithAtLeastNSickdays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SickDays&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here we use the “Where” extension method, passing the filtering criterium as a delegate. To be honest, the outer method became not very useful since it just delegates the work. In real life, I’d get rid of it.&lt;/p&gt;

&lt;p&gt;Aqui nós usamos o método “Here”, passando o critério de filtragem como parâmetro. Para ser honesto, o método de fora não é tão útil, já que ele só delega o trabalho para o método do LINQ. Na vida real, em código de produção, eu jogaria ele fora.&lt;/p&gt;

&lt;h2 id=&quot;reduce&quot;&gt;Reduce&lt;/h2&gt;

&lt;p&gt;Geralmente, a operação reduce é a que algumas pessoas costumam ter dificuldade entendendo. Mas não tem nada de difícil. Pense dessa forma: você tem uma sequência de alguma coisa, e também tem uma função que recebe duas dessas coisas e retorna uma.&lt;/p&gt;

&lt;p&gt;Então você começa a aplicar a função. Você a aplica nos dois primeiros elementos na sequência e guarda o resultado. Então aplica de novo, com o resultado e o terceiro elemento. Depois faz a mesma coisa, aplicando a função ao resultado da última etapa e o quarto elemento, e assim sucessivamente.&lt;/p&gt;

&lt;p&gt;O exemplo clássico do reduce é a soma de uma lista de números, então é exatamente isso que vamos fazer.&lt;/p&gt;

&lt;h3 id=&quot;o-modo-imperativo&quot;&gt;O Modo Imperativo&lt;/h3&gt;

&lt;p&gt;Suponha que temos que somar um punhado de números inteiros. Poderíamos fazer assim:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
	    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A essa altura do campeonato você já pode até prever o que eu tenho a dizer a respeito desse código: não está necessariamente errado, mas é pouco flexível e cheio de ruído. Mas a programação funcional pode nos salvar.&lt;/p&gt;

&lt;h3 id=&quot;o-modo-funcional&quot;&gt;O Modo Funcional&lt;/h3&gt;

&lt;p&gt;No .NET framework, a operação “reduce” toma a forma do método de extensão “Aggregate”. Dessa vez, vou me livrar do método externo e escrever a solução usando LINQ de uma vez:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Aggregate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A aparência disso é um pouco mais complexa, mas não se assuste. Nesse caso, nós estamos apenas passando uma função que recebe dois parâmetros ao invés de um só, como nos exemplos anteriores. Precisa ser assim, já que a função precisa ser aplicada a dois elementos da sequência cada vez.&lt;/p&gt;

&lt;p&gt;But as it turns out, there’s an even easier way of solving this particular problem (adding a bunch of numbers). Since summing a sequence of numbers is such a common use case, there’s a dedicated method to do just that. It’s called, not surprisingly, “Sum”:&lt;/p&gt;

&lt;p&gt;Mas na verdade tem uma maneira ainda mais fácil de resolver esse problema em particular (somar vários números).
Sendo esse um caso de uso tão comum, o framework disponibiliza um método dedicado para fazer só isso. O qual, surpreendendo a um total de zero pessoas, é chamado de “Sum”:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Para que serve o “Aggregate”, então? Adicionar uma lista de números é apenas uma das muitas aplicações do reduce, mas você pode usá-lo com qualquer operação binária, como concatenação de strings ou a soma de tipos customizados.&lt;/p&gt;

&lt;h2 id=&quot;o-veredito-a-abordagem-funcional-é-melhor&quot;&gt;O Veredito: A Abordagem Funcional é Melhor?&lt;/h2&gt;

&lt;p&gt;Após esses exemplos, você talvez esteja em dúvida se o jeito funcional de fazer as coisas é realmente melhor. Seria extremamente difícil definir o que “melhor” significa, então nem vou tentar. Vamos considerar outro critério: legibilidade.&lt;/p&gt;

&lt;p&gt;Apesar de sabermos que legibilidade de código &lt;a href=&quot;https://blog.submain.com/evaluate-code-readability/&quot;&gt;também pode ser bastante subjetiva,&lt;/a&gt; eu diria que sim, os exemplos funcionais são mais legíveis. Imagine que nós recuperar e somar todos os salários dos funcionários com mais de cinco anos de casa. Nós poderíamos facilmente fazer isso usando um loop, dentro do qual nós testaríamos a condição e acumularíamos o salário em uma variável, caso o teste tenha retornado verdadeiro.&lt;/p&gt;

&lt;p&gt;Ou poderíamos escrever isso:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CompanyTimeInYears&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Salary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Eu honestamente acredito que essa versão é mais legível (e melhor, em geral) que a abordagem procedural. É mais declarativa. Ela demonstra a intenção do &lt;strong&gt;que&lt;/strong&gt; estamos tentando fazer sem se preocupar tanto com o &lt;strong&gt;como&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It almost reads like natural language: “The list of employees where their time in the company is greater than five years, select their salary and sum them”.&lt;/p&gt;

&lt;p&gt;Para quem entende inglês, quase parece linguagem natural: “Da lista de todos os funcionários, onde o tempo de empresa é mais de cinco anos, selecione o salário e some.”&lt;/p&gt;

&lt;h2 id=&quot;uso-um-pouco-de-tempero-funcional-e-deixe-seu-código-mais-saboroso&quot;&gt;Uso Um Pouco de Tempero Funcional e Deixe Seu Código Mais Saboroso&lt;/h2&gt;

&lt;p&gt;Muitas pessoas usam LINQ por anos sem nem perceber que estão usando conceitos de programação funcional. Eu enxergo isso como prova de que a programação funcional não está além das capacidades do típico desenvolvedor enterprise que não tem uma sólida formação matemática.&lt;/p&gt;

&lt;p&gt;Alguns dos conceitos apresentados aqui não são novos nem restritos à programação funcional. Os benefícios de distinguir entre funções que causam efeitos colaterais e as que não causam é a base de princípios como &lt;a href=&quot;https://en.wikipedia.org/wiki/Command%E2%80%93query_separation&quot;&gt;command-query separation (CQS)&lt;/a&gt;, por exemplo.&lt;/p&gt;

&lt;p&gt;O objetivo desse post não é ensinar programação funcional para ninguém. Isso está além das minhas capacidades, já que eu ainda estou aprendendo. E além disso, &lt;a href=&quot;https://fsharpforfunandprofit.com&quot;&gt;existem ótimos recursos para aprender programação funcional, para aqueles que se interessarem&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ao contrário, o que eu queria fazer aqui era mostrar um pouco do que um estilo funcional pode fazer com seu código: torná-lo mais expressivo, conciso e declarativo. Agora depende de você aplicar o estilo funcional ao código que você escreve.&lt;/p&gt;
</description>
        <pubDate>Tue, 22 Jan 2019 00:00:00 +0000</pubDate>
        <link>https://carlosschults.net/pt/programacao-funcional-csharp/</link>
        <guid isPermaLink="true">https://carlosschults.net/pt/programacao-funcional-csharp/</guid>
        
        <category>csharp</category>
        
        <category>boas praticas</category>
        
        <category>programacao funcional</category>
        
        
      </item>
    
      <item>
        <title>Value Objects: Uma Técnica Para Código Auto-Documentado E Menos Erros</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1540385528/value-object-tool/value-object-tool-1038x437.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;*NOTA: Eu escrevi este post originalmente para o blog da NDepend. Você pode &lt;a href=&quot;https://blog.ndepend.com/value-objects-tool-self-documented-code-fewer-errors/&quot;&gt;conferir o artigo original, em inglês, no site deles&lt;/a&gt;. *&lt;/p&gt;

&lt;p&gt;Você já ouviu falar de &lt;em&gt;value objects&lt;/em&gt;? Eu imagino que sim. Apesar de não se falar tanto a respeito deles como eu gostaria, eles ainda são mencionados o bastante para que muitos desenvolvedores tenham no mínimo alguma familiaridade com o termo.&lt;/p&gt;

&lt;p&gt;Porém, “alguma familiaridade” não é bom o bastante. Então é isso que vamos consertar com esse post. Hoje vamos aprender o que &lt;em&gt;value objects&lt;/em&gt; são e como você, por meio do C#, pode usar todo o poder deles para tornar seu código mais claro, auto-documentável e menos propenso a erros.&lt;/p&gt;

&lt;h2 id=&quot;o-que-sãovalue-objects&quot;&gt;O que são Value Objects?&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Value objects&lt;/em&gt; são um dos blocos fundamentais do DDD (Domain Driven Design, ou Projeto Guiado por Domínio, em tradução livre), conforme proposto por Eric Evans em seu livro &lt;a href=&quot;https://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215&quot;&gt;Domain-Driven Design: Tackling Complexity in the Heart of Software.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Da maneira mais simples possível, um value object é um objeto que representa um valor. E sim, eu estou ciente de que isso soa óbvio e tedioso quando dito dessa forma. Então, por que tanto barulho por causa desse conceito?&lt;/p&gt;

&lt;h2 id=&quot;algumas-propriedades&quot;&gt;Algumas Propriedades&lt;/h2&gt;

&lt;p&gt;Eu acho que é mais fácil de entender value objects se eu parar de tentar explicar o que eles são e, ao invés disso, falar sobre as suas características.&lt;/p&gt;

&lt;h3 id=&quot;value-objects-não-têm-identidade&quot;&gt;Value Objects Não Têm Identidade&lt;/h3&gt;

&lt;p&gt;Eu acho que é justo dizer que a principal característica dos value objects é que eles não possuem &lt;em&gt;identidade&lt;/em&gt;. Mas o que isso realmente quer dizer na prática?&lt;/p&gt;

&lt;p&gt;Digamos que você vá até o caixa eletrônico mais próximo e deposite uma nota de 50 reais em sua conta. Então você dirige umas duas horas até outra cidade, entra em uma agência bancária, e saca 50 reais.&lt;/p&gt;

&lt;p&gt;Pergunta: faz alguma diferença para você o fato de que a nota que você tem em mãos não é a mesma que você depositou antes? É claro que não! Quando se trata de dinheiro o que as pessoas geralmente se importam é com seu valor, não com o veículo daquele valor.&lt;/p&gt;

&lt;p&gt;Em outras palavras, nós não damos a mínima para a &lt;em&gt;identidade&lt;/em&gt; daquela cédula em particular. A única coisa com a qual nós nos importamos é o seu valor.&lt;/p&gt;

&lt;p&gt;Não é coincidência o fato de que dinheiro é um exemplo clássico de value object na literatura.&lt;/p&gt;

&lt;h3 id=&quot;value-objects-são-imutáveis&quot;&gt;Value Objects São Imutáveis&lt;/h3&gt;

&lt;p&gt;Você consegue mudar o número cinco? Não. Não há nada que você (ou qualquer outra pessoa) possa fazer para mudar o valor do número 5. Se você adicionar 1, ele não muda. Você tem agora 6, que é um &lt;em&gt;outro&lt;/em&gt; número.&lt;/p&gt;

&lt;p&gt;É possível alterar uma data? Não, também não dá para fazer isso. Se você inicia com “2018-01-09” e adiciona um dia, você chega em “2018-01-10.” O valor original não é alterado de forma alguma. Na verdade, a imutabilidade de um value object é uma consequência direta do ponto anterior; como um value object não possui identidade, podemos dizer que o value object &lt;em&gt;é&lt;/em&gt; o seu valor. Portanto, nem sequer faz sentido falar sobre mudá-lo.&lt;/p&gt;

&lt;p&gt;A implicação disso no desenvolvimento é que value objects são intrinsecamente mais seguros e mais fáceis de serem compreendidos. Não tem perigo de mudar por acidente aquilo que você não pode mudar de jeito nenhum.&lt;/p&gt;

&lt;h3 id=&quot;value-objects-têm-igualdade-estrutural&quot;&gt;Value Objects Têm Igualdade Estrutural&lt;/h3&gt;
&lt;p&gt;Imagine que você pudesse magicamente transportar pessoas para qualquer lugar que você quisesse e, por alguma razão bizarra, você tenha decidido trocar dois homens chamados “João da Silva” durante a noite. Como você acha que as suas respectivas famílias reagiriam ao encontrar um estranho em casa na manhã seguinte?&lt;/p&gt;

&lt;p&gt;Obviamente, pessoas não são intercambiáveis, mesmo que compartilhem uma ou mais características. Mesmo se nossos dois “Joães” (Joões?) tivessem não apenas o mesmo nome, mas também a mesma altura, peso, cor de pele e cabelo, eles ainda seriam duas pessoas completamente diferentes. Mesmo gêmeos idênticos (ou clones, caso você esteja numa onda meio Black Mirror) continuam sendo pessoas completamente diferentes, apesar de serem tão iguais um ao outro quanto é possível ser.&lt;/p&gt;

&lt;p&gt;Por outro lado, as pessoas mudam constantemente durante a vida, mas continuam sendo as mesmas pessoas. Pelo menos (enquanto a gente não resolver filosofar com “&lt;a href=&quot;https://www.brainyquote.com/quotes/heraclitus_107157&quot;&gt;um homem não entra no mesmo rio duas vezes&lt;/a&gt;” e coisas do tipo).&lt;/p&gt;

&lt;p&gt;Você talvez esteja se perguntando se eu divaguei demais aqui, mas é tudo de propósito. Tudo isso serve apenas para ilustrar a diferença crucial entre entidades e value objects. Com as entidades, nós nos importamos com a  sua identidade, não com o valor de seus atributos. Com value objects, é exatamente o oposto.&lt;/p&gt;

&lt;p&gt;A implicação disso, em termos de programação, é que value objects tipicamente apresentam igualidade estrutural. Faz sentido compará-los pelos seus valores, não suas referências ou identidades. Então, quando for implementar um value object, sempre faça &lt;em&gt;override&lt;/em&gt; dos métodos &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Equals&lt;/code&gt; e &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetHashCode&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;o-que-você-ganha-com-isso&quot;&gt;O que Você Ganha Com Isso?&lt;/h2&gt;
&lt;p&gt;A essa altura você já deve ter uma boa ideia do que value objects são. O que ainda não está claro é: por que você deveria usá-los? Para responder isso, vamos dar uma olhada na linha de código a seguir:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;4.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Tem algo errado com a linha acima? Bom, eu poderia dar uma de &lt;em&gt;&lt;a href=&quot;https://starwars.wikia.com/wiki/Wookieepedia:Quote_of_the_Day/Archive/Obi-Wan_Kenobi&quot;&gt;Ben Kenobi&lt;/a&gt; &lt;/em&gt;e dizer que está errada “de um certo ponto de vista.” Mas eu não vou. Ao invés disso, vou dizer que está definitivamente, sem sombra de dúvidas, errada. Não importa que compila corretamente. Também não importa que funciona um pouco (ou até na maioria) do tempo.&lt;/p&gt;

&lt;p&gt;O problema aqui é o &lt;em&gt;code smell&lt;/em&gt; conhecido como “obsessão primitiva”, isto é, a modelagem de conceitos de domínio usando tipos primitivos. As próximas seções vão explicar melhor porque isso é um problema tão sério e como o uso de &lt;em&gt;value objects&lt;/em&gt; podem ajudar.&lt;/p&gt;

&lt;h3 id=&quot;value-objects-proporcionam-contexto&quot;&gt;Value Objects Proporcionam Contexto&lt;/h3&gt;

&lt;p&gt;Por que &lt;a href=&quot;https://blog.ndepend.com/easy-miss-code-smells/&quot;&gt;obsessão primitiva é algo ruim&lt;/a&gt;? Há várias razões, mas um dos principais problemas com a linha de código que você viu na seção anterior é que há uma informação extremamente importante faltando. Como você pode ver, o código atribui o valor 4.5 à variável. Mas 4.5 o que? Metros? Quilômetros? Milhas? Parsecs? Em outras palavras, falta uma &lt;strong&gt;unidade de medida&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Isso pode ser uma receita para o desastre. Tudo o que você precisa é alguém recuperar um valor do banco de dados ou de um arquivo, pensando que representa metros mas na verdade são quilômetros. Quando a pessoa resolve usar o valor em um cálculo, adicionando quilômetros com metros…silêncio. Você agora tem um programa que, no lugar de falhar rápido como deveria, se comporta de maneira errada silenciosamente enquanto corrompe dados e gera resultados inconsistentes. Ainda bem que você usa &lt;a href=&quot;https://carlosschults.net/pt/testes-unitarios-csharp-intro-tdd/&quot;&gt;testes unitários&lt;/a&gt;…certo?&lt;/p&gt;

&lt;p&gt;Tudo bem, nada impede você de colocar essa informação no próprio nome da variável:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;distanceInKilometers&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;4.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Certo, isso é um pouco melhor do que a versão anterior, mas ainda é uma solução muito frágil. A qualquer momento o valor pode ser atribuído a outra variável ou passado como argumento para uma função, e aí a unidade de medida é perdida.&lt;/p&gt;

&lt;p&gt;Usando value objects, você pode eliminar esse problema facilmente. Você teria apenas que escolher uma unidade para ser a representação interna do tipo - para distância, faz sentido usar o metro, por ser uma unidade do Sistema Internacional de Medidas. E aí você pode implementar diversos métodos estáticos para fabricar valores para cada unidade necessária:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;Distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FromMeters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;distance2&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;Distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FromKilometers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AreEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;distance2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Você poderia ainda sobrecarregar o operador “+” (ou criar um método &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Plus&lt;/code&gt;). Dessa forma seria possível somar duas distâncias que se originaram de diferentes unidades de medida já que a representação interna é a mesma.&lt;/p&gt;

&lt;h3 id=&quot;value-objects-apresentam-segurança-de-tipo&quot;&gt;Value Objects Apresentam Segurança de Tipo&lt;/h3&gt;

&lt;p&gt;Digamos que você tem um método com a seguinte assinatura:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;PerformSomeImportantCalculation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;temperature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;O que aconteceria se você cometesse um erro e invertesse os valores ao chamar o método? O programa iria silenciosamente se comportar erro, e você nem ficaria sabendo. Com sorte, a sua empresa teria um bom processo de garantia de qualidade que poderia pegar esse erro antes de chegar no ambiente de produção. Mas ficar dependendo de sorte não é lá uma grande estratégia, concorda?&lt;/p&gt;

&lt;p&gt;Pois acontece que esse é o tipo de problema que value objects são ótimos em evitar. Você teria apenas que usar topos customizados para cada conceito em vez de tipos primitivos:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;	&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;PerformSomeImportantCalculation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Distance&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;Temperature&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temperature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Dessa forma, se torna impossível passar os parâmetros na ordem errada: o compilador simplesmente não deixa!&lt;/p&gt;

&lt;h3 id=&quot;value-objects-evitam-duplicação-de-lógica-de-domínio&quot;&gt;Value Objects Evitam Duplicação de Lógica de Domínio&lt;/h3&gt;

&lt;p&gt;Quando você usa tipos primitivos para modelar conceitos de domínio, a tendência é você ter um monte de código relacionado a esses conceitos espalhados por toda a aplicação. Imagine que você está criando um programa que tem o conceito de uma placa de carro, e você está usando &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strings&lt;/code&gt; para representá-las. É claro que nem todas as strings válidas são placas válidas. Então o seu código acaba entupido de validações de placas de carro por todo lugar.&lt;/p&gt;

&lt;p&gt;Isso seria evitado criando uma classe chamada &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LicensePlate&lt;/code&gt; e fazendo todas as validações necessárias em seu construtor. Dessa forma você consolidaria todo o código de validação em apenas um lugar; se esse código precisar mudar no futuro, você tem que mudar em apenas um lugar.&lt;/p&gt;

&lt;h2 id=&quot;value-objects-e-tipos-de-valor-não-são-sinônimos&quot;&gt;Value Objects e Tipos de Valor Não São Sinônimos&lt;/h2&gt;

&lt;p&gt;Essa seção é necessária para clarificar um erro comum, que é confundir  value objects com o conceito de value types (tipos de valor) que existe no C#. É assim: na linguagem C# nós temos &lt;a href=&quot;https://carlosschults.net/pt/tipos-valor-referencia-em-csharp/&quot;&gt;duas categorias de tipos: tipos de referência e tipos de valor.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sim, não há nada que impeça você de usar structs (tipos de valor) para implementar value objects - exemplos na Base Class Library (BCL) seriam o tipo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DateTime&lt;/code&gt; ou os tipos numéricos primitivos. Mas você também pode usar classes tranquilamente.&lt;/p&gt;

&lt;p&gt;Por outro lado, structs não podem ser considerados value objects automaticamente. Por exemplo, embora manter structs imutáveis seja uma prática recomendada, eles não são imutáveis por padrão.&lt;/p&gt;

&lt;p&gt;Resumidamente, “tipo de valor” é um detalhe de implementação em C#/.NET e “value object” é um padrão de projeto. Mantenha isso em mente e consulte &lt;a href=&quot;https://docs.microsoft.com/pt-br/dotnet/standard/design-guidelines/choosing-between-class-and-struct&quot;&gt;as diretrizes de design da Microsoft&lt;/a&gt; e tudo vai ficar bem.&lt;/p&gt;

&lt;h2 id=&quot;value-objects-valem-a-pena&quot;&gt;Value Objects Valem a Pena!&lt;/h2&gt;

&lt;p&gt;O uso de value objects é uma técnica com um custo relativamente baixo que pode aumentar bastante a manutenibilidade e claridade do seu código. Colocando value objects em prática, você pode tornar seu código mais fácil de ser compreendido, criando interfaces que são auto-documentáveis, difíceis de serem usadas da maneira errada, e intrinsecamente &lt;em&gt;type-safe&lt;/em&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 24 Oct 2018 00:00:00 +0000</pubDate>
        <link>https://carlosschults.net/pt/value-objects-ferramenta/</link>
        <guid isPermaLink="true">https://carlosschults.net/pt/value-objects-ferramenta/</guid>
        
        <category>csharp</category>
        
        <category>boas-praticas</category>
        
        <category>ddd</category>
        
        <category>orientacao-a-objetos</category>
        
        <category>modelagem-de-software</category>
        
        
      </item>
    
      <item>
        <title>Boas Práticas De Programação Para Os Apressados</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1539703469/coding-best-practices-1038x437_ugnhab.jpg&quot; alt=&quot;&quot; /&gt;
Photo by Ales Nesetril on Unsplash&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTA: Este post foi originalmente escrito para o blog da the SubMain.  Você pode &lt;a href=&quot;https://blog.submain.com/coding-best-practices-short-time/&quot;&gt;ler o artigo original no site deles, em inglês&lt;/a&gt;. Quando estiver por lá, baixe e experimente o CodeIt.Right.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Um dos tópicos em desenvolvimento de software que me interessa muito são boas práticas de codificação. Eu estou sempre pesquisando e buscando maneiras de aperfeiçoar meu trabalho e entregar valor de forma rápida e consistente.&lt;/p&gt;

&lt;p&gt;Pode ser meio espinhoso definir o que “&lt;a href=&quot;https://www.daedtech.com/what-is-a-best-practice-in-software-development/&quot;&gt;é realmente uma boa prática”&lt;/a&gt;. Há pessoas que inclusive sugerem &lt;a href=&quot;https://dzone.com/articles/death-best-practices&quot;&gt;aposentar o termo!&lt;/a&gt; Mas um ponto em que praticamente todos concordam é: descobrir e implementar estratégias - não importa o nome que você coloca nelas - para melhorar o resultado do seu trabalho é algo que qualquer programadora ou programador que faz jus a esse nome deveria fazer continuamente.&lt;/p&gt;

&lt;p&gt;Claro, não existe almoço grátis. A adoção de uma boa prática leva tempo, o que você provavelmente não tem muito sobrando para começo de conversa. Isso sem mencionar a gerência, nem sempre muito animados a tentarem coisas novas.&lt;/p&gt;

&lt;p&gt;Então, o que fazer se a sua equipe de desenvolvimento está sofrendo com a baixa qualidade de uma base de código, mas não tem tempo para implementar as boas práticas que remediariam a situação?&lt;/p&gt;

&lt;p&gt;A resposta que eu ofereço é o que eu vou chamar de “pacote emergencial de boas práticas”: uma pequena lista de boas práticas de programação que você pode adotar em relativamente pouco tempo para levar sua equipe e sua aplicação do completo caos para um estado mais gerenciável.&lt;/p&gt;

&lt;p&gt;Sim, eu sei que há tantos conselhos sobre boas práticas por aí que é até difícil não se sentir sobrecarregado. Por causa disso, eu restringi a minha lista de boas práticas a itens que atendam aos seguintes critérios:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;As boas práticas precisam ser fundamentais, no sentido de que elas são blocos básicos a partir dos quais você pode implementar práticas mais sofisticadas depois.&lt;/li&gt;
  &lt;li&gt;Você pode adotá-las em relativamente pouco tempo. (Eu diria que uma semana é praticável.)&lt;/li&gt;
  &lt;li&gt;O seu custo é zero ou perto disso.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As práticas a seguir atendem os critérios listados. E sem mais enrolação, aqui está: meu pacote emergencial de boas práticas de codificação, com itens listados na ordem que eles deveriam ser adotados, começando pelo mais crítico.&lt;/p&gt;

&lt;h2 id=&quot;sistema-de-controle-de-versão&quot;&gt;Sistema de Controle de Versão&lt;/h2&gt;

&lt;p&gt;Eu trabalhei uma vez em uma empresa de desenvolvimento de software na qual nenhum sistema de controle de versão era usado. Os arquivos de código fonte ficavam em uma pasta compartilhada que qualquer desenvolvedor podia acessar. Qual era o processo usado para poder editar um arquivo? Você provavelmente adivinhou: nós criávamos uma cópia do arquivo e adicionávamos “_OLD” ao final do nome.&lt;/p&gt;

&lt;p&gt;Isso aconteceu há oito ou nove anos, o que significa que as coisas devem ter melhorado, certo? Bom, provavelmente melhoraram, um pouco, mas não totalmente. Ainda tem &lt;a href=&quot;https://twitter.com/_m_b_j_/status/938785388268806146&quot;&gt;empresas por aí que não usam controle de versão&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;como-proceder&quot;&gt;Como proceder?&lt;/h3&gt;

&lt;p&gt;De agora em diante, eu vou assumir que você concorda que versionamento é uma boa prática fundamental. Caso esse não seja o caso, há muitos recursos pela web afora explicando &lt;a href=&quot;https://www.git-tower.com/learn/git/ebook/en/desktop-gui/basics/what-is-version-control#start&quot;&gt;o que um versionador é&lt;/a&gt; e &lt;a href=&quot;https://www.atlassian.com/git/tutorials/what-is-version-control#benefits-of-version-control&quot;&gt;porque você deveria usar um.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Com isso resolvido, é hora de sermos mais específicos. Qual ferramenta usar? Como proceder com a sua adoção?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt; é uma escolha sólida. E apesar de ter uma curva de aprendizado mais acentuada para&lt;a href=&quot;https://carlosschults.net/en/git-basics-for-tfs-users&quot;&gt;quem já está mais acostumado com sistemas de controle de versão centralizados, como Subversion ou TFVC&lt;/a&gt;, Git é o padrão &lt;em&gt;de facto&lt;/em&gt; da indústria. Então, sem sombra de dúvidas, você deve aprender git. Não fazê-lo pode prejudicar a sua carreira no futuro.&lt;/p&gt;

&lt;p&gt;Mas é possível que o Git não seja a melhor escolha para o seu time &lt;strong&gt;agora&lt;/strong&gt;. Lembre-se, você não tem muito tempo. Nós precisamos que a sua equipe adote as boas práticas o mais rápido possível.&lt;/p&gt;

&lt;p&gt;Como nós podemos fazer isso? Suponha que você tenha experiência com &lt;a href=&quot;https://subversion.apache.org/&quot;&gt;Subversion&lt;/a&gt;, pois esse era o versionador usado na empresa que você trabalhou anteriormente. Sua experiência com Git, porém, é nenhuma. Se esse é o caso, eu diria que Subversion é a melhor escolha para você. Ter que aprender um novo sistema e ensiná-lo para seus colegas ao mesmo tempo que o coloca em vigor na empresa seria demais: você iria apenas se sobrecarregar.&lt;/p&gt;

&lt;h2 id=&quot;revisão-de-código&quot;&gt;Revisão de Código&lt;/h2&gt;

&lt;p&gt;Eu não vou mentir: eu sou um grande fã de revisão de código. E &lt;a href=&quot;https://www.codinghorror.com/blog/archives/000495.html&quot;&gt;eu não estou sozinho nisso.&lt;/a&gt;. Eu já testemunhei em primeira mão como um bom processo de revisão de código pode reduzir o número de problemas em uma aplicação, tornar o código mais consistente e, mais importante ainda, espalhar conhecimento por todo o time de desenvolvimento.&lt;/p&gt;

&lt;p&gt;E aqui vai uma ótima vantagem dessa prática: revisão de código é algo relativamente fácil de ser implementado. Comece da maneira mais simples possível, e então faça adaptações na sua abordagem conforme as necessidades aparecerem.&lt;/p&gt;

&lt;h3 id=&quot;minha-definição-de-revisão-de-código&quot;&gt;Minha Definição de Revisão de Código&lt;/h3&gt;

&lt;p&gt;Falar de revisão de código pode ser complicado. As pessoas às vezes tem ideias totalmente diferentes sobre o que a expressão significa. Então eu acho que uma clarificação se faz necessária.&lt;/p&gt;

&lt;p&gt;Eu &lt;strong&gt;não&lt;/strong&gt; sou a favor de um processo de revisão de código altamente burocrático e estressante, no qual o seu código é esmiuçado, em público, durante horas. Eu não acredito que envergonhar as pessoas em público é uma forma eficaz de aumentar a qualidade de um projeto. Ao contrário, &lt;a href=&quot;https://carlosschults.net/pt/revisao-codigo-vs-programacao-em-par/&quot;&gt;o tipo de revisão de código que eu defendo&lt;/a&gt; é um processo simples, geralmente iniciado ao submeter um pull request ou usando sua IDE favorita.&lt;/p&gt;

&lt;h3 id=&quot;como-proceder-1&quot;&gt;Como Proceder&lt;/h3&gt;

&lt;p&gt;Agora que nós estamos sintonizados em relação ao significado de “revisão de código”, a próxima pergunta é: “como implementar isso na prática?” Da maneira mais simples possível que funcione.&lt;/p&gt;

&lt;p&gt;Por exemplo, se a sua empresa desenvolve em .NET e usa TFS/TFVC, você pode começar &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ColinD.ColinsALMCheckinPoliciesVS2017&quot;&gt;instalando uma política de check-in&lt;/a&gt; que exige uma revisão de código para cada check-in. Se a sua equipe usa GitHub, vocês podem usar &lt;a href=&quot;https://help.github.com/articles/about-pull-requests/&quot;&gt;pull requests&lt;/a&gt;. Apenas comece a realizar revisões de código. Então, com o tempo, vá fazendo os ajustes e adaptações necessários.&lt;/p&gt;

&lt;p&gt;Estas são algumas das questões que podem surgir ao refinar o seu processo:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Qual é o objetivo da revisão de código?&lt;/strong&gt; Estamos procurando por bugs? Tentando melhorar a legibilidade?Checando se o código adere ao padrão de codificação da empresa?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Como separamos “sugestões” de “impedimentos”?&lt;/strong&gt; É OK recusar a alteração de alguém por causa de uma indentação ruim ou um nome de variável ligeiramente equivocado?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;O que fazer se revisor e revisado não conseguem chegar a um consenso?&lt;/strong&gt; Trazer um mediador para dar a palavra final? E quem seria essa pessoa?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A resposta para todas as perguntas acima podem ser encontradas na &lt;strong&gt;automação&lt;/strong&gt;. Uma boa parte do desconforto das revisões de códigos pode ser eliminada quando você emprega um &lt;a href=&quot;https://blog.submain.com/different-styles-code-analyzer/&quot;&gt;analisador de código&lt;/a&gt; para lidar com as partes automatizáveis do processo.&lt;/p&gt;

&lt;p&gt;Por exemplo, &lt;a href=&quot;https://submain.com/codeit.right/features&quot;&gt;SubMain possui um produto chamado CodeIt.Right&lt;/a&gt; que oferece feedback em tempo real de dentro do Visual Studio, lhe alertando de possíveis problemas de codificação, inclusive corrigindo problemas quando possível.&lt;/p&gt;

&lt;p&gt;Ao abraçar a automação, você deixa as pessoas da equipe livres para se preocuparem com questões de mais alto nível durante as revisões, como claridade do código ou decisões arquiteturais.&lt;/p&gt;

&lt;h2 id=&quot;builds-automatizados&quot;&gt;Builds Automatizados&lt;/h2&gt;

&lt;p&gt;Talvez você esteja pensando que eu me equivoquei nessa seção. Afinal de contas, sequer faz sentido falar de builds automatizados sem mencionar testes automatizados?&lt;/p&gt;

&lt;p&gt;Eu vou argumentar que sim, faz sentido, por uma razão muito simples: builds automatizados eliminam o famoso problema de “&lt;a href=&quot;https://blog.codinghorror.com/the-works-on-my-machine-certification-program/&quot;&gt;na minha máquina funciona&lt;/a&gt;”. &lt;/p&gt;

&lt;p&gt;Ter um local central onde os builds são feitos joga luz em vários tipos de problemas, de mal gerenciamento de dependências a falta de disciplina em testes.&lt;/p&gt;

&lt;h3 id=&quot;como-proceder-2&quot;&gt;Como Proceder&lt;/h3&gt;

&lt;p&gt;Meu conselho aqui é o mesmo que na seção anterior: faça a coisa mais simples possível que funcione.&lt;/p&gt;

&lt;p&gt;Se sua equipe já usa TFS, aprenda como &lt;a href=&quot;https://docs.microsoft.com/en-us/vsts/build-release/actions/ci-cd-part-1&quot;&gt;criar uma definição de build&lt;/a&gt;. Se os seus projetos estão no GitHub, dê uma olhada no &lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis CI.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Com o tempo, você vai melhorando a sua estratégia. Lembra dos analisadores de código que eu mencionei anteriormente? É possível integrá-los no seu processo de build. &lt;a href=&quot;https://carlosschults.net/pt/testes-unitarios-iniciantes-parte1&quot;&gt;Testes unitários&lt;/a&gt; e outros tipos de testes automatizados também são uma valiosa adição.&lt;/p&gt;

&lt;p&gt;E por falar nisso…&lt;/p&gt;

&lt;h2 id=&quot;ausências-notáveis&quot;&gt;Ausências Notáveis&lt;/h2&gt;

&lt;p&gt;Você talvez tenha se surpreendido por minha lista de boas práticas não incluir testes unitários, mesmo eu sendo um defensor da importância de testes automatizados para a qualidade de uma aplicação. Qual é a razão disso?&lt;/p&gt;

&lt;p&gt;Infelizmente, adicionar testes unitários a uma aplicação legada é muito difícil, ao ponto de existir até &lt;a href=&quot;https://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052/ref=sr_1_1?ie=UTF8&amp;amp;qid=1515443597&amp;amp;sr=8-1&amp;amp;keywords=working+effectively+with+legacy+code&quot;&gt;um livro famoso&lt;/a&gt; que foca apenas nisso. Não é uma tarefa fácil de se fazer em pouco tempo.&lt;/p&gt;

&lt;p&gt;Também é possível que muitos de vocês esperavam que eu falasse sobre código limpo ou os princípios &lt;a href=&quot;https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)&quot;&gt;SOLID&lt;/a&gt;. Eu encorajo vocês a lerem e pesquisarem sobre esses tópicos, mas eu não acredito que eles encaixam no propósito do post de hoje. Como o próprio nome deixa claro, eles são &lt;em&gt;princípios&lt;/em&gt;. Pense neles como diretrizes filosóficas. Úteis? Claro. Mas não tão fáceis de decompor em conselhos pequenos, simples e acionáveis.&lt;/p&gt;

&lt;h2 id=&quot;implemente-essas-práticas-para-ontem&quot;&gt;Implemente Essas Práticas Para Ontem!&lt;/h2&gt;

&lt;p&gt;É possível que vários de vocês tenha achado essas práticas extremamente básicas e não dignas de um post. “Quem é que não usa controle de versão em 2018???”&lt;/p&gt;

&lt;p&gt;Bom, não é tão difícil assim encontrar evidência (anedótica, mas ainda assim) que &lt;a href=&quot;https://softwareengineering.stackexchange.com/questions/65931/are-there-serious-companies-that-dont-use-version-control-and-continuous-integr&quot;&gt;as coisas ainda não são tão perfeitas&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Acreditar que mesmo práticas tão fundamentais como versionamento de código ou testes automatizados são aplicadas universalmente é mais ingenuidade do que talvez queremos admitir.&lt;/p&gt;

&lt;p&gt;Para o restante de vocês, eu espero que essa lista seja útil.&lt;/p&gt;

&lt;p&gt;Você já deve ter ouvido o ditado. “Quando estiver em um buraco, para de cavar.” E é exatamente esse o tipo de ajuda que eu quis oferecer com esse post: correções rápidas e fáceis, para que você e as demais pessoas em seu tipo possam recuperar o suficiente de sanidade para poderem focar e recuperar o controle de sua aplicação, garantido sua saúde a longo prazo.&lt;/p&gt;
</description>
        <pubDate>Tue, 16 Oct 2018 00:00:00 +0000</pubDate>
        <link>https://carlosschults.net/pt/boas-praticas-sem-tempo/</link>
        <guid isPermaLink="true">https://carlosschults.net/pt/boas-praticas-sem-tempo/</guid>
        
        <category>csharp</category>
        
        <category>boas praticas</category>
        
        
      </item>
    
      <item>
        <title>4 Erros Comuns Com Data e Hora no C# — E como evitá-los</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1531165684/4-datetime-mistakes-1038x437_nm6csc.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTA: Eu escrevi este post originalmente para o blog da SubMain.  Você pode &lt;a href=&quot;https://blog.submain.com/4-common-datetime-mistakes-c-avoid/&quot;&gt;conferir o original no site deles, em inglês&lt;/a&gt;. Enquanto estiver por lá, dê uma conferida no CodeIt.Right, uma ferramenta que pode lhe ajudar com problemas relacionados a tempo e muitos outros.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Você se lembra daqueles posts no estilo “inverdades que programadores acreditam sobre &lt;em&gt;X&lt;/em&gt;” que ficaram bastante populares em blogs de software há alguns anos? O primeiro foi sobre &lt;a href=&quot;https://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/&quot;&gt;nomes&lt;/a&gt;, mas logo apareceram vários outros, cobrindo tópicos como &lt;a href=&quot;https://www.mjt.me.uk/posts/falsehoods-programmers-believe-about-addresses/&quot;&gt;endereços&lt;/a&gt;, &lt;a href=&quot;https://wiesmann.codiferes.net/wordpress/?p=15187&amp;amp;lang=en&quot;&gt;geografia&lt;/a&gt; e &lt;a href=&quot;https://wiesmann.codiferes.net/wordpress/?p=22201&quot;&gt;compras online&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;O meu favorito era &lt;a href=&quot;https://infiniteundo.com/post/25326999628/falsehoods-programmers-believe-about-time&quot;&gt;o post sobre tempo&lt;/a&gt;. Até esse ponto, eu não havia pensado profundamente sobre tempo e e suas intricacies, e eu fiquei intrigado em saber que um domínio tão fundamental pudesse ser um terreno tão fértil para bugs e confusões.&lt;/p&gt;

&lt;p&gt;Agora, mesmo eu tendo gostado do post, eu vejo um problema com ele: o post lista vários suposições erradas, e basicamente para por aí. Quem lê o artigo provavelmente termina se perguntando:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Por que essas suposições são falsas?&lt;/li&gt;
  &lt;li&gt;Qual é a probabilidade de eu me dar mal por causa dessas inverdades?&lt;/li&gt;
  &lt;li&gt;Qual é a maneira adequada de lidar com esses problemas?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O artigo é interessante, mas eu acho que faria sentido oferecer informações um pouco mais acionáveis.&lt;/p&gt;

&lt;p&gt;E é exatamente esse é o objetivo do post de hoje. Eu vou mostrar 4 erros comuns que as pessoas cometem ao lidar com tempo em C#/.NET. E não para por aí. Eu também vou mostrar o que você deve fazer para evitar esses erros e tornar seu código mais seguro e mais fácil de ser compreendido.&lt;/p&gt;

&lt;h2 id=&quot;1-calculando-durações-de-maneira-ingênua&quot;&gt;1. Calculando Durações de Maneira Ingênua&lt;/h2&gt;

&lt;p&gt;Considere o código abaixo:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/3e18612b9a9238382b6d4fa3c574a231.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Ele funciona corretamente? Depende de onde e quando ele será executado.&lt;/p&gt;

&lt;p&gt;Quando você usa &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DateTime.Now&lt;/code&gt;, o valor que você obtém representa a data e hora locais em relação à máquina atual (ou seja, a propriedade &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kind&lt;/code&gt; está configurada para &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Local&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Se o lugar que você mora observa Horário de Verão, então você sabe que existe um dia do ano no qual você deve adiantar os relógios em uma certa medida (geralmente 1 hora, embora existam lugares que ajustam por outras quantidades). E é claro, existe também um dia no qual o oposto acontece.&lt;/p&gt;

&lt;p&gt;Agora imagine o que seguinte: hoje é 12 de março de 2017, e você more na cidade de Nova York. Você começa a usar o programa acima. O método &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StartMatch()&lt;/code&gt; é executado exatamente às 13h. Uma hora e quinze minutos mais tarde, o método &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EndMatch&lt;/code&gt; é executado. O cálculo é realizado e o texto abaixo é exibido:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Duration of the match: 00:02:15&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Eu imagino que você compreendeu o que aconteceu aqui: quando os relógios estavam prestes a marcar 14h, o Horário de Verão entrou em efeito, movendo-os diretamente para 15h. Então o método &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EndMatch&lt;/code&gt; recuperou o horário atual, somando uma hora adicional ao cálculo. Se o experimento tivesse acontecido no fim do Horário de Verão, o resultado seria apenas 15 minutos!&lt;/p&gt;

&lt;p&gt;Sim, o código mostrado é apenas um exemplo, uma brincadeira. Mas e se fosse algo mais sério? Uma aplicação de folha de pagamento, digamos. Você gostaria de pagar o valor errado a um funcionário?&lt;/p&gt;

&lt;h3 id=&quot;o-que-fazer&quot;&gt;O que fazer?&lt;/h3&gt;

&lt;p&gt;Quando precisar calcular a duração de atividades humanas, use UTC para os tempos de início e fim. Dessa forma, você será capaz de &lt;strong&gt;referenciar de maneira não ambígua um ponto específico no tempo&lt;/strong&gt;. Ao invés de usar a propriedade &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Now&lt;/code&gt;, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UtcNow&lt;/code&gt; para recuperar a data e hora já em formato UTC para realizar os cálculos:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/82492845edaa8f8fc16c646ed2bbcf2a.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Mas e se os valores &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DateTime&lt;/code&gt; que você tem já são do tipo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Local&lt;/code&gt;? Nesse caso, você deve usar o método &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ToUniversalTime()&lt;/code&gt; para convertê-los para UTC:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/58837695af07386836753ef6541233aa.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;uma-rápida-advertência-sobre-touniversaltime&quot;&gt;Uma Rápida Advertência Sobre &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ToUniversalTime()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;O uso do método &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ToUniversalTime()&lt;/code&gt; - e seu irmão, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ToLocalTime()&lt;/code&gt; - pode ser um pouco chato. O problema é que esses métodos fazem suposições sobre o que você quer baseados no valor da propriedade &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kind&lt;/code&gt; do objeto datetime que você tem, o que pode trazer resultados inesperados.&lt;/p&gt;

&lt;p&gt;Ao chamar &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ToUniversalTime()&lt;/code&gt;, uma das seguintes coisas vai acontecer:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Se &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kind&lt;/code&gt; estiver configurado como UTC, o mesmo valor é retornado.&lt;/li&gt;
  &lt;li&gt;Por outro lado, se estiver configurado como &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Local&lt;/code&gt;, então o valor correspondente em UTC é retornado.&lt;/li&gt;
  &lt;li&gt;Finalmente, se &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kind&lt;/code&gt; estiver como &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Unspecified&lt;/code&gt;, &lt;strong&gt;então é assumido que o objeto sempre teve a intenção de ser local,&lt;/strong&gt;, e você recebe o valor correspondente à conversão para UTC.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O problema aqui é que &lt;a href=&quot;https://codeofmatt.com/2013/04/25/the-case-against-datetime-now/#localkindsdontroundtrip&quot;&gt;valores de data/hora locais não não “transportáveis”&lt;/a&gt;. Como assim? Eles são locais enquanto eles permanecerem no contexto da máquina atual. Se você salva um datetime local para um banco de dados e depois o recupera de lá, a informação de que ele é local se perde: agora ele é &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Unspecified&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Assim, o seguinte cenário pode acontecer:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Você recupera a data e hora atuais usando &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DateTime.UtcNow&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Você salva esse valor no banco de dados.&lt;/li&gt;
  &lt;li&gt;Outra parte do código recupera esse valor. Sem estar ciente de que o valor já está em UTC, chama o método &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ToUniversalTime()&lt;/code&gt; na instância.&lt;/li&gt;
  &lt;li&gt;Como o valor recuperado do banco possui o tipo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Unspecified&lt;/code&gt;, o método vai tratá-lo como local e realizar uma conversão desnecessária, gerando um valor errado.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Como evitar que isso aconteça? Uma prática recomendada é usar UTC para armazenar o tempo em que um evento aconteceu. Minha sugestão é seguir esse conselho e também esse fato bem explícito. Coloque o sufixo “UTC” em cada coluna de tabela no banco de dados e também em nomes de propriedades que se referem a um valor em UTC. Ao invés de “Inclusao”, use “InclusaoUTC” e assim por diante. Não é tão bonito, mas com certeza é mais claro.&lt;/p&gt;

&lt;h2 id=&quot;2-não-usar-utc-quando-deveria-e-vice-versa&quot;&gt;2. Não Usar UTC Quando Deveria (e vice-versa)&lt;/h2&gt;

&lt;p&gt;Nós podemos definir isso como uma regra universal: use UTC para registrar quando eventos aconteceram. Ao logar, auditar, e registrar todo tipo de &lt;em&gt;timestamps&lt;/em&gt; na sua aplicação, UTC é a resposta.&lt;/p&gt;

&lt;p&gt;Então, é só usar UTC em todo lugar! Certo? Não, não tão rápido.&lt;/p&gt;

&lt;p&gt;Digamos que você precisa ser capaz de reconstruir o tempo local - na perspectiva do usuário - de quando algo aconteceu, e a única informação que você tem é um &lt;em&gt;timestamp&lt;/em&gt; em UTC. Mal dia.&lt;/p&gt;

&lt;p&gt;Em casos assim, faria mais sentido (a) registrar o momento em UTC e gravar também o fuso horário do usuário ou (b) usar o tipo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DateTimeOffset&lt;/code&gt;, que armazena a data/hora local junto com o deslocamento, ou &lt;em&gt;offset&lt;/em&gt;, para UTC, permitindo que você reconstrua o valor em UTC quando precisar.&lt;/p&gt;

&lt;p&gt;Outro caso de uso comum para o qual UTC não é a solução correta é  &lt;a href=&quot;https://stackoverflow.com/questions/19626177/how-to-store-repeating-dates-keeping-in-mind-daylight-savings-time?noredirect=1&amp;amp;lq=1&quot;&gt;o agendamento de eventos locais no futuro&lt;/a&gt;. Você não quer que seu alarme acorde você uma hora mais cedo ou uma hora mais tarde nos dias de transição do Horário de Verão, certo? Pois é exatamente isso que aconteceria se você configurasse o seu alarme pelo horário UTC.&lt;/p&gt;

&lt;h2 id=&quot;3-não-validar-entrada-dos-usuários&quot;&gt;3. Não Validar Entrada dos Usuários&lt;/h2&gt;

&lt;p&gt;Imagine que você criou uma aplicação desktop simples que permite que usuários configurem lembretes. A pessoa informa a data e hora que quer receber o lembrete, clica em um botão, e pronto.&lt;/p&gt;

&lt;p&gt;Tudo parece estar funcionando direito até que alguém do Brasil envia um e-mail para você, reclamando que o lembrete que ela configurou para 15 de outubro às 0h15 não funcionou. O que será que aconteceu?&lt;/p&gt;

&lt;h3 id=&quot;o-horário-de-verão-contra-ataca&quot;&gt;O Horário de Verão Contra Ataca&lt;/h3&gt;

&lt;p&gt;O vilão aqui é o bom e velho Horário de Verão novamente. Em 2017, o Horário de Verão no Brasil começou à meia-noite do dia 15 de outubro. Então, a combinação de data e hora que a usuária informou &lt;strong&gt;simplesmente não existe em seu fuso-horário!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;É claro que o problema oposto também é possível. Quando o Horário de Verão chega ao fim e os relógios são atrasados, isso &lt;strong&gt;gera horas ambíguas&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;qual-é-a-solução&quot;&gt;Qual É A Solução?&lt;/h3&gt;

&lt;p&gt;Como lidar com esse tipo de problema no C#? A classe &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TimeZoneInfo&lt;/code&gt; pode lhe salvar. Ela serve para representar um fuso horário e também oferece métodos para verificar se um determinado objeto &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DateTime&lt;/code&gt; é válido:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/carlosschults/2b94d57390b3518294730c01003f159c.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Mas o que fazer então? O que deveria substituir os comentários “do something” nos trechos acima?&lt;/p&gt;

&lt;p&gt;Você poderia mostrar uma mensagem dizendo que a data informada é inválida. Ou você poderia escolher outra data para a pessoa automaticamente.&lt;/p&gt;

&lt;p&gt;Vamos abordar o caso das horas inválidas primeiro. Suas opções são: mover para frente ou para trás. É uma decisão meio arbitrária, então qual você deve escolher? Por exemplo, o app do Google Calendar no Android move para frente. E até que faz sentido se você parar pra pensar. Isso é exatamente o que seus relógios fizeram devido ao horário de verão. Por que sua aplicação não pode fazer o mesmo?&lt;/p&gt;

&lt;p&gt;E no caso das horas ambíguas? Você também tem duas opções: escolher entre a primeira e segunda ocorrências. Novamente, é meio arbitrário, mas eu aconselho você a escolher a primeira ocorrência, pelo simples fato de tornar as coisas mais simples.&lt;/p&gt;

&lt;h2 id=&quot;4-confundir-um-offset--com-um-fuso-horário&quot;&gt;4. Confundir um &lt;em&gt;Offset&lt;/em&gt;  com um Fuso Horário&lt;/h2&gt;

&lt;p&gt;Considere o timestamp a seguir: 1995-07-14T13:05:00.0000000-03:00. Quando alguém pergunta o que o “-03:00” no final é chamado, muita gente responde “o fuso horário”.&lt;/p&gt;

&lt;p&gt;A questão é essa. Essas pessoas provavelmente assumem corretamente que o número representa o offset, ou deslocamento, em relação a UTC. Também é provável que elas sabem que podem reconstruir a hora correspondente em UTC por meio desse offset. (Muitos desenvolvedores não entendem que, em uma string assim, o offset já está aplicado: para obter o tempo em UTC, você deve inverter o sinal do offset. E só depois, aplicá-lo ao valor da hora).&lt;/p&gt;

&lt;p&gt;O erro está em achar que o offset é a única informação que um fuso horário representa. Mas não é. Um fuso horário é uma área geográfica, e contém muitas informações, tais como:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Um ou mais offsets. (Horário de verão existe, afinal de contas.)&lt;/li&gt;
  &lt;li&gt;As datas nas quais as transições do horário de verão acontecem. (As quais podem mudar e mudam, sempre que os políticos resolvem).&lt;/li&gt;
  &lt;li&gt;A quantidade de tempo pelo qual os relógios são atrasados ou adiantados na transição. (Não é uma hora em todo lugar.)&lt;/li&gt;
  &lt;li&gt;O registro histórico das mudanças nas regras acima.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Em resumo: não tente adivinhar um fuso horário pelo offset. Você vai errar a maioria das vezes.&lt;/p&gt;

&lt;h2 id=&quot;quer-aprender-sobre-tempo-já-não-era-sem-tempo&quot;&gt;Quer aprender sobre tempo? Já não era sem tempo!&lt;/h2&gt;

&lt;p&gt;Esta lista não é de forma alguma exausitiva. Eu apenas quis oferecer a vocês uma introdução ao fascinante e meio bizarro mundo dos problemas com hora e data em programação. Há muitos recursos valiosos por aí, como&lt;a href=&quot;https://stackoverflow.com/tags/timezone/info&quot;&gt;a tag time zone no Stack Overflow&lt;/a&gt; ou blogs como &lt;a href=&quot;https://codeblog.jonskeet.uk/&quot;&gt;o de Jon Skeet&lt;/a&gt; e &lt;a href=&quot;https://codeofmatt.com/&quot;&gt;o de Matt Johnson&lt;/a&gt; que são autores da popular biblioteca NodaTime.&lt;/p&gt;

&lt;p&gt;E finalmente, sempre use as ferramentas que estão à sua disposição. Por exemplo, &lt;a href=&quot;https://blog.submain.com/codeit-right-rules-explained-part-2/&quot;&gt;o produto da SubMain chamado CodeIt.Right&lt;/a&gt; tem uma regra que você a especificar um &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IFormatProvider&lt;/code&gt; em situações nas quais é opcional, o que pode acabar salvando você de bugs difíceis ao fazer tratamento de datas.&lt;/p&gt;
</description>
        <pubDate>Wed, 11 Jul 2018 00:00:00 +0000</pubDate>
        <link>https://carlosschults.net/pt/4-erros-comuns-datetime-csharp/</link>
        <guid isPermaLink="true">https://carlosschults.net/pt/4-erros-comuns-datetime-csharp/</guid>
        
        <category>csharp</category>
        
        <category>boas praticas</category>
        
        <category>tempo</category>
        
        
      </item>
    
      <item>
        <title>Revisão de Código vs Programação em Par: Qual a sua equipe deve escolher?</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/dz5ppacuo/image/upload/v1516470435/code-review-vs-pair-programming1038x437_w99q2t.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTA: Eu escrevi este post originalmente para o blog da SubMain. Você pode &lt;a href=&quot;https://blog.submain.com/code-review-vs-pair-programming-2/&quot;&gt;conferir o artigo original no site deles, em inglês&lt;/a&gt;. Enquanto estiver por lá, dê uma conferida no CodeIt.Right, uma ferramenta que pode lhe ajudar com automação de revisões de código.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Algumas semanas atrás, eu estava olhando o Twitter quando vi isso:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Pair Programming &amp;gt; Code Review&lt;/p&gt;&amp;mdash; Rafael Ponte (@rponte) &lt;a href=&quot;https://twitter.com/rponte/status/932390250848178176?ref_src=twsrc%5Etfw&quot;&gt;November 19, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;O que se seguiu foi uma breve discussão entre o autor e eu. Ele apresentou bons argumentos, mas eu continuei não convencido de que programação em par (&lt;em&gt;pair programming&lt;/em&gt;) era um vencedor tão óbvio.&lt;/p&gt;

&lt;p&gt;Como eu já havia implementado práticas de revisão de código (&lt;em&gt;code review&lt;/em&gt;) com sucesso e também pareado até certo ponto, eu não tinha dificuldades em ver como as duas práticas podem ser valiosas. Mas será que uma deles é claramente &lt;em&gt;melhor&lt;/em&gt; que a outra? Revisão de código e programação em par são intercambiáveis, ou há cenários em que um ou outro claramente se destaca?&lt;/p&gt;

&lt;p&gt;É o que vou responder hoje. Vamos lá.&lt;/p&gt;

&lt;h2 id=&quot;o-que-quero-dizer-por-revisão-de-código&quot;&gt;O que quero dizer por “Revisão de Código”&lt;/h2&gt;

&lt;p&gt;Imagine a seguinte cena: você é um(a) jovem programador(a) em seu primeiro trabalho com desenvolvimento de software. Após terminar sua primeira tarefa, você é convocado(a) a uma sala de reunião; lá você encontra o desenvolvedor líder e três desenvolvedores seniores. Um monitor enorme está ligado exibindo seu código. Hora da revisão!&lt;/p&gt;

&lt;p&gt;Durante duas horas e meia sofridas, seu código é julgado sem só enquanto você sua profusamente. Desde suas decisões de projeto até as mais triviais preferências estilísticas, nada escapa da enxurrada de críticas.&lt;/p&gt;

&lt;p&gt;É essa a cena exibida na sua mente quando você vê as palavras “revisão de código”?&lt;/p&gt;

&lt;p&gt;Boa notícias pra você, então. Este &lt;em&gt;não&lt;/em&gt; é o tipo de revisão de código sobre o qual estou falando. Ao invés, pense em um processo bem leve e informal. Você submete seu código para revisão criando um pull request ou mesmo usando alguma funcionalidade incorporada na sua IDE.&lt;/p&gt;

&lt;h3 id=&quot;a-parte-boa&quot;&gt;A parte boa&lt;/h3&gt;

&lt;p&gt;Após tocar brevemente no “o que” e no “como” de uma revisão de código, hora de abordarmos o “por que”. Por que o seu time deve adotar a prática? Quais são os benefícios?&lt;/p&gt;

&lt;p&gt;A primeira razão, não surpreendentemente, é &lt;strong&gt;detectar bugs&lt;/strong&gt;. Eu aposto que você é familiar com aquela velha pérola de sabedoria que diz que &lt;a href=&quot;https://www.cs.umd.edu/projects/SoftEng/ESEG/papers/82.78.pdf&quot;&gt;quanto mais tarde um defeito é encontrado, maior é o custo para sua resolução&lt;/a&gt;. Sendo assim, por que não usar um processo relativamente barato que pode encontrar &lt;a href=&quot;https://www.cs.umd.edu/projects/SoftEng/ESEG/papers/82.78.pdf&quot;&gt;até 60% dos defeitos&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Outra razão para a sua empresa adotar revisões de código: melhorar a &lt;strong&gt;legibilidade do código&lt;/strong&gt;. Tentar ler e entender um trecho novo de código frequentemente leva à descoberta de problemas como:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Nomes ruins.&lt;/li&gt;
  &lt;li&gt;Indentação errada.&lt;/li&gt;
  &lt;li&gt;Ocorrências de &lt;a href=&quot;https://en.wikipedia.org/wiki/Cargo_cult_programming&quot;&gt;programação cargo cult&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Código não idiomático.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O revisor também pode encontrar &lt;em&gt;corner cases&lt;/em&gt; que passaram despercebidos ou ajudar na avaliação de performance do código escrito.&lt;/p&gt;

&lt;p&gt;E chegamos à última razão. Uma revisão de código bem feita pode &lt;strong&gt;espalhar conhecimento pelo time.&lt;/strong&gt; Isso destrói ilhas de conhecimento na equipe, melhorando a qualidade final do produto.&lt;/p&gt;

&lt;h3 id=&quot;a-parte-ruim&quot;&gt;A parte ruim&lt;/h3&gt;

&lt;p&gt;Enquanto alguns dizem que a revisão de código é a &lt;a href=&quot;https://blog.codinghorror.com/code-reviews-just-do-it/&quot;&gt;prática mais importante que você deve adotar&lt;/a&gt; para aperfeiçoar seu código, &lt;a href=&quot;https://blog.nelhage.com/2010/06/i-hate-code-review/&quot;&gt;tal entusiasmo não é universal&lt;/a&gt;. Assim, não poderíamos deixar de falar também das potenciais desvantagens da prática.&lt;/p&gt;

&lt;p&gt;A queixa mais comum sobre revisão de código tem a ver com &lt;strong&gt;tempo&lt;/strong&gt;. Quando você envia algum código para revisão, você obviamente precisa esperar até que a revisão seja finalizada.&lt;/p&gt;

&lt;p&gt;O que fazer durante a espera? Idealmente, sua equipe deveria quebrar o trabalho disponível em unidades pequenas e discretas, que possam ser resolvidas de maneira mais ou menos independente. Nem sempre isso é prático, porém. E falando nisso, &lt;strong&gt;a própria troca constante de tarefas pode ser prejudicial para seu foco e produtividade&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Digamos que o Bruno gastou &lt;em&gt;x&lt;/em&gt; horas implementando uma funcionalidade. Então a Ana revisa o trabalho dele e diz que a implementação está completamente errada, e ele precisa refazer tudo. &lt;strong&gt;Aquelas &lt;em&gt;x&lt;/em&gt; horas de desenvolvimento acabaram de ir para o lixo&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Finalmente, às vezes as pessoas desperdiçam quantidades ridículas de tempo &lt;strong&gt;discutindo sobre detalhes estéticos inúteis&lt;/strong&gt;, como a posição das chaves, ou se devem ou não incluir um underscore no nome de um campo privado. Infelizmente, debates idiotas assim às vezes escalam para níveis que tornam o local de trabalho tóxico.&lt;/p&gt;

&lt;h2 id=&quot;programação-em-par-mais-que-uma-super-revisão-de-código&quot;&gt;Programação em Par: Mais que uma super revisão de código&lt;/h2&gt;

&lt;p&gt;Programação em par é uma técnica na qual duas pessoas colaboram no código juntas, na mesma estação de trabalho.&lt;/p&gt;

&lt;p&gt;Elas periodicamente revezam em dois papéis. O &lt;em&gt;piloto&lt;/em&gt; escreve o código, pensando em voz alta para explicar suas decisões e o que está pensando. O &lt;em&gt;navegador&lt;/em&gt; observa o piloto, dando feedback e opiniões em tempo real.&lt;/p&gt;

&lt;p&gt;Seria a programação em par nada mais que “&lt;em&gt;code review on steroids&lt;/em&gt;”, &lt;a href=&quot;https://blog.codinghorror.com/pair-programming-vs-code-reviews/&quot;&gt;como coloca Jeff Atwood&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Talvez não. Um dos princípios básicos das metologias ágeis é que o desenvolvimento de software se beneficia de ciclos de feedback curtos. Levando isso em consideração, trazer a revisão de código para o mais cedo possível no processo faria bastante sentido, por estar em harmonia com os princípios ágeis.&lt;/p&gt;

&lt;h3 id=&quot;a-parte-boa-1&quot;&gt;A parte boa&lt;/h3&gt;

&lt;p&gt;Não deveria ser surpresa que a programação em par compartilha vários dos benefícios da revisão de código, como detecção de bugs, melhoras na legibilidade do código e propagação de conhecimento pela equipe.&lt;/p&gt;

&lt;p&gt;Mas a programação em par também pode oferecer benefícios exclusivos, tais como:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Mais foco&lt;/strong&gt;. A presença de um colega ao lado pode exercer uma certa pressão, lhe mantendo motivado na tarefa a ser realizada.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ciclos de feedback mais curtos.&lt;/strong&gt;. Já que seu par está revisando seu código o tempo todo, existe um risco muito menor de desperdiçar tempo graças a feedback tardio.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Aumento no uso de outras boas práticas da Engenharia de Software&lt;/strong&gt;. Como sugerido por um estudo realizado na Universidade Estadual da Carolina do Norte, &lt;a href=&quot;https://collaboration.csc.ncsu.edu/laurie/Papers/ESE%20WilliamsPairProgramming_V2.pdf&quot;&gt;equipes usando programação em par tendem a usar mais práticas de desenvolvimento como testes unitários, integração contínua e a criação de padrões de código&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;a-parte-ruim-1&quot;&gt;A parte ruim&lt;/h3&gt;

&lt;p&gt;Assim como no caso da revisão de código, programação em par está longe de ser uma prática universalmente aceita. Enquanto muitas pessoas amam a prática, &lt;a href=&quot;https://web.archive.org/web/20110101145142/https://tersesystems.com/2010/12/29/where-pair-programming-fails-for-me&quot;&gt;outras não têm histórias tão felizes para contar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vamos começar com uma reclamação comum: programação em par &lt;strong&gt;pode ser extremamente cansativa&lt;/strong&gt;. Na verdade, não é incomum ourvir que &lt;a href=&quot;https://softwareengineering.stackexchange.com/a/9518&quot;&gt;parear é mais eficaz quando usado por blocos de tempo curtos — de 1 hora a 2 horas e meia.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Evidentemente, um número ímpar de integrantes na equipe não combina muito bem com programação em par. Mas um número flutuante de pessoal disponível é inevitável.&lt;/p&gt;

&lt;p&gt;O próximo item na nossa lista de problemas é o fato de que programação em par não é muito compatível com trabalho remoto. Você pode ter uma ideia melhor do problema após ouvir o que Daniel Kaplan, que escreveu “&lt;a href=&quot;https://builttoadapt.io/what-its-like-to-pair-for-a-year-86d048494324&quot;&gt;What It’s Like to Pair for a Year&lt;/a&gt;,” tem a dizer sobre programação em par:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;These scheduling interruptions happen, but on a typical day we avoid them by having the pairs show up at the same time (for breakfast and standup), go to lunch at the same time, and leave at the same time. This maximizes the time the pairs are pairing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Em tradução livre, com grifo meu:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tais interrupções ocorrem, mas em um dia típico nós conseguimos evitá-las &lt;strong&gt;fazendo com que os pares cheguem na mesma hora (para café da manhã e reunião em pé), vão almoçar no mesmo horário, e vão para casa no mesmo horário&lt;/strong&gt;. Isso maximiza o tempo que os pares passam programando juntos.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Então, programação em par &lt;strong&gt;requer sincronismo&lt;/strong&gt;, o que pode torná-la uma opção inviável para equipes remotas (ou mesmo equipes que trabalham no mesmo local mas tem horários extremamente flexíveis).&lt;/p&gt;

&lt;p&gt;Tem gente que argumenta que trabalhar em pares pode &lt;strong&gt;prejudicar a criatividade e impedir experimentações.&lt;/strong&gt; Durante uma sessão em par, pode ser considerado rude desperdiçar o tempo de seu par tentando uma abordagem experimental que pode talvez não dar em nada. Então, a decisão mais segura possível tende a prevalecer sempre, mesmo que não seja a melhor possível.&lt;/p&gt;

&lt;p&gt;Finalmente, a programação em par não fornece um dos benefícios chave da revisão de código posterior: ter uma pessoa com zero contexto analisando o código produzido. As duas pessoas do par &lt;strong&gt;compartilham contexto desde o início da sessão&lt;/strong&gt;, o que não deve ser subestimado. As pessoas têm uma tendência a &lt;a href=&quot;https://en.wikipedia.org/wiki/IKEA_effect&quot;&gt;superestimar o valor de suas contribuições e criar laços emocionais com o que elas criam&lt;/a&gt;; por isso é tão importante conseguir uma outra pessoa que, livre desses laços, será capaz de oferecer um julgamento mais claro.&lt;/p&gt;

&lt;h2 id=&quot;revisão-de-código-vs-programação-em-par-o-veredito&quot;&gt;Revisão de Código vs Programação em Par: O Veredito?&lt;/h2&gt;
&lt;p&gt;Eu cheguei à conclusão de que, embora revisão de código e programação em par &lt;em&gt;pareçam&lt;/em&gt; equivalentes, na verdade não são. Existe uma intersecção ali, mas cada prática também apresenta benefícios e desafios únicos.&lt;/p&gt;

&lt;p&gt;Não tem como fugir do fato de que programação em par, apesar de seus benefícios, requer um número par de pessoas, trabalhando ao mesmo tempo. Se seu time consiste de pessoas vivendo em diversos fusos horários diferentes (ou mesmo uma equipe local mas com horário flexível), é fácil decidir: revisão de código na cabeça.&lt;/p&gt;

&lt;p&gt;Se a sua equipe não se encaixa na descrição acima, então eu digo: &lt;strong&gt;faça uma tentativa com programação em par&lt;/strong&gt;. Contanto que você se esforce para acomodar e ter empatia com &lt;a href=&quot;https://www.amazon.com/Quiet-Power-Introverts-World-Talking/dp/0307352153/ref=asap_bc?ie=UTF8&quot;&gt;diferentes tipos de personalidades&lt;/a&gt; e não torne obrigatório, programação em par pode ser benéfica para sua equipe.&lt;/p&gt;

&lt;p&gt;Finalmente, não há nada lhe impedindo de usar &lt;em&gt;ambas&lt;/em&gt; práticas. Você pode adotar programação em par como o &lt;em&gt;Modus Operandi&lt;/em&gt; padrão e deixar e revisão de código para preencher os vácuos onde o pareamento não funciona tão bem.&lt;/p&gt;

&lt;h2 id=&quot;de-um-jeito-ou-de-outro-abrace-a-automação&quot;&gt;De um jeito ou de outro, abrace a automação&lt;/h2&gt;
&lt;p&gt;Imagine que você escreve para uma publicação, como uma revista. Após finalizar um rascunho, ele precisa ser submetido para revisão. Será que faz sentido para a editora gastar todo seu tempo procurando por erros de ortografia? É claro que não! Nós temos ferramentas para checar tais erros de forma automática, liberando a editora para procurar por problemas em um nível mais alto, como vocabulário mal escolhido, falta de coesão, tom inapropriado, e todas aquelas coisas sobre as quais a sua professora de português não dava sossego.&lt;/p&gt;

&lt;p&gt;Com software não é diferente. Ao usar &lt;a href=&quot;https://submain.com/products/codeit.right.aspx&quot;&gt;uma ferramenta de revisão de códigos automatizados&lt;/a&gt;, você pode eliminar muitas das discussões inúteis que acontecem frequentemente em revisões de código ou sessões de programação em par. Não vai ter mais briga sobre convenções estéticas e de nomenclatura, posição de chaves e outras trivialidades inúteis.&lt;/p&gt;

&lt;p&gt;You can also employ a static analysis tool to warn you about potential bugs and opportunities for refactoring. That way, the reviewer/navigator is free to focus on the high-level stuff that requires human creativity, intelligence, and empathy.&lt;/p&gt;

&lt;p&gt;Você também pode usar uma ferramenta de análise estática para lhe alertar sobre potenciais bugs e oportunidades para refatoração. Assim, o revisor/navegador fica livre para focar em preocupações de mais alto nível que necessitam da criatividade, inteligência e empatia humanas.&lt;/p&gt;

&lt;h2 id=&quot;confiança-e-respeito&quot;&gt;Confiança e respeito&lt;/h2&gt;
&lt;p&gt;Quando estava pesquisando para escrever esse post, um tema aparecia bastante: pessoas afirmando que revisão de código surge devido à falta de confiança em nossos desenvolvedores ou que programação em par os infantiliza.&lt;/p&gt;

&lt;p&gt;Eu não poderia discordar mais.&lt;/p&gt;

&lt;p&gt;É exatamente por respeitarmos nossos colegas e clientes que devemos empregar técnicas e ferramentas à nossa disposição para melhorar a qualidade do trabalho que produzimos.&lt;/p&gt;

&lt;p&gt;Não é falta de confiança. É reconhecer que programar é difícil e às vezes, só um cérebro pode não dar conta do recado.&lt;/p&gt;

</description>
        <pubDate>Wed, 24 Jan 2018 00:00:00 +0000</pubDate>
        <link>https://carlosschults.net/pt/revisao-codigo-vs-programacao-em-par/</link>
        <guid isPermaLink="true">https://carlosschults.net/pt/revisao-codigo-vs-programacao-em-par/</guid>
        
        <category>programacao em par</category>
        
        <category>boas praticas</category>
        
        <category>revisao de codigo</category>
        
        <category>metodologias ageis</category>
        
        
      </item>
    
  </channel>
</rss>
